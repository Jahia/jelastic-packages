---
# Depends on:
#   - common.yml
#   - jahia.yml

actions:
  getUnomiDnsAndPwd:
    # Parameters:
    #   - unomi_env_name
    - script: |
        var unomi_env_name = "${this.unomi_env_name}"
        var resp = jelastic.env.control.GetEnvInfo(unomi_env_name, session)
        for (var i = 0, g = resp.nodes; i < g.length; i++) {
          if (g[i].nodeGroup == "cp") {
            var unomi_nodeid = g[i].id
            break
          }
        }
        var version = resp['nodes'][0]['customitem']['nodeVersion'];
        var cmd = "find -H /opt/ -mindepth 4  -type f -name setenv -exec awk -F'\"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' {} \\;";
        var command = toJSON([{"command": cmd}]);
        var res = jelastic.env.control.ExecCmdById(unomi_env_name, session, unomi_nodeid, command)
        var unomi_pwd_b64 = res['responses'][0]['out'];


        const container_env_vars = jelastic.env.control.GetContainerEnvVars(
                                    unomi_env_name,
                                    session,
                                    unomi_nodeid
                                  );
        const allowed_ips = container_env_vars.object.UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES;

        return {
          "result": 0,
          "onAfterReturn": {
            setGlobals: {
              "unomi_allowed_ips": allowed_ips,
              "unomidns": resp.env.domain,
              "__secret__unomi_pwd_b64": unomi_pwd_b64,
              "unomi_version": version
            }
          }
        };

  checkJcustomerHealth:
    cmd [${this}]: |-
      if service karaf status > /dev/null; then
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        karaf_pwd=$(awk -F'"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' $setenv | base64 -d)
        karaf_credentials="karaf:$karaf_pwd"
        curl -fsI /dev/null -u "$karaf_credentials" http://localhost:80/cxs/privacy/info && exit 0
      fi
      echo "[ERROR] jCustomer is unavailable, exiting" 1>&2 && exit 1

  checkJcustomerDatadogCustomChecks:
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: jcustomer_status
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: elasticsearch_status

  saveUnomiRootPassword:
    - cmd [${nodes.cp.first.id}]: |-
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        temp_unomi_root_password_b64=$(awk -F'"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' $setenv)
        printf '{"HideThisOutput": true, "temp_unomi_root_password_b64": "%s"}' "$temp_unomi_root_password_b64"
    - script: |-
        __secret__response = ${response.out};
        tempUnomiRootPasswordB64 = __secret__response["temp_unomi_root_password_b64"]
        return jelastic.env.control.ApplyNodeGroupData(
          '${env.envName}',
          session,
          nodeGroup='cp',
          data={"temp_unomi_root_password_b64": tempUnomiRootPasswordB64}
        );

  getUnomiRootPassword:
    - script: |-
        nodeGroups = jelastic.environment.control.getnodegroups("${env.envName}", session)["object"];
        for (n in nodeGroups) {
          if (typeof nodeGroups[n]["temp_unomi_root_password_b64"] !== "undefined") {
            return {
              "result": 0,
              "onAfterReturn": {
                setGlobals: {
                  "__secret__unomi_root_password_b64": nodeGroups[n]["temp_unomi_root_password_b64"]
                }
              }
            };
          }
        }

  setupDatadogAgentUnomi:
    # Parameters:
    #   - target
    #   - __secret__unomi_root_password_b64
    - setGlobalRepoRootUrl
    - configureDatadogSite:
        target: ${this.target}
    - cmd[${this.target}]: |-
        __secret__unomi_root_password_b64="${this.__secret__unomi_root_password_b64}"
        sed -i "s/\(password: \).*/\1$(echo $__secret__unomi_root_password_b64 | base64 -d | sed 's;\([\\\&\$]\);\\\1;g')/" /etc/datadog-agent/conf.d/jmx.d/conf.yaml
        mkdir /etc/datadog-agent/conf.d/jelastic.d
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        curl -fLSso /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${globals.repoRootUrl}/assets/common/dd_agent_jelastic_package_conf.yml || exit 1
        systemctl restart datadog-agent

  setupUnomi:
    # Parameters:
    #   - nodeId
    #   - __secret__unomi_root_password_b64
    - cmd[${this.nodeId}]: |-
        envfile=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        sed -e '/UNOMI_CLUSTER_PUBLIC_ADDRESS/d' \
            -e '/UNOMI_CLUSTER_INTERNAL_ADDRESS/d' \
            -e '/UNOMI_ROOT_PASSWORD/d' \
            -i $envfile
        __secret__unomi_root_password_b64="${this.__secret__unomi_root_password_b64}"
        echo "export UNOMI_CLUSTER_PUBLIC_ADDRESS=https://${env.domain}" >> $envfile
        echo "export UNOMI_CLUSTER_INTERNAL_ADDRESS=https://${env.domain}:9443" >> $envfile
        echo "UNOMI_ROOT_PASSWORD_B64=\"$__secret__unomi_root_password_b64\"" >> $envfile
        echo 'export UNOMI_ROOT_PASSWORD=$(echo $UNOMI_ROOT_PASSWORD_B64 | base64 -d)' >> $envfile
        echo >> $envfile
        systemctl is-active --quiet karaf && systemctl restart karaf || systemctl enable --quiet --now karaf
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during unomi setup."
    - checkJcustomerHealthWhenStarting: ${this.nodeId}

  initRedeployConfig:
    - cmd[cp]: |-
        redeploy_conf_path="/etc/jelastic/redeploy.conf"
        echo "$redeploy_conf_path" >> $redeploy_conf_path

  getLinkedJahiaEnvs:
    # Exports the comma-separated list of linked Jahia envs to the "linkedJahiaEnvs" global
    # Parameters:
    #   - unomiEnvName (optional, defaults to current envName)
    - script: |-
        unomiEnvName = "${this.unomiEnvName.print()}" ? "${this.unomiEnvName}" : "${env.envName}";
        envsLinked = jelastic.env.control.GetNodeGroups(unomiEnvName, session).object.filter(function (object) {
                                          return object.name == "cp";}).pop().envLink;
        if (! envsLinked) {
          return {"result": 0, "envs": ""};
        }
        return {"result": 0, "envs": envsLinked.toString()};
    - setGlobals:
        linkedJahiaEnvs: ${response.envs}


  deleteEnvLinkJcustomer:
    - setGlobalRepoRootUrl
    - getLinkedJahiaEnvs
    - script: |-
        linkedJahiaEnvs = "${globals.linkedJahiaEnvs}";

        if (linkedJahiaEnvs.length == 0 || linkedJahiaEnvs == "null") {
          return {"result": 0, "out": "No jahia linked"};
        }
        linkedJahiaEnvs = linkedJahiaEnvs.split(',');
        unlinkedJahiaEnvs = [];
        res = "";
        linkedJahiaEnvs.forEach(
          function(jahiaEnvname) {
            jahiaEnvStatus = JSON.parse(jelastic.env.control.GetEnvInfo(jahiaEnvname, session))["env"]["status"];
            resp = api.marketplace.jps.Install(
                {
                  jps: "${globals.repoRootUrl}/packages/jahia/unlink-jahia-jcustomer.yml",
                  envName: jahiaEnvname,
                  settings: {
                    'isUnomiEnvDeletion': true,
                    'jCustomerEnv': '${env.shortdomain}',
                    'jahiaEnvStatus': jahiaEnvStatus
                  }
                }
            )
            unlinkedJahiaEnvs.push(jahiaEnvname);
          }
        );

        if (unlinkedJahiaEnvs.length == 0) {
          return {"result": 0, "out": "No jahia environment linked"};
        }

        return {"result": 0, "out": "Unlinked following environments: " + linkedJahiaEnvs};

  checkJcustomerHealthWhenStarting:
    cmd [${this}]: |-
        log_file="/var/log/jelastic-packages/checkJcustomerHealthWhenStarting"
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        karaf_pwd=$(awk -F'"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' $setenv | base64 -d)
        timeout=600
        echo "jCustomer is starting...." >> $log_file
        echo "Waiting for cxs/privacy/info to be ok" >> $log_file
        while [ $timeout -gt 0 ]; do
          curl -fsI /dev/null -u "karaf:$karaf_pwd" http://localhost:80/cxs/privacy/info && exit 0
          sleep 1
          let "timeout-=1"
        done
        echo "600 seconds timeout exceeded, aborting" >> $log_file
        exit 1

  updateJahia:
    # Parameters:
    #   - __secret__new_password_b64
    # Update the jcustomer's root password in all linked jahia env(s)
    - setGlobalRepoRootUrl
    - getLinkedJahiaEnvs
    - script: |-
        linkedJahiaEnvs = "${globals.linkedJahiaEnvs}".split(',');

        if (linkedJahiaEnvs.lenght == 0) {
          return {"result": 0, "out": "No jahia linked"};
        }

        res = ""
        linkedJahiaEnvs.forEach(
          function(jahiaEnvname) {
            __secret__newPasswordB64 = "${this.__secret__new_password_b64}";
            data = {
              "targetAppid": jahiaEnvname,
              "settings": {"pwd_b64": __secret__newPasswordB64},
              "manifest": "${globals.repoRootUrl}/packages/jahia/set-jcustomer-password-in-jahia.yml"
            };
            res += res + jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
          }
        );
        return {"result": 0, "out": "Jahia environments updated " + res};

  setJcustomerApiKey:
    - cmd[${nodes.cp.first.id}]: |-
        api_key=$(openssl rand -hex 256 | sha1sum | cut -d' ' -f1)
        printf '{"HideThisOutput": true, "jcustomer_api_key": "%s"}' "$api_key"
    - script: |-
        __secret__response = ${response.out};
        jCustomerApiKey = __secret__response["jcustomer_api_key"];
        return jelastic.env.control.AddContainerEnvVars(
                  '${env.envName}',
                  session,
                  nodeGroup='cp',
                  vars={"UNOMI_THIRDPARTY_PROVIDER1_KEY": jCustomerApiKey}
        );

  getJcustomerKey:
    - script: |
        const jcustomerEnv = "${this.jcustomerEnv}"
        resp = jelastic.env.control.GetContainerEnvVarsByGroup(jcustomerEnv, session, nodeGroup='cp');
        return {
          "result": 0,
          "onAfterReturn": {
            setGlobals: {
              "__secret__jcustomerKey": resp.object["UNOMI_THIRDPARTY_PROVIDER1_KEY"]
            }
          }
        };

  refreshUnomiAllowedIPs:
    # Parameters:
    #   - unomiEnvName (optional, defaults to current envName)
    - setGlobalRepoRootUrl
    - if ('${this.unomiEnvName.print()}' == ''):
        set:
          unomiEnvName: ${env.envName}
    - else:
        set:
          unomiEnvName: ${this.unomiEnvName}
    - getLinkedJahiaEnvs:
        unomiEnvName: ${this.unomiEnvName}
    # Compute new value for UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES
    - script: |
        var defaultIps = "127.0.0.1,::1";
        var workatoIps = "3.65.225.246,3.66.45.94,18.198.249.58,34.226.132.221,52.5.142.59,52.54.43.157";
        var ipsToAllow = defaultIps + "," + workatoIps;

        // Add IPs of all Jahia nodes of all linked Jahia envs
        if ("${globals.linkedJahiaEnvs}" !== "") {
          linkedJahiaEnvs = "${globals.linkedJahiaEnvs}".split(',');
          jahiaIpList = [];
          linkedJahiaEnvs.forEach(
            function(jahiaEnvname) {
              var resp = jelastic.env.control.GetEnvInfo(jahiaEnvname, session);
              if (resp.result != 0) return resp;
              for (var i = 0, n = resp.nodes; i < n.length; i++) {
                var dockername = n[i].nodeGroup;
                if (dockername == 'cp' || dockername == 'proc') {
                  jahiaIpList.push(n[i].address);
                };
              };
            }
          );
          // We sort the array so that IPs don't appear in a random order (to make comparison possible)
          jahiaIpList.sort();
          ipsToAllow += "," + jahiaIpList.join(',');
        }

        return {"result": 0, "allowed_ips": ipsToAllow}
    - set:
        newIPList: "${response.allowed_ips}"
    # Get current envvar value and compare to new one
    - api: env.control.GetContainerEnvVarsByGroup
      envName: ${this.unomiEnvName}
      nodeGroup: cp
    - if ("${response.object.UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES}" != "${this.newIPList}"):
        # Update envvar and restart if value changed
        - api: env.control.AddContainerEnvVars
          envName: ${this.unomiEnvName}
          nodeGroup: cp
          vars: {"UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES": "${this.newIPList}"}
        - script: |-
            return api.marketplace.jps.Install(
              {
                jps: "${globals.repoRootUrl}/packages/jcustomer/jcustomer-rolling-restart.yml",
                envName: "${this.unomiEnvName}"
              }
            );
    - else:
        log: "UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES unchanged, no update needed"

  createJelasticPackagesLogDir:
    cmd[${this}]: |-
      mkdir /var/log/jelastic-packages
      chown root:root /var/log/jelastic-packages

  configureDatadogAPM:
    - cmd [${this}]: |-
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        sed -e '/APM_OPTS/d' -i $setenv
        echo 'APM_OPTS="-javaagent:'${JCUSTOMER_HOME}'/jcustomer/datadog/dd-java-agent.jar -Ddd.logs.injection=true -Ddd.service=jcustomer -Ddd.env='${env.envName}' -Ddd.profiling.enabled=true"' >> $setenv
        # Because cloudscripting interprets the bash form ${<variable name>:<something>} as its own placeholder, we have to use a trick
        echo '${DATADOG_APM_ENABLED¤-true} && JAVA_OPTS+=" $APM_OPTS"' | sed 's/¤/:/' >> $setenv

  onAfterRedeployJcustomerContainer:
    - createJelasticPackagesLogDir: ${this}
    - installPapiScript: ${this}
    - setESEndpointInJcustomerConfig: ${this}
    - configureDatadogAPM: ${this}
    - getUnomiRootPassword
    - setupDatadogAgentUnomi:
        target: ${this}
        __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}

  enablejCustomerKarafLogin:
    - isjCustomerKarafLoginEnabled: ${globals.isjCustomerKarafLoginEnabled}
      script: |-
          try {
            var resp = JSON.parse(isjCustomerKarafLoginEnabled)["${this}"]
          } catch(error) {
            var resp = false
          }
          return {"result": 0, "resp": resp}
    - if(${response.resp}):
        - log: "karaf login is already enabled, nothing to do"
    - else:
        - log: "Activate karaf's ssh login on ${this}"
        - cmd[${this}]: |-
            # Clear everything and enable karaf login
            [ -f /tmp/abricot ] && rm /tmp/abricot
            [ -f /tmp/abricot.pub  ] && rm /tmp/abricot.pub
            ssh-keygen -t rsa -f /tmp/abricot -P ""
            awk '{printf "abricot:%s,_g_:admingroup\n",$2}' /tmp/abricot.pub >> /opt/jcustomer/jcustomer/etc/keys.properties
            sed 's,\(sshRealm\s*=\s*\)jahia,\1karaf,' -i /opt/jcustomer/jcustomer/etc/org.apache.karaf.shell.cfg
            i=1
            it=66
            until (ssh abricot@localhost -p 8102 -i /tmp/abricot -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR unomi:version); do
              echo "karaf ssh login not updated yet (iteration $i/$it)"
              if [ $i -ge $it ]; then
                echo "Too long to start, something is wrong here... EXITING"
                exit 1
              fi
              ((i++))
              sleep 1
            done
        - isjCustomerKarafLoginEnabled: ${globals.isjCustomerKarafLoginEnabled}
          script: |-
            try {
              var isEnable = JSON.parse(isjCustomerKarafLoginEnabled)
            } catch(error) {
              var isEnable = {}
            } finally {
              isEnable["${this}"] = true
            }
            return {"result": 0, "isEnable": isEnable}
        - setGlobals:
            isjCustomerKarafLoginEnabled: ${response.isEnable}
            jCustomerKarafConsole: "ssh abricot@localhost -p 8102 -i /tmp/abricot -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"

  disablejCustomerKarafLogin:
    - isjCustomerKarafLoginEnabled: ${globals.isjCustomerKarafLoginEnabled}
      script: |-
          try {
            var resp = JSON.parse(isjCustomerKarafLoginEnabled)["${this}"]
          } catch(error) {
            var resp = false
          }
          return {"result": 0, "resp": resp}
    - if(! ${response.resp}):
        - log: "karaf login is already disabled, nothing to do"
    - else:
        - log: "Disable karaf's ssh login on ${this}"
        - cmd[${this}]: |-
            [ -f /tmp/abricot  ] && rm /tmp/abricot
            [ -f /tmp/abricot.pub  ] && rm /tmp/abricot.pub
            sed '/^abricot:/d' -i opt/jcustomer/jcustomer/etc/keys.properties
            sed 's,\(sshRealm\s*=\s*\)karaf,\1jahia,' -i /opt/jcustomer/jcustomer/etc/org.apache.karaf.shell.cfg
        - isjCustomerKarafLoginEnabled: ${globals.isjCustomerKarafLoginEnabled}
          script: |-
            try {
              var isEnable = JSON.parse(isjCustomerKarafLoginEnabled)
            } catch(error) {
              var isEnable = {}
            } finally {
              isEnable["${this}"] = false
            }
            return {"result": 0, "isEnable": isEnable}
        - setGlobals:
            isjCustomerKarafLoginEnabled: ${response.isEnable}
