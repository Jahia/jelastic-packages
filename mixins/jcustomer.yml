---
# Depends on:
#   - common.yml
#   - jahia.yml

actions:
  getUnomiDnsAndPwd:
    # Parameters:
    #   - unomi_env_name
    - script: |
        var unomi_env_name = "${this.unomi_env_name}"
        var resp = jelastic.env.control.GetEnvInfo(unomi_env_name, session)
        for (var i = 0, g = resp.nodes; i < g.length; i++) {
          if (g[i].nodeGroup == "cp") {
            var unomi_nodeid = g[i].id
            var unomi_version = g[i].version.split("-", 1)[0]
            break
          }
        }
        var cmd = "find -H /opt/ -mindepth 4  -type f -name setenv -exec awk -F'\"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' {} \\;";
        var command = toJSON([{"command": cmd}]);
        var res = jelastic.env.control.ExecCmdById(unomi_env_name, session, unomi_nodeid, command)
        var unomi_pwd_b64 = res['responses'][0]['out'];


        const container_env_vars = jelastic.env.control.GetContainerEnvVars(
                                     unomi_env_name,
                                     session,
                                     unomi_nodeid
                                   );
        const allowed_ips = container_env_vars.object.UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES;

        return {
          'result': 0,
          'domain': resp.env.domain,
          'unomi_pwd_b64': unomi_pwd_b64,
          'unomi_version': unomi_version,
          'allowed_ips': allowed_ips
        }

    - setGlobals:
        unomidns: ${response.domain}
        unomi_pwd_b64: ${response.unomi_pwd_b64}
        unomi_version: ${response.unomi_version}
        unomi_allowed_ips: ${response.allowed_ips}

  checkJcustomerHealth:
    cmd [${this}]: |-
      if service karaf status > /dev/null; then
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        karaf_pwd=$(awk -F'"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' $setenv | base64 -d)
        karaf_credentials="karaf:$karaf_pwd"
        curl -fsI /dev/null -u "$karaf_credentials" http://localhost:80/cxs/privacy/info && exit 0
      fi
      echo "[ERROR] jCustomer is unavailable, exiting" 1>&2 && exit 1
    user: root

  checkJcustomerDatadogCustomChecks:
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: jcustomer_status

  saveUnomiRootPassword:
    - cmd [${nodes.cp.first.id}]: |-
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        awk -F'"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' $setenv
    - environment.nodegroup.ApplyData[cp]:
        data:
          temp_unomi_root_password_b64: ${response.out}

  getUnomiRootPassword:
    - script: |-
        nodeGroups = jelastic.environment.control.getnodegroups("${env.envName}", session)["object"];
        for (n in nodeGroups) {
          if (typeof nodeGroups[n]["temp_unomi_root_password_b64"] !== "undefined") {
            return {"result": 0, "temp_unomi_root_password_b64": nodeGroups[n]["temp_unomi_root_password_b64"]}
          }
        }
    - setGlobals:
        unomi_root_password_b64: ${response.temp_unomi_root_password_b64}

  setupDatadogAgentUnomi:
    # Parameters:
    #   - target
    #   - unomi_root_password_b64
    - setGlobalRepoRootUrl
    - forEach(nodes.${this.target}):
        cmd[${@i.id}]: |-
          sed -i "s/\(password: \).*/\1$(echo ${this.unomi_root_password_b64} | base64 -d | sed 's;\\;\\\\;g')/" /etc/datadog-agent/conf.d/jmx.d/conf.yaml
          mkdir /etc/datadog-agent/conf.d/jelastic.d
          chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
          curl -fLSso /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${globals.repoRootUrl}/assets/common/dd_agent_jelastic_package_conf.yml || exit 1
          systemctl restart datadog-agent

  updateHazelcast:
    # Parameters:
    #   - unomi_root_password_b64
    - forEach(nodes.cp):
        cmd[${@i.id}]: |-
          sed -i "/<interface>/d" $HAZELCAST_CONFIG
          sed -i "/<member>node/d" $HAZELCAST_CONFIG
          envfile=$(find /opt/jcustomer/jcustomer/bin -name setenv)
          sed -e '/UNOMI_CLUSTER_PUBLIC_ADDRESS/d' \
              -e '/UNOMI_CLUSTER_INTERNAL_ADDRESS/d' \
              -e '/UNOMI_ROOT_PASSWORD/d' \
              -i $envfile
          echo "export UNOMI_CLUSTER_PUBLIC_ADDRESS=https://${env.domain}" >> $envfile
          echo "export UNOMI_CLUSTER_INTERNAL_ADDRESS=https://${env.domain}:9443" >> $envfile
          echo "UNOMI_ROOT_PASSWORD_B64=\"${this.unomi_root_password_b64}\"" >> $envfile
          echo 'export UNOMI_ROOT_PASSWORD=$(echo $UNOMI_ROOT_PASSWORD_B64 | base64 -d)' >> $envfile
          echo >> $envfile
          systemctl is-active --quiet karaf && systemctl restart karaf || exit 0
        user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during hazelcast setup."

  setupUnomi:
    # Parameters:
    #   - unomi_root_password_b64
    - updateHazelcast:
        unomi_root_password_b64: ${this.unomi_root_password_b64}
    - cmd[${nodes.cp.master.id}]:
        - systemctl enable --now karaf
      user: root
    - sleep: 20000
    - cmd[cp]:
        - systemctl enable --now karaf
      user: root

  setJournaldLimit:
    - cmd[cp]: |-
        sed -i 's/.*SystemMaxUse=.*/SystemMaxUse=200M/g' /etc/systemd/journald.conf
        systemctl restart systemd-journald.service
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during journald configuration."

  getLinkedJahiaEnvs:
    # Exports the comma-separated list of linked Jahia envs to the "linkedJahiaEnvs" global
    # Parameters:
    #   - unomiEnvName (optional, defaults to current envName)
    - script: |-
        unomiEnvName = "${this.unomiEnvName.print()}" ? "${this.unomiEnvName}" : "${env.envName}";
        envsLinked = jelastic.env.control.GetNodeGroups(unomiEnvName, session).object.filter(function (object) {
                                          return object.name == "cp";}).pop().envLink;
        if (! envsLinked) {
          return {"result": 0, "envs": ""};
        }
        return {"result": 0, "envs": envsLinked.toString()};
    - setGlobals:
        linkedJahiaEnvs: ${response.envs}


  deleteEnvLinkJcustomer:
    - setGlobalRepoRootUrl
    - getLinkedJahiaEnvs
    - script: |-
        linkedJahiaEnvs = "${globals.linkedJahiaEnvs}";

        if (linkedJahiaEnvs.length == 0 || linkedJahiaEnvs == "null") {
          return {"result": 0, "out": "No jahia linked"};
        }
        commands = [
          {
            "command": "sed -i 's/\\(jexperience.jCustomer.*=\\).*/\\1/g' /data/digital-factory-data/karaf/etc/org.jahia.modules.jexperience.settings-global.cfg"
          }
        ]

        linkedJahiaEnvs = linkedJahiaEnvs.split(',');
        unlinkedJahiaEnvs = [];
        res = "";
        linkedJahiaEnvs.forEach(
          function(jahiaEnvname) {
            envInfos = jelastic.env.control.GetEnvInfo(jahiaEnvname, session);
            ["cp","proc"].forEach(
              function(nodeGroup) {
                var resp = jelastic.env.nodegroup.ApplyData(jahiaEnvname, session,
                  nodeGroup=nodeGroup,
                  data={'envLink': null}
                );
                if (envInfos.env.status == 1)  {
                  jelastic.env.control.ExecCmdByGroup(jahiaEnvname, session,
                    nodeGroup=nodeGroup,
                    commandList=toJSON(commands));
                }
              }
            )
            resp = api.marketplace.jps.Install(
              {
                jps: "${globals.repoRootUrl}/packages/jahia/manage-module.yml",
                envName: jahiaEnvname,
                settings: {
                  "action": "uninstall",
                  "moduleName": "jexperience"
                }
              }
            )
            if (resp.result != 0) return resp;
            unlinkedJahiaEnvs.push(jahiaEnvname);
          }
        );

        if (unlinkedJahiaEnvs.length == 0) {
          return {"result": 0, "out": "No jahia environment linked"};
        }

        return {"result": 0, "out": "Unlinked following environments: " + linkedJahiaEnvs};

  checkJcustomerHealthWhenStarting:
    cmd [${this}]: |-
        log_file="/var/log/jelastic-packages/checkJcustomerHealthWhenStarting"
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        karaf_pwd=$(awk -F'"' '$1~/UNOMI_ROOT_PASSWORD_B64=$/ {print $2}' $setenv | base64 -d)
        timeout=600
        echo "jCustomer is starting...." >> $log_file
        echo "Waiting for cxs/privacy/info to be ok" >> $log_file
        while [ $timeout -gt 0 ]; do
          curl -fsI /dev/null -u "karaf:$karaf_pwd" http://localhost:80/cxs/privacy/info && exit 0
          sleep 1
          let "timeout-=1"
        done
        echo "600 seconds timeout exceeded, aborting" >> $log_file
        exit 1
    user: root

  updateJahia:
    # Parameters:
    #   - new_password_b64
    # Update the jcustomer's root password in all linked jahia env(s)
    - setGlobalRepoRootUrl
    - getLinkedJahiaEnvs
    - script: |-
        linkedJahiaEnvs = "${globals.linkedJahiaEnvs}".split(',');

        if (linkedJahiaEnvs.lenght == 0) {
          return {"result": 0, "out": "No jahia linked"};
        }

        res = ""
        linkedJahiaEnvs.forEach(
          function(jahiaEnvname) {
            data = {
              "targetAppid": jahiaEnvname,
              "settings": {"pwd_b64": "${this.new_password_b64}"},
              "manifest": "${globals.repoRootUrl}/packages/jahia/set-jcustomer-password-in-jahia.yml"
            };
            res += res + jelastic.dev.scripting.eval("appstore", session, "InstallApp", data);
          }
        );
        return {"result": 0, "out": "Jahia environments updated " + res};

  setJcustomerApiKey:
    - cmd[${nodes.cp.first.id}]: |-
        openssl rand -hex 256 | sha1sum | cut -d' ' -f1
    - setGlobals:
        apiKey: ${response.out}
    - api[cp]: env.control.AddContainerEnvVars
      vars: {"UNOMI_THIRDPARTY_PROVIDER1_KEY": "${globals.apiKey}"}
    - cmd[cp]: systemctl restart karaf

  getJcustomerKey:
    - script: |
        const jcustomerEnv = "${this.jcustomerEnv}"
        resp = jelastic.env.control.GetContainerEnvVarsByGroup(jcustomerEnv, session, nodeGroup='cp');
        return {'result': 0, 'out': resp.object["UNOMI_THIRDPARTY_PROVIDER1_KEY"]};
    - setGlobals:
        jcustomerKey: ${response.out}

  refreshUnomiAllowedIPs:
    # Parameters:
    #   - unomiEnvName (optional, defaults to current envName)
    - if ('${this.unomiEnvName.print()}' == ''):
        set:
          unomiEnvName: ${env.envName}
    - else:
        set:
          unomiEnvName: ${this.unomiEnvName}
    - getLinkedJahiaEnvs:
        unomiEnvName: ${this.unomiEnvName}
    # Compute new value for UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES
    - script: |
        var defaultIps = "127.0.0.1,::1";
        var workatoIps = "3.65.225.246,3.66.45.94,18.198.249.58,34.226.132.221,52.5.142.59,52.54.43.157";
        var ipsToAllow = defaultIps + "," + workatoIps;

        // Add IPs of all Jahia nodes of all linked Jahia envs
        if ("${globals.linkedJahiaEnvs}" !== "") {
          linkedJahiaEnvs = "${globals.linkedJahiaEnvs}".split(',');
          jahiaIpList = [];
          linkedJahiaEnvs.forEach(
            function(jahiaEnvname) {
              var resp = jelastic.env.control.GetEnvInfo(jahiaEnvname, session);
              if (resp.result != 0) return resp;
              for (var i = 0, n = resp.nodes; i < n.length; i++) {
                var dockername = n[i].nodeGroup;
                if (dockername == 'cp' || dockername == 'proc') {
                  jahiaIpList.push(n[i].address);
                };
              };
            }
          );
          // We sort the array so that IPs don't appear in a random order (to make comparison possible)
          jahiaIpList.sort();
          ipsToAllow += "," + jahiaIpList.join(',');
        }

        return {"result": 0, "allowed_ips": ipsToAllow}
    - set:
        newIPList: "${response.allowed_ips}"
    # Get current envvar value and compare to new one
    - api: env.control.GetContainerEnvVarsByGroup
      envName: ${this.unomiEnvName}
      nodeGroup: cp
    - if ("${response.object.UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES}" != "${this.newIPList}"):
        # Update envvar and restart if value changed
        - api: env.control.AddContainerEnvVars
          envName: ${this.unomiEnvName}
          nodeGroup: cp
          vars: {"UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES": "${this.newIPList}"}
        - api: env.control.RestartNodes
          envName: ${this.unomiEnvName}
          nodeGroup: cp
    - else:
        log: "UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES unchanged, no update needed"

  createJelasticPackagesLogDir:
    cmd[cp]: |-
      mkdir /var/log/jelastic-packages
      chown root:root /var/log/jelastic-packages
    user: root

  setJelEnvRoleInNodeGroupData:
    - cmd[${nodes.cp.first.id}]: |-
        source /metadata_from_HOST
        if [ -z $JEL_ENV_ROLE ]; then
          echo "JEL_ENV_ROLE variable is not defined in /metadata_from_HOST"
          exit 1
        fi
        echo $JEL_ENV_ROLE

    - environment.nodegroup.ApplyData [cp]:
        data:
          JEL_ENV_ROLE: ${response.out}

  configureDatadogAPM:
    - cmd [cp]: |-
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        echo 'APM_OPTS="-javaagent:'${JCUSTOMER_HOME}'/jcustomer/datadog/dd-java-agent.jar -Ddd.logs.injection=true -Ddd.service=jcustomer -Ddd.env='${env.envName}' -Ddd.profiling.enabled=true"' >> $setenv
        echo ${DATADOG_APM_ENABLED:-true}' && JAVA_OPTS+=" $APM_OPTS"' >> $setenv
