---
# Depends on:
#   - common.yml

actions:
  setupES:
    - getVaultData
    - runESCircleCIPipeline:
        workflow: terraform_apply
    - createESAccountAndAliases
    - setESEndpointInJcustomerConfig: cp

  setupES4AS:
    - getVaultData
    - runESCircleCIPipeline:
        workflow: terraform_apply
    - createESAccount4AS

  runESCircleCIPipeline:
    # Parameters:
    # - workflow : the pipeline workflow to run (terraform_apply/terraform_destroy)
    - vaultSecretReadKeyB64:
        secretPath: paas/envs-common/cloud-ec-infra-circleci-api
        secretKey: token
    - set:
        __secret__circleCiToken: ${globals.__secret__vaultSecretData}

    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - getCloudConf

    - cmd [${nodes.cp.first.id}]: |-
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"

        source /metadata_from_HOST
        if [ -z $JEL_ENV_ROLE ]; then
          echo "JEL_ENV_ROLE variable is not defined in /metadata_from_HOST"
          exit 1
        fi

        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")

        if [ -z "$environment" ] || [ -z "$ec_deployment" ]; then
          echo "Failed to fetch environment or ec_deployment"
          exit 1
        fi

        organization_id=$(echo $environment | jq -r .paas_organization_id)
        ec_deployment_id=$(echo $ec_deployment | jq -r .ec_deployment_id)
        ec_deployment_name=$(echo $ec_deployment | jq -r .name)
        ec_deployment_mutualized=$(echo $ec_deployment | jq -r .mutualized)
        ec_deployment_es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint)

        __secret__CCToken=$(echo -n ${this.__secret__circleCiToken} | base64 -d)

        generate_payload() {
        if [[ "${globals.cloud_conf.ec.tag}" =~ ^v[0-9]+(\.[0-9]+)*$ ]]; then
          branch_or_tag="tag"
        else
          branch_or_tag="branch"
        fi
        cat << EOF
        {
          "$branch_or_tag": "${globals.cloud_conf.ec.tag}",
          "parameters": {
            "workflow": "${this.workflow}",
            "env": "$JEL_ENV_ROLE",
            "papi_organization_id": $organization_id,
            "papi_instance_id": $ec_deployment_id,
            "papi_instance_name": "$ec_deployment_name"
          }
        }
        EOF
        }

        response=$(curl -fLSs -XPOST https://circleci.com/api/v2/project/github/Jahia/cloud-ec-infra/pipeline \
                        -H "Circle-Token: $__secret__CCToken" --header 'content-type: application/json' --data "$(generate_payload)")
        if [ $? -ne 0 ]; then
          echo "Pipeline trigger failed: $response"
          exit 1
        fi

        # Skip the timeout while updating a mutualized EC deployment but wait till end if it's a new EC deployment
        if [ "$ec_deployment_mutualized" = "false" ] || [ "$ec_deployment_es_endpoint" = null ]; then
          pipelineId=$(echo $response | jq -r .id)
          sleep 1  # it seems to take a few milliseconds for the pipeline to really be created in CCI...
          response=$(curl -LSs "https://circleci.com/api/v2/pipeline/$pipelineId/workflow" -H "Circle-Token: $__secret__CCToken")
          if [ "$(echo $response | jq -r '.items[0].status')" == "null" ]; then
            echo "No workflow created on CircleCI, aborting. Pipeline ID: $pipelineId. Response: $response" >&2
            exit 1
          fi
          timeout=1200 # 20 minutes
          sleep_interval=20
          workflow_status="running"
          while [ "$workflow_status" = "running" ]; do
            sleep $sleep_interval
            response=$(curl -fLSs "https://circleci.com/api/v2/pipeline/$pipelineId/workflow" -H "Circle-Token: $__secret__CCToken")
            if [ $? -eq 0 ]; then
              new_workflow_status=$(echo $response | jq -r '.items[0].status')
              if [ "$new_workflow_status" != "null" ]; then
                workflow_status=$new_workflow_status
              fi
            fi
            if [ $timeout -lt 1 ]; then
              echo "Timeout reached while waiting for circleCi pipeline to end"
              exit 1
            fi
            ((timeout-=$sleep_interval))

          done
          if [ "$workflow_status" != "success" ]; then
            echo "Elasticsearch cluster creation failed"
            exit 1
          fi
        fi

  createESAccount4AS:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll

    - cmd [proc]: |-
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"

        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")

        es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint)
        kibana_endpoint=$(echo $ec_deployment | jq -r .kibana_endpoint)

        creds=$(papi.py -X GET "ec-deployment/$ec_deployment_id/credentials")
        password=$(echo $creds | jq -r .password)
        login=$(echo $creds | jq -r .login)

        # Create Kibana role
        curl -fLSsu "$login:$password" "$kibana_endpoint/api/security/role/${env.envName}" -H 'Content-Type:application/json' -H "kbn-xsrf: reporting" -d '{"metadata": {},"elasticsearch": {"cluster": ["monitor", "manage_index_templates", "manage"], "indices": [{"names": ["${env.envName}_*"], "privileges": ["all"]}] }, "kibana": [{"base": ["all"], "feature": {}, "spaces": ["${env.envName}"]}]}' -XPUT
        if [ $? -ne 0 ]; then
          echo "Failed to create kibana role." && exit 1
        fi

        # Create ES user
        __secret__elasticsearch_password="${globals.__secret__elasticsearch_password}"
        curl -fLSsu "$login:$password" "$es_endpoint/_security/user/${env.envName}" -XPUT  -d '{"password": "'"$__secret__elasticsearch_password"'", "roles": ["${env.envName}"], "full_name": "${env.envName}"}'  -H 'Content-Type:application/json'
        if [ $? -ne 0 ]; then
          echo "Failed to create ES user." && exit 1
        fi

  createESAccountAndAliases:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll

    - cmd [${nodes.cp.first.id}]: |-
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"

        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")

        es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint)
        kibana_endpoint=$(echo $ec_deployment | jq -r .kibana_endpoint)

        creds=$(papi.py -X GET "ec-deployment/$ec_deployment_id/credentials")
        password=$(echo $creds | jq -r .password)
        login=$(echo $creds | jq -r .login)

        # Create Kibana role
        curl -fLSsu "$login:$password" "$kibana_endpoint/api/security/role/${env.envName}" -H 'Content-Type:application/json' -H "kbn-xsrf: reporting" -d '{"metadata": {},"elasticsearch": {"cluster": ["monitor", "manage_index_templates", "manage"], "indices": [{"names": ["${env.envName}_*"], "privileges": ["all"]},{"names": ["global-geonameentry"], "privileges": ["view_index_metadata"]}] }, "kibana": [{"base": ["all"], "feature": {}, "spaces": ["${env.envName}"]}]}' -XPUT
        if [ $? -ne 0 ]; then
          echo "Failed to create kibana role." && exit 1
        fi

        # Create ES user
        __secret__elasticsearch_password="${globals.__secret__elasticsearch_password}"
        curl -fLSsu "$login:$password" "$es_endpoint/_security/user/${env.envName}" -XPUT  -d '{"password": "'"$__secret__elasticsearch_password"'", "roles": ["${env.envName}"], "full_name": "${env.envName}"}'  -H 'Content-Type:application/json'
        if [ $? -ne 0 ]; then
          echo "Failed to create ES user." && exit 1
        fi

        curl -fLSsu "$login:$password" "$es_endpoint/_cat/indices/global-geonameentry" > /dev/null 2>&1
        if [ $? -ne 0 ]; then
          curl -fLSsu "$login:$password" "$es_endpoint/global-geonameentry" -H 'Content-Type:application/json' -s -XPUT -d '{
            "settings" : {"index" : {"number_of_shards" : 1,"number_of_replicas" : 1},"analysis":{"analyzer":{"folding":{"filter":["lowercase","asciifolding"],"type":"custom","tokenizer":"keyword"}}}},
            "mappings": {
              "dynamic_templates": [
                {
                  "all": {
                    "match": "*",
                    "match_mapping_type": "string",
                    "mapping": {
                      "analyzer": "folding",
                      "fields": {
                        "keyword": {
                          "ignore_above": 256,
                          "type": "keyword"
                        }
                      },
                      "type": "text"
                    }
                  }
                }
              ],
              "properties": {
                "admin1Code": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "admin2Code": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "admin3Code": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "admin4Code": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "asciiname": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "cc2": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "countryCode": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "dem": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "elevation": {"type": "long"},
                "featureClass": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "featureCode": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "itemId": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "itemType": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "location": {"type": "geo_point"},
                "modificationDate": {"type": "date"},
                "name": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                },
                "population": {"type": "long"},
                "timezone": {
                  "type": "text",
                  "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                }
              }
            }
          }'

          if [ $? -ne 0 ]; then
            echo "Failed to create global geonameentry index." && exit 1
          fi
        fi

        curl -fLSsu "$login:$password" "$es_endpoint/_aliases" -H 'Content-Type:application/json' -d '{"actions": [{"add": {"is_write_index": true,"index": "global-geonameentry","alias": "${env.envName}__jc-geonameentry"}}]}'
        if [ $? -ne 0 ]; then
          echo "Failed to create geonameentry alias." && exit 1
        fi

  populateGeonameIndex:
    - cmd[${nodes.cp.first.id}]: |-
        systemctl start populateGeonameIndex

  setESEndpointInJcustomerConfig:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - cmd [${this}]: |-
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"

        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")

        es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint)

        es_hostname=$(echo $es_endpoint | sed 's,https\?\:\/\/,,g')
        echo "$es_hostname"

    - script: |-
        envVars = {
          "UNOMI_ELASTICSEARCH_ADDRESSES": "${response.out}",
        }
        return api.env.control.AddContainerEnvVars("${env.envName}", session, "cp", envVars);

  getECAdminCredentials:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - script: |-
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.impl.client.HttpClients;
        import org.apache.http.util.EntityUtils;
        import org.apache.http.entity.StringEntity;
        import java.util.Base64;

        __secret__papiToken = "${globals.__secret__papiToken}";
        papiEnvId = "${globals.papiEnvId}";
        papiBaseUrl = "https://${globals.papiHostname}/api/${globals.papiApiVersion}/";

        getPaasEnv = new HttpGet(papiBaseUrl + "paas-environment/" + papiEnvId);
        getPaasEnv.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getPaasEnv);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get paas environment " + papiEnvId};
        }
        paasEnv = JSON.parse(EntityUtils.toString(resp.getEntity()));
        ecDeploymentId = paasEnv["ec_deployment_id"];

        getECDeployment = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId);
        getECDeployment.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getECDeployment);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get ec deployment " + ecDeploymentId + ": " + resp};
        }
        ec_deployment = JSON.parse(EntityUtils.toString(resp.getEntity()));

        // Get ES credentials from PAPI
        getECDeploymentCreds = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId + "/credentials");
        getECDeploymentCreds.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getECDeploymentCreds);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get ec deployment credentials for " + ecDeploymentId + ": " + resp};
        }
        es_credentials = JSON.parse(EntityUtils.toString(resp.getEntity()));
        ecAdminCredentials = es_credentials["login"] + ":" + es_credentials["password"]
        return {
          "result": 0,
          "onAfterReturn": {
            setGlobals: {
              "__secret__ecAdminCredentials": ecAdminCredentials
            }
          }
        };

  getECDeploymentEndpoints:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - script: |-
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.impl.client.HttpClients;
        import org.apache.http.util.EntityUtils;
        import org.apache.http.entity.StringEntity;
        import java.util.Base64;

        __secret__papiToken = "${globals.__secret__papiToken}";
        papiEnvId = "${globals.papiEnvId}";
        papiBaseUrl = "https://${globals.papiHostname}/api/${globals.papiApiVersion}/";

        getPaasEnv = new HttpGet(papiBaseUrl + "paas-environment/" + papiEnvId);
        getPaasEnv.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getPaasEnv);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get paas environment " + papiEnvId};
        }
        paasEnv = JSON.parse(EntityUtils.toString(resp.getEntity()));
        ecDeploymentId = paasEnv["ec_deployment_id"]

        getECDeployment = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId);
        getECDeployment.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getECDeployment);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get ec deployment " + ecDeploymentId + ": " + resp};
        }
        ec_deployment = JSON.parse(EntityUtils.toString(resp.getEntity()));
        return {
          "result": 0,
          "onAfterReturn": {
            setGlobals: {
              "es_endpoint": ec_deployment.es_endpoint,
              "kibana_endpoint": ec_deployment.kibana_endpoint
            }
          }
        };

  destroyESDeployment:
    - getVaultData
    - vaultSecretReadKeyB64:
        secretPath: paas/envs-common/cloud-ec-infra-circleci-api
        secretKey: token
    - set:
        __secret__circleCiToken: ${globals.__secret__vaultSecretData}
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - script: |-
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.client.methods.HttpPost;
        import org.apache.http.client.methods.HttpPut;
        import org.apache.http.client.methods.HttpDelete;
        import org.apache.http.impl.client.HttpClients;
        import org.apache.http.util.EntityUtils;
        import org.apache.http.entity.StringEntity;
        import java.util.Base64;

        __secret__papiToken = "${globals.__secret__papiToken}";
        papiEnvId = "${globals.papiEnvId}";
        papiBaseUrl = "https://${globals.papiHostname}/api/${globals.papiApiVersion}/";

        getPaasEnv = new HttpGet(papiBaseUrl + "paas-environment/" + papiEnvId);
        getPaasEnv.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getPaasEnv);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get paas environment " + papiEnvId};
        }
        paasEnv = JSON.parse(EntityUtils.toString(resp.getEntity()));
        ecDeploymentId = paasEnv["ec_deployment_id"]

        getECDeployment = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId);
        getECDeployment.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getECDeployment);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get ec deployment " + ecDeploymentId + ": " + resp};
        }
        ec_deployment = JSON.parse(EntityUtils.toString(resp.getEntity()));

        // If the deleted env is one of many mutualized envs, we don't delete the EC deployment.
        // Instead, we clean up indices, geonameentry alias, kibana role and es user related to the env.
        if (ec_deployment["mutualized"] && ec_deployment["paas_environments"].length > 1) {
            // Get ES credentials from PAPI
            getECDeploymentCreds = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId + "/credentials");
            getECDeploymentCreds.setHeader("X-PAPI-KEY", __secret__papiToken);
            httpClient = HttpClients.createDefault();
            resp = httpClient.execute(getECDeploymentCreds);
            if (resp.getStatusLine().getStatusCode() != 200) {
              return {"result": 1, errOut: "Can't get ec deployment credentials for " + ecDeploymentId + ": " + resp};
            }
            es_credentials = JSON.parse(EntityUtils.toString(resp.getEntity()));
            auth_basic_es_credentials = es_credentials["login"] + ":" + es_credentials["password"]
            creds_bytes = (new java.lang.String(auth_basic_es_credentials)).getBytes("UTF-8");
            encoded_auth_basic_creds = Base64.getEncoder().encodeToString(creds_bytes);

            nodes = jelastic.env.control.GetNodeGroups("${env.envName}", session)
            jahia_env = (nodes.object.filter(function (object) {return object.name == "proc"}).length == 1);

            // Delete indices
            deleteESIndices = new HttpDelete(ec_deployment["es_endpoint"] + "/${env.shortdomain}_*");
            deleteESIndices.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
            httpClient = HttpClients.createDefault();
            resp = httpClient.execute(deleteESIndices);
            if (resp.getStatusLine().getStatusCode() != 200) {
              return {"result": 1, errOut: "Can't delete indices:" + resp};
            }

            if (!jahia_env) {
              // Delete geonameentry alias
              deleteGeonameAlias = new HttpDelete(ec_deployment["es_endpoint"] + "/global-geonameentry/_alias/${env.shortdomain}__jc-geonameentry");
              deleteGeonameAlias.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
              httpClient = HttpClients.createDefault();
              resp = httpClient.execute(deleteGeonameAlias);
              if (resp.getStatusLine().getStatusCode() != 200) {
                return {"result": 1, errOut: "Can't delete geonameentry alias:" + resp};
              }
            }

            // Delete Kibana role
            deleteKibanaRole = new HttpDelete(ec_deployment["kibana_endpoint"] + "/api/security/role/${env.shortdomain}");
            deleteKibanaRole.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
            deleteKibanaRole.setHeader("kbn-xsrf", "reporting");
            httpClient = HttpClients.createDefault();
            resp = httpClient.execute(deleteKibanaRole);
            if (resp.getStatusLine().getStatusCode() != 204) {
              return {"result": 1, errOut: "Can't delete kibana role:" + resp};
            }

            // Delete ES user
            deleteESUser = new HttpDelete(ec_deployment["es_endpoint"] + "/_security/user/${env.shortdomain}");
            deleteESUser.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
            httpClient = HttpClients.createDefault();
            resp = httpClient.execute(deleteESUser);
            if (resp.getStatusLine().getStatusCode() != 200) {
              return {"result": 1, errOut: "Can't delete es user:" + resp};
            }

            return {"result": 0, "out": "indices, geonameentry alias, kibana role and es user deleted"};
        }

        updateECDeployment = new HttpPut(papiBaseUrl + "paas-environment/" + papiEnvId);
        updateECDeployment.setHeader("X-PAPI-KEY", __secret__papiToken);
        updateECDeployment.setHeader("Content-Type", "application/json");
        json = toJSON({"ec_deployment_id": undefined});
        stringEntity = new StringEntity(json);
        updateECDeployment.setEntity(stringEntity);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(updateECDeployment);

        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't edit paas environment " + papiEnvId  + ": " + resp};
        }

        jel_env_role = jelastic.env.control.GetNodeGroups("${env.envName}", session).object.filter(function (object) {
                                        return object.name == "cp";}).pop().JEL_ENV_ROLE;
        if (!jel_env_role) {
          return {"result": 1, errOut: "Can't get JEL_ENV_ROLE from node group data" };
        }

        __secret__circleCiToken="${this.__secret__circleCiToken.fromBase64()}"
        triggerPipeline = new HttpPost("https://circleci.com/api/v2/project/github/Jahia/cloud-ec-infra/pipeline");
        triggerPipeline.setHeader("Circle-Token", __secret__circleCiToken);
        triggerPipeline.setHeader("Content-Type", "application/json");
        cloud_conf = jelastic.env.control.getnodegroups('${env.envName}', session).object.filter(function (object) {
                                                        return object.name == "cp"}).pop().cloud_conf
        regex = /^v[0-9]+(\.[0-9]+)*$/
        if (cloud_conf.ec.tag.match(regex)) {
          branch_or_tag = "tag"
        } else {
          branch_or_tag = "branch"
        }
        json = {
          "parameters": {
            "workflow": "terraform_destroy",
            "env": jel_env_role,
            "papi_organization_id": ec_deployment["organization_id"],
            "papi_instance_id": ec_deployment["ec_deployment_id"],
            "papi_instance_name": ec_deployment["name"]
          }
        };
        json[branch_or_tag] = cloud_conf.ec.tag
        json = toJSON(json)
        stringEntity = new StringEntity(json);
        triggerPipeline.setEntity(stringEntity);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(triggerPipeline);

        if (resp.getStatusLine().getStatusCode() != 201) {
          return {"result": 1, errOut: "Can't trigger CircleCi Pipleline:" + resp};
        }


        pipelineId = JSON.parse(EntityUtils.toString(resp.getEntity()))["id"];
        timeout=600000 // 10 minutes
        sleep_interval=10000 // 10 sec
        workflow_status="running"
        while (workflow_status == "running" && timeout > 0) {
          java.lang.Thread.sleep(sleep_interval);

          getWorkflow = new HttpGet("https://circleci.com/api/v2/pipeline/" + pipelineId + "/workflow");
          getWorkflow.setHeader("Circle-Token", __secret__circleCiToken);
          httpClient = HttpClients.createDefault();
          resp = httpClient.execute(getWorkflow);
          if (resp.getStatusLine().getStatusCode() == 200) {
            result = JSON.parse(EntityUtils.toString(resp.getEntity()));
            if (result["items"][0]["status"])
              workflow_status = result["items"][0]["status"];
          }
          timeout -= sleep_interval
        }
        if (workflow_status != "success")
          return {"result": 1, errOut: "CircleCi Pipleline failed"};

        return {"result": 0, "out": "EC deployment deleted"};

  getElasticCloudDeploymentId:
    # Returns:
    #   ${globals.elasticCloudDeploymentId}
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - cmd[${nodes.cp.first.id}]: |-
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"
        environment=$(papi.py -X GET paas-environment/$PAPI_ENV_ID) || exit 1
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id) || exit 1
        ec_deployment=$(papi.py -X GET ec-deployment/$ec_deployment_id) || exit 1
        elastic_cloud_id=$(echo $ec_deployment | jq -r .elastic_cloud_id) || exit 1
        echo $elastic_cloud_id
    - setGlobals:
        elasticCloudDeploymentId: ${response.out}

  purgeEnvIndicesInES:
    - getPapiInfoAll
    - cmd[proc]: |-
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"

        if [[ ! "$jahia_cfg_elasticsearch_prefix" =~ "${env.envName}".* ]]; then
          echo "jahia_cfg_elasticsearch_prefix value is wrong. Exiting to avoid deleting wrong indices"
          exit0
        fi

        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")

        ec_deployment_credentials=$(papi.py -X GET "ec-deployment/$ec_deployment_id/credentials")
        es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint)

        es_password=$(echo $ec_deployment_credentials | jq -r .password)
        es_login=$(echo $ec_deployment_credentials | jq -r .login)

        curl -u "$es_login:$es_password" -XDELETE "$es_endpoint/${jahia_cfg_elasticsearch_prefix}__*"


  setAwsSnapshotRepository:
    # Parameters:
    #   - repositoryName
    #   - backupName
    #   - region
    #   - account
    #   - logsPath
    #   - __secret__awsAccessKeyId
    #   - __secret__awsSecretAccessKey
    #   - readonly Mount the repository in readonly if true. Set to false if not provided
    - cmd[${nodes.cp.first.id}]: |-
        __secret__aws_access_key="${this.__secret__awsAccessKeyId}"
        __secret__aws_secret_key="${this.__secret__awsSecretAccessKey}"
        output_file=$(mktemp)
        __secret__ec_admin_credentials=${globals.__secret__ecAdminCredentials}
        return_code=$(curl -sS -o $output_file -w '%{http_code}' \
          -H 'Content-Type: application/json' \
          -u $__secret__ec_admin_credentials \
          -XPUT "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_snapshot/${this.repositoryName}?verify=true&pretty" \
          -d"{\"type\": \"s3\", \"settings\": { \"bucket\": \"${this.account}\", \"region\": \"${this.region}\", \"base_path\" : \"${this.backupName}/elasticsearch\", \"access_key\": \"$__secret__aws_access_key\", \"secret_key\": \"$__secret__aws_secret_key\", \"readonly\": \"${this.readonly:false}\"}}")
        exit=0
        if [ $return_code -ne 200 ]; then
          cat $output_file | tee -a ${this.logsPath}
          exit=1
        fi
        rm -f $output_file
        exit $exit

  getElasticCloudApiKey:
    # Returns:
    #   ${globals.__secret__elasticCloudApiKey}
    - vaultSecretReadKeyB64:
        secretPath: paas/envs-common/elastic-cloud-api-key
        secretKey: key
    - setGlobals:
        __secret__elasticCloudApiKey: ${globals.__secret__vaultSecretData}

  cleanupRolesAndUsersForMutualizedECDeployment:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll
    - script: |-
        import org.apache.http.client.methods.HttpGet;
        import org.apache.http.client.methods.HttpPost;
        import org.apache.http.client.methods.HttpPut;
        import org.apache.http.client.methods.HttpDelete;
        import org.apache.http.impl.client.HttpClients;
        import org.apache.http.util.EntityUtils;
        import org.apache.http.entity.StringEntity;
        import java.util.Base64;

        __secret__papiToken = "${globals.__secret__papiToken}";
        papiEnvId = "${globals.papiEnvId}";
        papiBaseUrl = "https://${globals.papiHostname}/api/${globals.papiApiVersion}/";

        getPaasEnv = new HttpGet(papiBaseUrl + "paas-environment/" + papiEnvId);
        getPaasEnv.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getPaasEnv);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get paas environment " + papiEnvId};
        }
        paasEnv = JSON.parse(EntityUtils.toString(resp.getEntity()));
        ecDeploymentId = paasEnv["ec_deployment_id"]

        getECDeployment = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId);
        getECDeployment.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getECDeployment);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get ec deployment " + ecDeploymentId + ": " + resp};
        }
        ecDeployment = JSON.parse(EntityUtils.toString(resp.getEntity()));

        // Check if ec deployment is mutualized
        if (!ecDeployment["mutualized"]) {
          return {"result": 0, "out": "Not a mutualized EC deployment. Nothing to do"};
        }

        // Get paas envs linked to ec deployment
        paasEnvsLinked = [];
        for (i = 0; i < ecDeployment["paas_environments"].length; i++) {
          paasEnvsLinked.push(ecDeployment["paas_environments"][i].namespace);
        }

        // Get ES credentials from PAPI
        getECDeploymentCreds = new HttpGet(papiBaseUrl + "ec-deployment/" + ecDeploymentId + "/credentials");
        getECDeploymentCreds.setHeader("X-PAPI-KEY", __secret__papiToken);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getECDeploymentCreds);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get ec deployment credentials for " + ecDeploymentId + ": " + resp};
        }
        es_credentials = JSON.parse(EntityUtils.toString(resp.getEntity()));
        auth_basic_es_credentials = es_credentials["login"] + ":" + es_credentials["password"]
        creds_bytes = (new java.lang.String(auth_basic_es_credentials)).getBytes("UTF-8");
        encoded_auth_basic_creds = Base64.getEncoder().encodeToString(creds_bytes);

        // Get Kibana roles
        getKibanaRolesAll = new HttpGet(ecDeployment["kibana_endpoint"] + "/api/security/role");
        getKibanaRolesAll.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getKibanaRolesAll);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get kibana roles:" + resp};
        }
        allKibanaRoles = JSON.parse(EntityUtils.toString(resp.getEntity()));
        kibanaRoles = [];
        for (i = 0; i < allKibanaRoles.length; i++) {
          if (!allKibanaRoles[i].metadata._reserved) {
            kibanaRoles.push(allKibanaRoles[i].name);
          }
        }

        rolesToDelete = [];
        for (i=0; i < kibanaRoles.length; i++) {
          if (!paasEnvsLinked.includes(kibanaRoles[i])) {
            rolesToDelete.push(kibanaRoles[i]);
          }
        }

        // Delete Kibana roles
        if (rolesToDelete) {
          for (i=0; i < rolesToDelete.length; i++) {
            deleteKibanaRole = new HttpDelete(ecDeployment["kibana_endpoint"] + "/api/security/role/" + rolesToDelete[i]);
            deleteKibanaRole.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
            deleteKibanaRole.setHeader("kbn-xsrf", "reporting");
            httpClient = HttpClients.createDefault();
            resp = httpClient.execute(deleteKibanaRole);
            if (resp.getStatusLine().getStatusCode() != 204) {
              return {"result": 1, errOut: "Can't delete kibana role:" + resp};
            }
          }
        }

        // Get ES users
        getESUsersAll = new HttpGet(ecDeployment["es_endpoint"] + "/_security/user");
        getESUsersAll.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(getESUsersAll);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't get kibana roles:" + resp};
        }
        allESUsers = JSON.parse(EntityUtils.toString(resp.getEntity()));
        esUsers = Object.keys(allESUsers);

        usersToDelete = [];
        for (i=0; i < esUsers.length; i++) {
          if (!paasEnvsLinked.includes(esUsers[i])) {
            usersToDelete.push(esUsers[i]);
          }
        }

        // Delete ES users
        if (usersToDelete) {
          for (i=0; i < usersToDelete.length; i++) {
            deleteESUser = new HttpDelete(ecDeployment["es_endpoint"] + "/_security/user/" + usersToDelete[i]);
            deleteESUser.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
            httpClient = HttpClients.createDefault();
            resp = httpClient.execute(deleteESUser);
            if (resp.getStatusLine().getStatusCode() != 200) {
              return {"result": 1, errOut: "Can't delete es user:" + resp};
            }
          }
        }

        return {"result": 0, "out": "Mutualized ec deployment " + ecDeploymentId + " has no orphan kibana roles and es users" };

  createKibanaRole:
    # Parameters:
    #   - roleName: The name of the role
    #   - esPermissions: elasticsearch permissions (json format)
    #   - kibanaPermissions: kibana permissions (json format)
    - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
        getECAdminCredentials
    - if ("${globals.kibana_endpoint.print()}" == ""):
        getECDeploymentEndpoints

    - cmd[${nodes.cp.first.id}]: |-
        __secret__credentials="${globals.__secret__ecAdminCredentials}"
        kibana_endpoint="${globals.kibana_endpoint}"
        curl -fLSsu "$__secret__credentials" "$kibana_endpoint/api/security/role/${this.roleName}" -H 'Content-Type:application/json' -H "kbn-xsrf: reporting" -d '{"metadata": {},"elasticsearch": ${this.esPermissions}, "kibana": ${this.kibanaPermissions} }' -XPUT
        if [ $? -ne 0 ]; then
          echo "Failed to create kibana role." && exit 1
        fi
        curl -u "$__secret__credentials" "$kibana_endpoint/api/spaces/space" -H 'Content-Type:application/json' -d '{"name": "${this.roleName}", "id": "${this.roleName}"}' -XPOST

  deleteKibanaRole:
    # Parameters:
    #   - roleName: The name of the role
    - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
        getECAdminCredentials
    - if ("${globals.kibana_endpoint.print()}" == ""):
        getECDeploymentEndpoints
    - script: |-
        import org.apache.http.client.methods.HttpDelete;
        import org.apache.http.impl.client.HttpClients;
        import java.util.Base64;

        __secret__auth_basic_es_credentials = "${globals.__secret__ecAdminCredentials}";
        creds_bytes = (new java.lang.String(__secret__auth_basic_es_credentials)).getBytes("UTF-8");
        encoded_auth_basic_creds = Base64.getEncoder().encodeToString(creds_bytes);

        // Delete Kibana role
        deleteKibanaRole = new HttpDelete("${globals.kibana_endpoint}/api/security/role/${this.roleName}");
        deleteKibanaRole.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
        deleteKibanaRole.setHeader("kbn-xsrf", "reporting");
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(deleteKibanaRole);
        if (resp.getStatusLine().getStatusCode() != 204) {
          return {"result": 1, errOut: "Can't delete kibana role:" + resp};
        }
        return {"result": 0, "out": "${this.roleName} kibana role deleted" };

  createESAccount:
    # Parameters:
    #   - accountName: the account name
    #   - __secret__password
    #   - rolesList: comma-separated list of Kibana roles
    - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
        getECAdminCredentials
    - if ("${globals.es_endpoint.print()}" == ""):
        getECDeploymentEndpoints

    - cmd[${nodes.cp.first.id}]: |-
        __secret__credentials="${globals.__secret__ecAdminCredentials}"
        __secret__password="${this.__secret__password}"
        es_endpoint="${globals.es_endpoint}"
        formattedRolesList=$(echo ${this.rolesList} | sed -e 's/\s*,\s*/", "/g' -e 's;^\(.*\)$;"\1";g')
        curl -fLSsu "$__secret__credentials" "$es_endpoint/_security/user/${this.accountName}" -XPUT  -d "{\"password\": \"$__secret__password\", \"roles\": [$formattedRolesList], \"full_name\": \"${this.accountName}\"}"  -H 'Content-Type:application/json'
        if [ $? -ne 0 ]; then
          echo "Failed to create ES user." && exit 1
        fi

  deleteESAccount:
    # Parameters:
    #   - accountName: the account name
    - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
        getECAdminCredentials
    - if ("${globals.es_endpoint.print()}" == ""):
        getECDeploymentEndpoints
    - script: |-
        import org.apache.http.client.methods.HttpDelete;
        import org.apache.http.impl.client.HttpClients;
        import java.util.Base64;

        __secret__auth_basic_es_credentials = "${globals.__secret__ecAdminCredentials}";
        creds_bytes = (new java.lang.String(__secret__auth_basic_es_credentials)).getBytes("UTF-8");
        encoded_auth_basic_creds = Base64.getEncoder().encodeToString(creds_bytes);

        // Delete ES user
        deleteESUser = new HttpDelete("${globals.es_endpoint}/_security/user/${this.accountName}");
        deleteESUser.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(deleteESUser);
        if (resp.getStatusLine().getStatusCode() != 200) {
          return {"result": 1, errOut: "Can't delete es user:" + resp};
        }

        return {"result": 0, "out": "${this.accountName} ES account deleted" };

  resetESAccountPassword:
  # Parameters:
  #   - username: the ES username
  #   - __secret__password
  - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
      getECAdminCredentials
  - if ("${globals.es_endpoint.print()}" == ""):
      getECDeploymentEndpoints

  - cmd[${nodes.cp.first.id}]: |-
      __secret__credentials="${globals.__secret__ecAdminCredentials}"
      __secret__password="${this.__secret__password}"
      es_endpoint="${globals.es_endpoint}"
      curl -fLSsu "$__secret__credentials" "$es_endpoint/_security/user/${this.username}/_password" -XPOST  -d '{"password": "'${__secret__password}'"}' -H 'Content-Type:application/json'
      if [ $? -ne 0 ]; then
        echo "Failed to reset password for ${this.username} user." && exit 1
      fi

  createKibanaSpace:
    # Parameters:
    #   - spaceName: the Kibana space name
    - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
        getECAdminCredentials
    - if ("${globals.es_endpoint.print()}" == ""):
        getECDeploymentEndpoints

    - cmd[${nodes.cp.first.id}]: |-
        __secret__credentials="${globals.__secret__ecAdminCredentials}"
        kibana_endpoint="${globals.kibana_endpoint}"
        curl -fLSsu "$__secret__credentials" "$kibana_endpoint/api/spaces/space" -XPOST -H "kbn-xsrf: reporting" -d '{"id": "${this.spaceName}", "name": "${this.spaceName}"}'  -H 'Content-Type:application/json'
        if [ $? -ne 0 ]; then
          echo "Failed to create Kibana space." && exit 1
        fi

  deleteKibanaSpace:
    # Parameters:
    #   - spaceName: The name of the Kibana space
    - if ("HideThisLine" && "${globals.__secret__ecAdminCredentials.print()}" == ""):
        getECAdminCredentials
    - if ("${globals.kibana_endpoint.print()}" == ""):
        getECDeploymentEndpoints
    - script: |-
        import org.apache.http.client.methods.HttpDelete;
        import org.apache.http.impl.client.HttpClients;
        import java.util.Base64;

        __secret__auth_basic_es_credentials = "${globals.__secret__ecAdminCredentials}";
        creds_bytes = (new java.lang.String(__secret__auth_basic_es_credentials)).getBytes("UTF-8");
        encoded_auth_basic_creds = Base64.getEncoder().encodeToString(creds_bytes);

        // Delete Kibana space
        deleteKibanaSpace = new HttpDelete("${globals.kibana_endpoint}/api/spaces/space/${this.spaceName}");
        deleteKibanaSpace.setHeader("Authorization", "Basic " + encoded_auth_basic_creds);
        deleteKibanaSpace.setHeader("kbn-xsrf", "reporting");
        httpClient = HttpClients.createDefault();
        resp = httpClient.execute(deleteKibanaSpace);
        if (resp.getStatusLine().getStatusCode() != 204) {
          return {"result": 1, errOut: "Can't delete kibana space:" + resp};
        }
        return {"result": 0, "out": "${this.spaceName} kibana space deleted" };
