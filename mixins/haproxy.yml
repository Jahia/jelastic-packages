---
# Depends on:
#   - common.yml

globals:
  haproxy_admin_stats_pass: ${fn.password(20)}

actions:
  installHaproxy:
    - setSudoer: bl
    - retrieveHaproxyConf: bl
    - updateHaproxyConf
    - configureProcessingDirectAccessHaproxy
    - resetHaproxyBackends
    - environment.nodegroup.ApplyData [bl]:
        data:
          productName: haproxy
          productVersion: ${nodes.bl.first.version}

  retrieveHaproxyConf:
    - setGlobalRepoRootUrl
    - cmd[${this}]: |-
        HAPROXY_CONF_DIR=/etc/haproxy/haproxy.cfg.jahia
        HAPROXY_SYSCONFIG=/etc/sysconfig/haproxy
        HAPROXY_RELOAD=/usr/local/bin/haproxy-reload.sh
        curl -fLSso /etc/haproxy/502.http ${globals.repoRootUrl}/assets/haproxy/502.http || exit 1
        mkdir $HAPROXY_CONF_DIR $HAPROXY_CONF_DIR/customer.configuration.d
        curl -fLSso $HAPROXY_CONF_DIR/jahia-cloud.cfg ${globals.repoRootUrl}/assets/haproxy/haproxy-jahia-cloud.cfg || exit 1
        curl -fLSso $HAPROXY_SYSCONFIG ${globals.repoRootUrl}/assets/haproxy/haproxy-sysconfig || exit 1
        curl -fLSso $HAPROXY_RELOAD ${globals.repoRootUrl}/assets/haproxy/haproxy-reload.sh || exit 1
        chmod +x $HAPROXY_RELOAD
        echo $HAPROXY_SYSCONFIG >> /etc/jelastic/redeploy.conf
        # We empty the file instead of deleting it because of Jelastic trying to update it
        # when scaling
        echo "### WARNING : this config file is not used for haproxy configuration" > /etc/haproxy/haproxy.cfg
        chown -R haproxy:haproxy /etc/haproxy
        systemctl daemon-reload
        service haproxy restart
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred while configuring haproxy."

  updateHaproxyConf:
    - cmd[bl]: |-
        # Various configuration changes
        stats_pwd="${globals.haproxy_admin_stats_pass}"
        sed -i "s/admin-stat-password/$stats_pwd/g" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
      user: haproxy

  # Parameters:
  # - nodeId: the ID of the browsing node to remove
  # - reload: "true" or "false", if haproxy service should be reloaded or not
  removeBrowsingNodeFromHaproxy:
    - log: "Removing node ${this.nodeId} from HAProxy"
    - cmd [bl]: |-
        grep -q "${env.appid}-${this.nodeId}" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
        if [ $? ]; then sed -i "/${env.appid}-${this.nodeId}/d" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg; fi
    - if ('${this.reload.print()}' == 'true'):
        - cmd [bl]: sudo service haproxy reload

  # Parameters:
  # - nodeId: the ID of the browsing node to add
  # - nodeIp: the IP of the browsing node to add
  # - reload: "true" or "false", if haproxy service should be reloaded or not
  addBrowsingNodeToHaproxy:
    - log: "Adding node ${this.nodeId} to HAProxy"
    - cmd[bl]: |-
        grep -q "${env.appid}-${this.nodeId}" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
        if [ $? -ne 0 ]; then sed -i "/^backend bk_jahia$/a\ \ \ \ server ${env.appid}-${this.nodeId} ${this.nodeIp}:80 check cookie s${this.nodeId}" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg; fi
    - if ('${this.reload.print()}' == 'true'):
        - cmd [bl]: sudo service haproxy reload

  resetHaproxyBackends:
    # Reset browsing nodes
    - forEach (nodes.cp):
        - removeBrowsingNodeFromHaproxy:
            nodeId: ${@i.id}
            reload: false
    - forEach (nodes.cp):
        - addBrowsingNodeToHaproxy:
            nodeId: ${@i.id}
            nodeIp: ${@i.intIP}
            reload: false
    # Reset processing node
    - removeProcNodeFromHaproxy:
        reload: false
    - addProcNodeToHaproxy:
        reload: false
    # Reload haproxy conf
    - cmd [bl]: sudo service haproxy reload
      user: haproxy

  # Parameters:
  # - reload: "true" or "false", if haproxy service should be reloaded or not
  removeProcNodeFromHaproxy:
    - log: "Removing node ${nodes.proc.first.id} from HAProxy"
    - cmd[bl]: |-
        sed -i "/${env.appid}-${nodes.proc.first.id}/d" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
    - if ('${this.reload.print()}' == 'true'):
        - cmd [bl]: sudo service haproxy reload

  # Parameters:
  # - reload: "true" or "false", if haproxy service should be reloaded or not
  addProcNodeToHaproxy:
    - log: "Adding node ${nodes.proc.first.id} to HAProxy"
    - cmd[bl]: |-
        grep -q "${env.appid}-${nodes.proc.first.id}" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
        if [ $? -ne 0 ]; then
          sed -i "/^backend proc$/a\ \ \ \ server ${env.appid}-${nodes.proc.first.id} ${nodes.proc.first.intIP}:80 check cookie s${nodes.proc.first.id}" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
        fi
    - if ('${this.reload.print()}' == 'true'):
        - cmd [bl]: sudo service haproxy reload

  configureProcessingDirectAccessHaproxy:
    - cmd[bl]: |-
        sed -i 's/beg sPROCESSING_NODE_ID/beg s${nodes.proc.first.id}/g' /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg

  setupDatadogAgentHaproxy:
    - log: "## Finalize Datadog agent setup on ${this}"
    - setGlobalRepoRootUrl
    - cmd[${this}]: |-
        DD_API_KEY=$(sed -n 's/DATADOGAPIKEY=\(.*\)/\1/p' < /.jelenv) bash -c "$(curl -sL https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
        NODE_NAME=${HOSTNAME/-*}
        echo "hostname: $(echo $_ROLE| sed 's/_//g').${NODE_NAME#node}" >> /etc/datadog-agent/datadog.yaml
        sed -i 's/# logs_enabled: false/logs_enabled: true/' /etc/datadog-agent/datadog.yaml
        echo "tags:" >> /etc/datadog-agent/datadog.yaml
        echo " - product:jahia" >> /etc/datadog-agent/datadog.yaml
        echo " - version:${DX_VERSION}" >> /etc/datadog-agent/datadog.yaml
        echo " - envname:${env.envName}" >> /etc/datadog-agent/datadog.yaml
        echo " - provide:${_PROVIDE}" >> /etc/datadog-agent/datadog.yaml
        echo " - role:${_ROLE}" >> /etc/datadog-agent/datadog.yaml
        curl -fLSso /etc/datadog-agent/checks.d/haproxy_one_remaining_browsing.py ${globals.repoRootUrl}/assets/haproxy/haproxy_one_remaining_browsing.py
        chown dd-agent:dd-agent /etc/datadog-agent/checks.d/haproxy_one_remaining_browsing.py
        ln -s /etc/datadog-agent/conf.d/haproxy.d/conf.yaml /etc/datadog-agent/conf.d/haproxy_one_remaining_browsing.yaml
        curl -fLSso /etc/datadog-agent/conf.d/haproxy.d/conf.yaml ${globals.repoRootUrl}/assets/haproxy/dd_agent_haproxy_conf.yml || exit 1
        sed 's/service: jahia/service: ${env.shortdomain}/' -i /etc/datadog-agent/conf.d/haproxy.d/conf.yaml
        mkdir /etc/datadog-agent/conf.d/jelastic.d /var/log/jelastic-packages
        chown haproxy:root /var/log/jelastic-packages
        chown dd-agent: /etc/datadog-agent/conf.d/jelastic.d
        curl -fLSso /etc/datadog-agent/conf.d/jelastic.d/conf.yaml ${globals.repoRootUrl}/assets/common/dd_agent_jelastic_package_conf.yml || exit 1
        STATS_PWD=$(grep "stats auth admin" /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg | head -n1 | cut -d":" -f2)
        sed -i "s/my_awesome_password/${STATS_PWD}/g" /etc/datadog-agent/conf.d/haproxy.d/conf.yaml
        curl -fLSso /etc/datadog-agent/conf.d/process.d/conf.yaml ${globals.repoRootUrl}/assets/haproxy/dd_agent_process_conf.yml || exit 1
        curl -fLSso /usr/local/bin/set_dd_tags.sh ${globals.repoRootUrl}/assets/common/set_dd_tags.sh || exit 1
        curl -fLSso /etc/cron.d/set_dd_tags_cron ${globals.repoRootUrl}/assets/common/set_dd_tags_cron || exit 1
        chmod u+x /usr/local/bin/set_dd_tags.sh
        curl -fLSso /etc/rsyslog.d/haproxy.conf ${globals.repoRootUrl}/assets/haproxy/rsyslog_haproxy || exit 1
        curl -fLSso /etc/logrotate.d/haproxy ${globals.repoRootUrl}/assets/haproxy/logrotate_haproxy || exit 1
        chmod 644 /etc/logrotate.d/haproxy
        chown root:dd-agent /var/log/haproxy/* && chmod 640 /var/log/haproxy/*
        systemctl restart rsyslog crond datadog-agent
      user: root
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred when installing datadog agent on an haproxy node."

  checkHaproxyHealth:
    cmd [${this}]: |-
      if service haproxy status > /dev/null; then
        adm_user=$(awk '/ stats auth / {print $3}' /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg)
        curl -fsI /dev/null -u "$adm_user" localhost:80/haproxy_adm_panel && exit 0
      fi
      echo "[ERROR] Haproxy is unavailable, exiting" 1>&2 && exit 1
    user: root

  checkHaproxyDatadogCustomChecks:
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: haproxy
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: haproxy_one_remaining_browsing
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: process

  setAuthBasic:
    # Parameters:
    #   - auth_basic_script
    #   - haproxy_frontend_file
    #   - enable_auth_basic
    #   - new_login
    #   - new_password
    - setGlobalRepoRootUrl
    - cmd[bl]: |-
        curl -fLSso ${this.auth_basic_script} ${globals.repoRootUrl}/assets/haproxy/manage-auth-basic.py || exit 1
        chmod u+x ${this.auth_basic_script}
        ${this.auth_basic_script} "${this.haproxy_frontend_file}" "${this.enable_auth_basic}" "${this.new_login}" "${this.new_password.toBase64()}"
        service haproxy reload
      user: root
    - environment.nodegroup.ApplyData [proc, cp]:
        # Formatting it like that is the only way I found to set a boolean and not a string (true and not "true")
        data: "{ basicAuthEnabled: ${this.enable_auth_basic} }"

  disableHaproxyHealthcheck:
    cmd[bl]: |- # make haproxy check target /ping.jsp instead of /modules/healthcheck
      haproxy_conf_file=/etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
      if ! grep -qe "#option httpchk.*healthcheck" $haproxy_conf_file ; then
        sed -i -e 's/\(option httpchk\)/#\1/g' -e 's/\(http-check expect rstring\)/#\1/g' $haproxy_conf_file
        sed -i -e '/\(#option httpchk\)/a option httpchk GET "/ping.jsp" "HTTP/1.0\\r\\nUser-Agent: HAProxy"' -e '/\(http-check expect rstring\)/a http-check expect rstring PONG' $haproxy_conf_file
        service haproxy reload
      fi
    user: root

  enableHaproxyHealthcheck:
    cmd[bl]: |-
      haproxy_conf_file=/etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
      sed -i -e 's/#\(option httpchk.*\)/\1/g' -e 's/#\(http-check expect rstring\)/\1/g' $haproxy_conf_file
      sed -i -e '/.*ping.jsp.*/d' -e '/.*rstring PONG.*/d' $haproxy_conf_file
      service haproxy reload
    user: root

