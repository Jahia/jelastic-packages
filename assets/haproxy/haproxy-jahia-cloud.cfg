#### MAKE CHANGES HERE ONLY IF YOU REALLY KNOW WHAT YOU ARE DOING #####
#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    log 127.0.0.1   local0
    user haproxy
    group haproxy
    external-check

    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11 no-tls-tickets

    ssl-dh-param-file /etc/haproxy/dhparam.pem

    tune.ssl.default-dh-param 2048
    maxconn     10000
    daemon

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------

defaults
    balance                 roundrobin
    mode                    http
    log                     global
    maxconn                 10000
    option                  httplog
    option                  dontlognull
    option http-server-close
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          5m
    timeout server          "${haproxy_cfg_timeout_server}"
    timeout http-keep-alive 10s
    timeout check           10s

userlist trusted_users
    user env-admin password XXXXXXX

frontend ft_http
    bind :::80 v4v6
##JCUSTOMER##    bind :::9443 v4v6 ssl crt /etc/ssl/jahia/##PLACEHOLDER_CERT_NAME##

    stats enable
    stats auth admin:admin-stat-password
    stats refresh 30s
    stats show-node
    stats uri  /haproxy_adm_panel
    stats admin if TRUE

    capture response header content-type len 50
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r - %[capture.res.hdr(0)]"

    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header HTTPS on if { ssl_fc }
    http-request set-header Ssl-Offloaded 1 if { ssl_fc }
    http-request set-header X-Forwarded-For %[req.fhdr(X-Forwarded-For),regsub(' ','',g)]

    http-request capture req.fhdr(X-Forwarded-For) len 50
    http-request capture req.hdr(Host) len 50

    # Blocking blackisted IPs
    acl jahia_cloud_spamlist hdr_ip(X-Forwarded-For) -f /etc/haproxy/blacklisted_ips.txt
    http-request tarpit if jahia_cloud_spamlist

##JCUSTOMER##    # Blocking /cxs for public URL
##JCUSTOMER##    acl cxs path -i -m beg /cxs
##JCUSTOMER##    http-request deny if cxs { dst_port 80 }

##JAHIA##    #Blocking bad malicious forged X-Forwarded-For
##JAHIA##    acl good_x-forwarded-for hdr_reg(X-Forwarded-For,1) ^(?<ip>(?<ipv4>(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])(?:\.(?!$)|$)){4}|(?<ipv6>(?:(?:[0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,7}:|(?:[0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|(?:[0-9a-fA-F]{1,4}:){1,5}(?::[0-9a-fA-F]{1,4}){1,2}|(?:[0-9a-fA-F]{1,4}:){1,4}(?::[0-9a-fA-F]{1,4}){1,3}|(?:[0-9a-fA-F]{1,4}:){1,3}(?::[0-9a-fA-F]{1,4}){1,4}|(?:[0-9a-fA-F]{1,4}:){1,2}(?::[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:(?:(?::[0-9a-fA-F]{1,4}){1,6})|:(?:(?::[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(?::[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(?:ffff(?::0{1,4}){0,1}:){0,1}(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])|(?:[0-9a-fA-F]{1,4}:){1,4}:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9]))))$
##JAHIA##    use_backend bk_error_429 if !good_x-forwarded-for
##JAHIA##
##JAHIA##    http-response set-header X-Content-Type-Options "nosniff"
##JAHIA##    http-response set-header X-XSS-Protection "1; mode=block;"
##JAHIA##
##JAHIA##    #acl auth_ok http_auth(trusted_users) #HTTP_AUTH_BASIC
##JAHIA##    #acl tools  path_beg -i /tools #HTTP_AUTH_BASIC
##JAHIA##    #acl haproxy_adm_panel_path_beg  path_beg -i /haproxy_adm_panel #HTTP_AUTH_BASIC
##JAHIA##    #http-request auth realm env-access-restricted if !auth_ok !tools !haproxy_adm_panel_path_beg #HTTP_AUTH_BASIC
##JAHIA##
##JAHIA##    acl is_robots_txt path_end /robots.txt
##JAHIA##    acl is_host_technical_domain hdr_reg(Host) ^.*\.(j|cloud)\.jahia.com$
##JAHIA##    acl is_x-forwarded-host_set hdr(X-Forwarded-Host) -m found
##JAHIA##    acl is_x-forwarded-host_technical_domain hdr_reg(X-Forwarded-Host) ^.*\.(j|cloud)\.jahia.com$ if is_x-forwarded-host_set
##JAHIA##    http-request return status 200 content-type "text/plain" file "/etc/haproxy/robots_noindex.txt" hdr "cache-control" "no-cache" if is_robots_txt  is_host_technical_domain !is_x-forwarded-host_set || is_robots_txt is_host_technical_domain is_x-forwarded-host_technical_domain
##JAHIA##
    errorfiles error-pages

##JAHIA##    acl healthcheck path /healthcheck /modules/healthcheck
##JAHIA##    acl haproxy_adm_panel path /haproxy_adm_panel
##JAHIA##    http-request allow if healthcheck or haproxy_adm_panel
##JAHIA##
##JAHIA##    # Here a global tracking of high request and error rates
##JAHIA##    # in order to not count request access to statics files, we will use an acl
##JAHIA##    acl static_file path_end .css .js .jpg .jpeg .gif .ico .png .bmp .woff .pdf
##JAHIA##    # for each client access (first field of x-forwarded-for) not related to a static file, we update the clients_rates stick table
##JAHIA##    http-request track-sc2 req.hdr(x-forwarded-for,1) table clients_rates if !static_file
##JAHIA##    # then we test if the client's rates are above a threshold
##JAHIA##    #acl fast_client sc_http_req_rate(2) gt 666
##JAHIA##    #acl many_errors sc_http_err_rate(2) gt 66
##JAHIA##
##JAHIA##    # Here the part related to a "by url" rate limit
##JAHIA##    # test the request path to see if it's in a map file
##JAHIA##    acl is_rated_paths path_reg -M -f /etc/haproxy/haproxy.cfg.jahia/paths_rates.map if !static_file
##JAHIA##    # if it is, put the client ip in the rated_paths sticky table
##JAHIA##    http-request track-sc1 req.hdr(x-forwarded-for,1) table rated_paths if is_rated_paths
##JAHIA##    # check map file to get rate limit for path
##JAHIA##    http-request set-var(req.rate_limit) path,map_reg(/etc/haproxy/haproxy.cfg.jahia/paths_rates.map) if is_rated_paths
##JAHIA##    # client's request rate is tracked
##JAHIA##    http-request set-var(req.request_rate) req.hdr(x-forwarded-for,1),table_http_req_rate(rated_paths)
##JAHIA##    # subtract the current request rate from the limit
##JAHIA##    # if less than zero, set rate_abuse to true
##JAHIA##    acl rate_abuse var(req.rate_limit),sub(req.request_rate) lt 0
##JAHIA##
##JAHIA##    # then use a dedicated 429 backend if needed
##JAHIA##    #use_backend bk_error_429 if fast_client or many_errors or rate_abuse
##JAHIA##    use_backend bk_error_429 if rate_abuse
##JAHIA##
##JAHIA####CUSTOMER_RULES_START_HERE##
##JAHIA####CUSTOMER_RULES_END_HERE##
##JAHIA##
##JAHIA##    use_backend proc if { cook(SERVERID),lower -m beg sPROCESSING_NODE_ID }
##JAHIA##    default_backend bk_jahia
##JCUSTOMER##    use_backend bk_jcustomer_https if { dst_port 9443 }
##JCUSTOMER##    default_backend bk_jcustomer

##JAHIA##backend clients_rates
##JAHIA##    stick-table type string len 50 size 100k expire 1h store http_req_rate(1m),http_err_rate(1m)
##JAHIA##
##JAHIA##backend rated_paths
##JAHIA##    stick-table type string len 50 size 10k expire 5m store http_req_rate(1m),http_err_rate(1m)
##JAHIA##
##JAHIA##backend bk_error_429
##JAHIA##    timeout tarpit 5s
##JAHIA##    http-request tarpit deny_status 429
##JAHIA##
##JCUSTOMER##backend bk_jcustomer
##JCUSTOMER##    cookie SERVERID insert nocache httponly secure
##JCUSTOMER##    option httpchk
##JCUSTOMER##    http-check send meth GET uri "/cxs/privacy/info" hdr authorization "Basic ${haproxy_cfg_jcustomer_root_credentials}" hdr User-Agent "HAProxy"
##JCUSTOMER##    compression algo gzip
##JCUSTOMER##    compression type text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss image/svg text/html
##JCUSTOMER##
##JCUSTOMER##backend bk_jcustomer_https
##JCUSTOMER##    default-server ssl verify none
##JCUSTOMER##    cookie SERVERID insert nocache httponly secure
##JCUSTOMER##    option httpchk
##JCUSTOMER##    http-check send meth GET uri "/cxs/privacy/info" hdr authorization "Basic ${haproxy_cfg_jcustomer_root_credentials}" hdr User-Agent "HAProxy"
##JCUSTOMER##    compression algo gzip
##JCUSTOMER##    compression type text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss image/svg text/html
##JAHIA##backend bk_jahia
##JAHIA##    cookie SERVERID insert nocache httponly secure
##JAHIA##    option httpchk
##JAHIA##    http-check send meth GET uri "/modules/healthcheck?severity=critical" hdr authorization "APIToken ${jahia_cfg_healthcheck_token}" hdr User-Agent "HAProxy"
##JAHIA##    http-check expect rstring ],\"status\":{\"health\":\"(GREEN|YELLOW)\".+$
##JAHIA##    compression algo gzip
##JAHIA##    compression type text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss image/svg text/html
##JAHIA##
##JAHIA##backend proc
##JAHIA##    cookie SERVERID insert nocache httponly secure
##JAHIA##    option httpchk
##JAHIA##    http-check send meth GET uri "/modules/healthcheck?severity=critical" hdr authorization "APIToken ${jahia_cfg_healthcheck_token}" hdr User-Agent "HAProxy"
##JAHIA##    http-check expect rstring ],\"status\":{\"health\":\"(GREEN|YELLOW)\".+$
##JAHIA##    compression algo gzip
##JAHIA##    compression type text/plain text/css text/js text/xml text/javascript application/javascript application/json application/xml application/rss image/svg text/html

http-errors error-pages
##HTTP_ERRORS_START_HERE##
##HTTP_ERRORS_END_HERE##
