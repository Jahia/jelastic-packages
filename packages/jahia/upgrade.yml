---
type: update
version: 1.5.2
name: Jahia - Upgrade
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-upgrade
description:
  short: Jahia - Upgrade

mixins:
  - ../../mixins/common.yml
  - ../../mixins/jahia.yml
  - ../../mixins/haproxy.yml

onInstall:
  ## Globals definition
  - cmd [proc]: |-
      ## [Upgrade] - 1/2
      exit 0
  - if ('${settings.rollingUpgrade.print()}' == ''):
      setGlobals:
        rollingUpgrade: false
  - else:
      setGlobals:
        rollingUpgrade: ${settings.rollingUpgrade}
  # By default we assume it is a (rolling) redeploy only
  - setGlobals:
      targetDockerTag: ${nodes.proc.first.version}
      upgradeJahia: false
      useExistingVolumes: true
  # If a Jahia version/docker tag was passed as parameter
  - if ('${settings.targetVersion.print()}' != ''):
      # If a Docker tag suffix was passed we need to append it to the Jahia version
      - if ('${settings.dockerTagSuffix.print()}' == ''):
          - setGlobals:
              targetDockerTag: ${settings.targetVersion}
      - else:
          - setGlobals:
              targetDockerTag: ${settings.targetVersion}_${settings.dockerTagSuffix}
  # If it is a new version of Jahia
  - if ('${globals.targetDockerTag}' != '${nodes.proc.first.version}'):
      - setGlobals:
          upgradeJahia: true
          useExistingVolumes: false
      - setVersionPropertiesValue:
          currentJahiaVersion: ${nodes.proc.first.version}
          targetJahiaVersion: ${globals.targetDockerTag}
  # As a reminder, when updating the value of a global variable inside an "if" block,
  # the new value won't be taken in account if testing it inside a nested "if" block.

  ## Upgrades
  - if (!${globals.rollingUpgrade}):
      # In case of Jahia upgrade, all jahia nodes must be stopped first
      - cmd [cp, proc]:
          - service tomcat stop
        user: root
      - procUpgrade:
          upgradeJahia: ${globals.upgradeJahia}
          targetDockerTag: ${globals.targetDockerTag}
          useExistingVolumes: ${globals.useExistingVolumes}
      - bulkCpUpgrade:
          targetDockerTag: ${globals.targetDockerTag}
          useExistingVolumes: ${globals.useExistingVolumes}
  - else:
      - procUpgrade:
          upgradeJahia: ${globals.upgradeJahia}
          targetDockerTag: ${globals.targetDockerTag}
          useExistingVolumes: ${globals.useExistingVolumes}
      - rollingCpUpgrade:
          targetDockerTag: ${globals.targetDockerTag}
          useExistingVolumes: ${globals.useExistingVolumes}

  ## Post-actions
  # Get the Jahia version, which could be different of the name of the docker image
  # e.g.: docker image tag "7.3.3.0_PAAS-444"
  - api [${nodes.proc.first.id}]: environment.control.GetNodeInfo
  - setGlobals:
      targetJahiaVersion: ${response.node.version}
  - env.control.ApplyNodeGroupData[cp, proc]:
      data:
        productVersion: ${globals.targetJahiaVersion}
  - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"DX_VERSION": "${globals.targetJahiaVersion}"}

  - updateProductVersionInPapi:
      version: "${globals.targetJahiaVersion}"
      product: "dx"


settings:
  fields:
    - name: targetVersion
      type: string
      caption: DX Target Version
      vtype: text
      required: false
      tooltip: Optional. If you don't specify a version, the current Jahia version of the target environment will be selected.
    - name: dockerTagSuffix
      type: string
      caption: Docker tag suffix
      required: false
      tooltip: Optional. If you set this parameter to "suffix", the tag used will be "{targetVersion}_suffix".
    - name: rollingUpgrade
      type: toggle
      caption: Rolling upgrade ?
      value: false
      required: false
      tooltip: Redeploying cp nodes one at a time. Used for redeploying with the same Jahia version to run new image.
