---
type: update
version: 1.5.2
name: Jahia - Set HAProxy conf
id: jahia-set-rewrite-rules
description:
  short: Jahia - Set HAProxy conf

mixins:
  - "../../mixins/common.yml"
  - "../../mixins/haproxy.yml"

globals:
  rules_dir: "/etc/haproxy/haproxy.cfg.jahia/customer.configuration.d"
  backup_rules_dir: "/var/lib/haproxy/customer.configuration.d"
  temp_rules_dir: "/var/lib/haproxy/customer.configuration.tmp"

onInstall:
  - setRewritesRules
  - reloadHAProxy
  - CDNInvalidation
  - removeBackup

actions:
  setRewritesRules:
    ###### WARNING ######
    # We are not using Jelastic actions to fetch the rewrite rules on Vault because it doesn't work when
    # the secret data is too big (Jelastic cannot create the global variable and therefore it fails)
    #####################
    - getVaultData
    - cmd [bl]: |-
        # Backup current rule files dir
        mkdir -p ${globals.backup_rules_dir} ${globals.temp_rules_dir}
        if find ${globals.rules_dir}/* -maxdepth 0 -empty > /dev/null 2>&1; then
          mv -f ${globals.rules_dir}/* ${globals.backup_rules_dir}
        fi

        # Connect to Vault and check if rules exist
        __secret__vaultRoleId="${globals.__secret__vaultRoleId}"
        __secret__vaultSecretId="${globals.__secret__vaultSecretId}"
        VAULT_TOKEN=$(curl -s -XPOST ${globals.vaultClusterUrl}/v1/auth/approle/login --data '{"role_id": "'"$__secret__vaultRoleId"'", "secret_id": "'"$__secret__vaultSecretId"'"}' | jq -r .auth.client_token)
        VAULT_SECRET_PATH="paas/customers/${globals.organizationName}/paas_${env.shortdomain}/haproxy"
        rules_sets=$(curl -s -H "X-Vault-Token: $VAULT_TOKEN" ${globals.vaultClusterUrl}/v1/kv/data/$VAULT_SECRET_PATH | jq -e .data.data)
        if [ $? -ne 0 ]; then
          echo "Failed to fetch secret" >&2
          exit 0
        fi

        # Get all rules as individual files in temp dir, check md5sum with values from front
        # and handle escape character interpretation while populating rules dir
        for rules_set in $(echo $rules_sets | jq -r 'keys[]'); do
          echo "$rules_sets" | jq -r ".\"$rules_set\"" > ${globals.temp_rules_dir}/$rules_set.cfg
        done
        for rules_file in $(echo '${settings.md5sum}' | jq -r 'keys[]'); do
          md5=$(echo '${settings.md5sum}' | jq -r ".\"$rules_file\"")
          if echo "$md5 ${globals.temp_rules_dir}/$rules_file.cfg" | md5sum --check --status; then
            sed 's/\\n/\n/g' ${globals.temp_rules_dir}/$rules_file.cfg > ${globals.rules_dir}/$rules_file.cfg
          else
            echo "MD5 sum mismatch. Aborting" >&2
          fi
        done
    - if ("${response.errOut}" != ""):
        - cmd [bl]: |-
            rm -f ${globals.rules_dir}/*
            if find ${globals.backup_rules_dir}/* -maxdepth 0 -empty > /dev/null 2>&1; then
              mv -f ${globals.backup_rules_dir}/* ${globals.rules_dir}
            fi
            rm -rf ${globals.backup_rules_dir} ${globals.temp_rules_dir}
        - log: "Get Rewrite Rules Failed"
        - return:
            type: error
            message: "An internal error occurred while updating haproxy configuration"

  reloadHAProxy:
    - cmd [bl]: |-
        /usr/local/sbin/haproxy_prestart.sh
        /usr/local/bin/haproxy-reload.sh || true
    - if ("${response.responses.errOut}" != ""):
        - set:
            error-out: "${response.responses.errOut}"
        - log: "reload failed"
        - cmd [bl]: |-
            rm -f ${globals.rules_dir}/*
            if find ${globals.backup_rules_dir}/* -maxdepth 0 -empty > /dev/null 2>&1; then
              mv -f ${globals.backup_rules_dir}/* ${globals.rules_dir}
            fi
            rm -rf ${globals.backup_rules_dir} ${globals.temp_rules_dir}
            # in order to regenerate haproxy.cfg (no need to reload haproxy daemon)
            /usr/local/sbin/haproxy_prestart.sh
        - return:
            type: error
            message: "${this.error-out}"

  CDNInvalidation:
    - cmd[${nodes.bl.first.id}]: |-
        if [ ! -d /etc/haproxy/cdn ]; then
          echo "no CDN's cache to invalidate here"
          exit 0
        fi
        /etc/haproxy/cdn/trigger_invalidation.sh

  removeBackup:
    - cmd [bl]: |-
        rm -rf ${globals.backup_rules_dir} ${globals.temp_rules_dir}
    - return:
        type: success

settings:
  fields:
    - name: md5sum
      type: string
      caption: The md5 sum of the rewrite rules
      required: true
