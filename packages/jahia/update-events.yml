---
type: update
version: 1.5.2
name: Jahia - Update events
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-update-events
description:
  short: Jahia - Update events

mixins:
  - ../../mixins/common.yml
  - ../../mixins/jahia.yml
  - ../../mixins/jcustomer.yml
  - ../../mixins/haproxy.yml
  - ../../mixins/mariadb.yml

onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeBrowsingNodeFromHaproxy:
          nodeId: ${@i.id}
          reload: true

onAfterScaleIn[cp]:
  - refreshProxysqlInstancesList
  - cleanJRLocalRevisionsTable
  - getEnvLinkedJcustomer:
      envName: ${env.envName}
  - if (${globals.unomi_env_linked}):
      - refreshUnomiAllowedIPs:
          unomiEnvName: ${globals.unomi_env_name}

onAfterServiceScaleOut[cp]:
  - forEach(event.response.nodes):
      - onAfterBrowsingScaleOut:
          newNode: ${@i.id}
  - resetHaproxyBackends
  - refreshProxysqlInstancesList
  - cleanJRLocalRevisionsTable
  - getEnvLinkedJcustomer:
      envName: ${env.envName}
  - if (${globals.unomi_env_linked}):
      - refreshUnomiAllowedIPs:
          unomiEnvName: ${globals.unomi_env_name}

onBeforeRestartNode[cp]:
  removeBrowsingNodeFromHaproxy:
    nodeId: ${event.params.nodeId}
    reload: true

onAfterRestartNode[cp]:
  forEach(nodes.cp):
    if ("${event.params.nodeId}" == "${@i.id}"):
      - startupJahiaHealthCheck: ${event.params.nodeId}
      - addBrowsingNodeToHaproxy:
          nodeId: ${@i.id}
          nodeIp: ${@i.intIP}
          reload: true

onBeforeRestartNode[proc]:
  removeProcNodeFromHaproxy:
    reload: true

onAfterRestartNode[proc]:
  - startupJahiaHealthCheck: ${event.params.nodeId}
  - addProcNodeToHaproxy:
      reload: true

onBeforeRedeployContainer[cp]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - forEach(nodes.cp):
          removeBrowsingNodeFromHaproxy:
            nodeId: ${@i.id}
            reload: true
      - cmd [cp]: |-
          service tomcat stop
        user: root
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - removeBrowsingNodeFromHaproxy:
          nodeId: ${event.params.nodeId}
          reload: true
      - cmd [${event.params.nodeId}]: |-
          service tomcat stop
        user: root

onAfterRedeployContainer[cp]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - onAfterRedeployJahiaContainer: ${event.params.nodeGroup}
      - startupJahiaHealthCheck: ${event.params.nodeGroup}
      - resetHaproxyBackends
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - onAfterRedeployJahiaContainer: ${event.params.nodeId}
      - forEach(nodes.cp):
          if ("${event.params.nodeId}" == "${@i.id}"):
            - startupJahiaHealthCheck: ${event.params.nodeId}
            - addBrowsingNodeToHaproxy:
                nodeId: ${@i.id}
                nodeIp: ${@i.intIP}
                reload: true
  - cleanJRLocalRevisionsTable

onBeforeRedeployContainer[proc]:
  - removeProcNodeFromHaproxy:
      reload: true
  - cmd [proc]: |-
      service tomcat stop
    user: root

onAfterRedeployContainer[proc]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - onAfterRedeployJahiaContainer: ${event.params.nodeGroup}
      - cmd [proc]: |-
          echo $JAHIA_UPGRADE
        user: root
      - if ('${response.out}' == ''):
          - startupJahiaHealthCheck: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - onAfterRedeployJahiaContainer: ${event.params.nodeId}
      - startupJahiaHealthCheck: ${event.params.nodeId}
  - addProcNodeToHaproxy:
      reload: true
  - cleanJRLocalRevisionsTable

onAfterRedeployContainer[bl]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - setSudoer: ${event.params.nodeGroup}
      - setupDatadogAgentHaproxy: ${event.params.nodeGroup}
      - environment.nodegroup.ApplyData [bl]:
          data:
            productName: haproxy
            productVersion: ${nodes.bl.first.version}
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - setSudoer: ${event.params.nodeId}
      - setupDatadogAgentHaproxy: ${event.params.nodeId}
      - environment.nodegroup.ApplyData [bl]:
          data:
            productName: haproxy
            productVersion: ${nodes.bl.first.version}

onAfterScaleIn[bl]:
  - env.control.AddContainerEnvVars[cp, proc]:
    vars: {"HAPROXY_NODES_COUNT": "${nodes.bl.length}"}
  - cmd[cp,proc]: service datadog-agent restart
    user: root

onAfterScaleOut[bl]:
  - env.control.AddContainerEnvVars[cp, proc]:
    vars: {"HAPROXY_NODES_COUNT": "${nodes.bl.length}"}
  - cmd[cp,proc]: service datadog-agent restart
    user: root


onBeforeRedeployContainer[sqldb]:
  # disable mysql autostart because JEM will do it
  - if ('${event.params.nodeGroup:}'):
      - mysqlService:
          target: ${event.params.nodeGroup}
          action: disable
  - elif ('${event.params.nodeId:}'):
      - mysqlService:
          target: ${event.params.nodeId}
          action: disable

onAfterRedeployContainer[sqldb]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - setSudoer: ${event.params.nodeGroup}
      - setupDatadogAgentSql: ${event.params.nodeGroup}
      - mysqlService:
          target: ${event.params.nodeGroup}
          action: enable
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - setSudoer: ${event.params.nodeId}
      - setupDatadogAgentSql: ${event.params.nodeId}
      - mysqlService:
          target: ${event.params.nodeId}
          action: enable

onBeforeStop:
  - muteDatadogSynthetics:
      duration: 2880 # 48h
  - muteDatadogHost:
      target: "*"
      duration: 2880 # 48h
  - muteEnvWideMonitors
  - stopJahia: cp, proc
  - stopGalera
  - updateEnvStatusInPapi:
      status: stopped
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Stopping environment $envName"
      text: "$envName is going to stop"

onAfterStart:
  - startupJahiaHealthCheck: cp, proc

  - getEnvLinkedJcustomer:
      envName: ${env.envName}
  - if ( ! ${globals.unomi_env_linked}):
      removeAndCleanJexperience

  - resetHaproxyBackends
  - updateEnvStatusInPapi:
      status: running
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "$envName environment started"
      text: "$envName is started"
  - unmuteDatadogHost:
      target: "*"
  - unmuteEnvWideMonitors
  - unmuteDatadogSynthetics

onBeforeMigrate:
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Migration triggered for $envName environment"
      text: "$envName going to be migrate"
  - muteDatadogHost:
      target: "*"
      duration: 60

onAfterMigrate:
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "$envName has been migrated"
  - refreshProxysqlInstancesList
  - cleanJRLocalRevisionsTable
  - unmuteDatadogHost:
      target: "*"

onBeforeRestartNode:
  - logEvent:
      target: ${event.params.nodeId}
      title: "Restarting node ${event.params.nodeId}"
      text: "${event.params.nodeId} node is going to be restarted"
  - muteDatadogHost:
      target: ${event.params.nodeId}
      duration: 20

onAfterRestartNode:
  - logEvent:
      target: ${event.params.nodeId}
      title: "Node ${event.params.nodeId} restarted"
      text: "Node ${event.params.nodeId} has restarted"
  - unmuteDatadogHost:
      target: ${event.params.nodeId}

onBeforeRedeployContainer:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "Redeploying ${event.params.nodeGroup} nodes to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes are going to be redeploy to ${event.params.tag} version"
      - muteDatadogHost:
          target: ${event.params.nodeGroup}
          duration: 20

  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - logEvent:
          target: ${event.params.nodeId}
          title: "Redeploying node ${event.params.nodeId} to ${event.params.tag} version"
          text: "Node ${event.params.nodeId} is going to be redeploy to ${event.params.tag} version"
      - muteDatadogHost:
          target: ${event.params.nodeId}
          duration: 20

onAfterRedeployContainer:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - getLogEventScript: ${event.params.nodeGroup}
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
      - installRequiredPackages:
          target: ${event.params.nodeGroup}
          packages: "python36 python36-pip jq"
      - unmuteDatadogHost:
          target: ${event.params.nodeGroup}
      - installPapiScript: ${event.params.nodeGroup}
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - getLogEventScript: ${event.params.nodeId}
      - logEvent:
          target: ${event.params.nodeId}
          title: "Node ${event.params.nodeId} redeployed to ${event.params.tag} version"
          text: "Node ${event.params.nodeId} has been redeploy to ${event.params.tag} version"
      - installRequiredPackages:
          target: ${event.params.nodeId}
          packages: "python36 python36-pip jq"
      - unmuteDatadogHost:
          target: ${event.params.nodeId}
      - installPapiScript: ${event.params.nodeId}

onBeforeScaleIn:
  forEach(event.response.nodes):
    - logEvent:
        target: ${@i.id}
        title: "Scaling in ${event.params.nodeGroup} node group"
        text: "Node ${@i.id} is going to be removed"
    - muteDatadogHost:
        target: ${@i.id}
        duration: 2880 # 48h

onAfterServiceScaleOut:
  forEach(event.response.nodes):
    - logEvent:
        target: ${@i.id}
        title: "Scaled out ${event.params.nodeGroup} node group"
        text: "Node ${@i.id} has been added"
    - installRequiredPackages:
        target: ${@i.id}
        packages: "python36 python36-pip jq"

onBeforeDelete:
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Deleting environment $envName"
      text: "$envName is going to be deleted"
  - getEnvLinkedJcustomer:
      envName: ${env.envName}
  - if ("${globals.unomi_env_linked}" == "true"):
      - deleteEnvLinkJahia:
          jCustomerEnv: ${globals.unomi_env_name}
      - if ("${response.link_removed}" == "true"):
          - getEnvStatus:
              envName: ${globals.unomi_env_name}
          - if (${response.out} == 1):
              refreshUnomiAllowedIPs:
                unomiEnvName: ${globals.unomi_env_name}
  - if ("${env.status}" == 1):
      - muteDatadogHost:
          target: "*"
          duration: 2880 # 48h
      - muteEnvWideMonitors
  - deleteEnvironment
  - removeAllSecrets
