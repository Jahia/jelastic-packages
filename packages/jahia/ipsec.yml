---
type: update
version: 1.5.2
name: Jahia - Set IPsec customer's conf
id: jahia-set-ipsec
description:
  short: Jahia - Set IPsec customer's conf

mixins:
  - "../../mixins/common.yml"
  - "../../mixins/jahia.yml"

globals:
  ipsec_conf_dir: "/etc/strongswan/ipsec.d"
  ipsec_secrets_file: "/etc/strongswan/ipsec.secrets"


onInstall:
  - vaultGetIPsecConfB64
  - vaultGetIPsecPSKB64
  - if (settings.ipsec_should_be != "disable"):
    - setIPsecConf: proc
    - foreach(nodes.cp):
        - setIPsecConf: ${@i.id}
  - if (settings.ipsec_should_be != ""):
      - daemonControl
      - setNodeGroupData

actions:
  setNodeGroupData:
    - environment.nodegroup.ApplyData [cp]:
        data:
          ipsec: "${settings.ipsec_should_be}"

  daemonControl:
    - cmd[cp, proc]: |-
        systemctl ${settings.ipsec_should_be} --now strongswan
        if [ "${settings.ipsec_should_be}" == "disable" ]; then
          rm -v ${globals.ipsec_conf_dir}/*.conf
          sed -i '2,$d' ${globals.ipsec_secrets_file}
        fi
      user: root

  setIPsecConf:
    - cmd [${this}]: |-
        confname="conn-1"
        confdir=${globals.ipsec_conf_dir}
        secretsfile=${globals.ipsec_secrets_file}
        to_start=false
        reload_secret=false
        reload_all=false
        if systemctl is-active strongswan; then
          ipsec_is_active=true
        else
          ipsec_is_active=false
        fi

        conf_tmpfile=$(mktemp)
        secret_tmpfile=$(mktemp)
        echo ${globals.IPsecConfB64} | base64 -d > $conf_tmpfile
        echo ${globals.IPsecPSKB64} | base64 -d > $secret_tmpfile

        # check if right subnets overlap with env's subnet
        pip install ipconflict -qq

        infra_subnet=192.168.0.0/16
        subnets_file=$(mktemp)

        grep 'rightsubnet' $conf_tmpfile | grep -v '#' | grep -Eo "([0-9]{1,3}\.){3}[0-9]{1,3}(\/[0-9]{1,})?" | uniq >> $subnets_file
        env_subnet=$(ip a s | awk -v IP=$(hostname -i) '$2~IP {print $2}')

        while read subnet; do
          ipconflict -q $subnet $env_subnet && ipconflict -q $subnet $infra_subnet
          if [ $? -eq 0 ]; then
            echo "[ERROR] Rightsubnet overlaps with Env subnet" >&2
            exit 1
          fi
        done < $subnets_file

        # work on connection conf
        new_conf_md5=$(md5sum $conf_tmpfile | cut -d" " -f1)
        if [ -f $confdir/$confname.conf ]; then
          cp -p $confdir/$confname.conf{,_bak}
          conf_md5=$(md5sum $confdir/$confname.conf | cut -d" " -f1)
          if [[ "$conf_md5" == "$new_conf_md5" ]]; then
           echo "This conf is already set"
          else
            mv $conf_tmpfile $confdir/$confname.conf
            reload_all=true
          fi
        else
          mv $conf_tmpfile $confdir/$confname.conf
          reload_all=true
        fi

        # work on secret conf
        cp -p ${secretsfile}{,_bak}
        new_secret_md5=$(md5sum $secret_tmpfile | cut -d" " -f1)
        if (grep -q "^# for $confname:" $secretsfile); then
          echo "$confname secret exist in $secretsfile"
          secret_md5=$(sed -n "/^# for $confname:/{n;p}" $secretsfile | md5sum | cut -d" " -f1)
          if [[ "$secret_md5" == "$new_secret_md5" ]]; then
            echo "This secret is already set"
            rm $secret_tmpfile
          else
            l=$(awk "/^# for $confname:\$/ {print NR}" $secretsfile)
            sed "${l}{n;d}" -i $secretsfile && sed "${l}r $secret_tmpfile" -i $secretsfile
            if [[ $? -ne 0 ]]; then
              echo "[ERROR] secrets file is not updated" >&2
            fi
            rm $secret_tmpfile
            reload_secret=true
          fi
        else
          echo "$confname is new, now adding its secret"
          echo "# for $confname:" >> $secretsfile
          cat $secret_tmpfile >> $secretsfile
          rm $secret_tmpfile
          reload_secret=true
        fi

        # reloading doesn't work as expected so we (re)start the whole daemon
          systemctl restart strongswan

        # check connection is alive, rollback if needed
        sleep 5  # little wait to be sure
        conn_status=$(datadog-agent check strongswan_connections_status --json 2>/dev/null | tail -n +2 | jq '.[0].aggregator.service_checks[0].status')
        if [ $conn_status -ne 0 ]; then
          echo "[ERROR] Connection $conn_name is not established" >&2
          for f in $confdir/$confname.conf ${secretsfile}; do
            if [ -f ${f}_bak ]; then
              mv ${f}{_bak,}
            else
              rm -v ${f}
            fi
          done
          if ! $ipsec_is_active; then
            systemctl stop strongswan
          else
            systemctl restart strongswan
          fi
          echo "[INFO] Reverting to previous configuration"
          exit 1
        fi

        # remove now useless _bak file(s)
        find /etc/strongswan/ -maxdepth 2 -type f -name "*_bak" -ls -exec rm {} \;
      user: root
    - if ("${response.errOut}" != ""):
        - log: "Error while set up strongswan on ${this}"
        - return:
            type: error
            message: "An internal error occurred while set up strongswan's configuration on ${this}"


settings:
  fields:
    - name: ipsec_should_be
      type: list
      caption: ipsec should be
      values:
        enable: enable
        disable: disable
      editable: false
      required: false
