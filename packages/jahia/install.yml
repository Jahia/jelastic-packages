---
type: install
version: 1.5.2
name: Jahia - Install
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-jelastic
description:
  short: Jahia - Install
  text: Digital Experience Manager gives you an agile customizable platform that
    manages your entire digital ecosystem to innovate and deliver great customer
    experiences, foster internal collaboration and support dynamic business
    needs for sustainable growth.

globals:
  jahia_env_version: 44
  db_user: jahia-db-${fn.random}
  __secret__db_pass: ${fn.password(20)}
  __secret__db_user_datadog: ${fn.password(20)}
  __secret__proxysql_admin_password: ${fn.password(20)}
  __secret__proxysql_monitoring_password: ${fn.password(20)}
  __secret__proxysql_cluster_password: ${fn.password(20)}
  mngr_user: manager
  dbnodeType: mariadb-dockerized
  xms: 256M
  tomcat_maxpostsize: 2097152  # tomcat9's default value

ssl: true
skipNodeEmails: true

mixins:
  - ../../mixins/common.yml
  - ../../mixins/jahia.yml
  - ../../mixins/haproxy.yml
  - ../../mixins/mariadb.yml

# If a new secret is added as an env var,
# it must be added to the regex in the datadog agent to hide it from jelastic console logs.
onBeforeInstall: |
  nodes = []
  var envmode = ${settings.sqldbNodeCount} > 1 ? 'production' : 'development';
  var db_scheme = "galera";
  var dockerImage = "${settings.jahiaDockerImage}";
  var __secret__dbPass = "${globals.__secret__db_pass}";
  var __secret__dbUserDatadog = "${globals.__secret__db_user_datadog}";
  var __secret__DATADOGAPIKEY = "${settings.ddogApikey}";
  var __secret__proxysql_admin_password = "${globals.__secret__proxysql_admin_password}";
  var __secret__proxysql_monitoring_password = "${globals.__secret__proxysql_monitoring_password}";
  var __secret__proxysql_cluster_password = "${globals.__secret__proxysql_cluster_password}";
  nodes_distribution = {
      "mode": "SOFT",
      "zones": [
          {"az1": "zoneA"},
          {"az2": "zoneB"},
          {"az3": "zoneC"}
      ]
  }

  // HAProxy nodes

  node_haproxy = {
    "displayName": "Haproxy",
    "nodeGroup": "bl",
    "nodeType": "haproxy",
    "tag": "2.8.9-almalinux-9",
    "count": ${settings.haproxyNodeCount},
    "cloudlets": 8,
    "env": {
        "DATADOGAPIKEY": __secret__DATADOGAPIKEY,
        "_PROVIDE": "haproxy",
        "_ROLE": "reverse_proxy",
        "envName": "${settings.shortdomain}",
        "envmode": envmode,
        "haproxy_cfg_timeout_server": "5m"
      },
    "volumes": [
        "/etc/haproxy"
      ],
    "distribution": nodes_distribution
  }
  nodes.push(node_haproxy);

  // Browsing nodes

  var jahiaDockerTag = "${settings.productVersion}";
  if ("${settings.dockerTagSuffix}" != "") {
    jahiaDockerTag += "_${settings.dockerTagSuffix}"
  }

  switch ("${settings.browsingNodeSize}") {
    case 'large':
      var browsingCloudlets = 80;
      var browsingXmx = "7680M";
      var browsingMaxBytesLocalHeap = "700M";
      var browsingBigMaxBytesLocalHeap = "3000M";
      break;
    case 'medium':
      var browsingCloudlets = 64;
      var browsingXmx = "5632M";
      var browsingMaxBytesLocalHeap = "700M";
      var browsingBigMaxBytesLocalHeap = "2500M";
      break;
    case 'small':
    default:
      var browsingCloudlets = 40;
      var browsingXmx = "2584M";
      var browsingMaxBytesLocalHeap = "500M";
      var browsingBigMaxBytesLocalHeap = "500M";
  }

  node_cp = {
    "displayName": "Browsing",
    "count": "${settings.browsingNodeCount}",
    "cloudlets": browsingCloudlets,
    "nodeGroup": "cp",
    "links": "sqldb:" + db_scheme,
    "startServiceOnCreation": false,
    "isSLBAccessEnabled": false,
    "volumeMounts": {
        "/share": {
            "readOnly": "false",
            "sourcePath": "data",
            "sourceNodeGroup": "storage",
            "sourceAddressType":"NODE_GROUP",
      },
    },
    "volumes": [
      "/data",
      "/share",
      "/opt/tomcat/webapps"
    ],
    "env": {
        "DB_USER": "${globals.db_user}",
        "DB_PASSWORD": __secret__dbPass,
        "MANAGER_USER": "${globals.mngr_user}",
        "XMS": "${globals.xms}",
        "XMX": browsingXmx,
        "DATADOGAPIKEY": __secret__DATADOGAPIKEY,
        "DB_USER_DATADOG": __secret__dbUserDatadog,
        "DATADOG_APM_ENABLED": "false",
        "DX_VERSION": "${settings.productVersion}",
        "_PROVIDE": "jahia",
        "_ROLE": "Browsing",
        "envName": "${settings.shortdomain}",
        "DB_ENDPOINT": db_scheme,
        "HEALTHCHECK_DURATION": "240",
        "envmode": envmode,
        "jahia_cfg_elasticsearch_prefix": "${settings.shortdomain}",
        "jahia_cfg_org_jahia_ehcachemanager_maxBytesLocalHeap": browsingMaxBytesLocalHeap,
        "jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap": browsingBigMaxBytesLocalHeap,
        "jahia_cfg_jahia_jackrabbit_datastore_path": "/share/datastore",
        "HAPROXY_NODES_COUNT": "${settings.haproxyNodeCount}",
        "tomcat_cfg_maxpostsize": "${globals.tomcat_maxpostsize}",
        "PROXYSQL_ADMIN_PASSWORD": __secret__proxysql_admin_password,
        "PROXYSQL_MONITORING_PASSWORD": __secret__proxysql_monitoring_password,
        "PROXYSQL_CLUSTER_PASSWORD": __secret__proxysql_cluster_password,
    },
    "distribution": nodes_distribution
  }
  if (dockerImage == "undefined") {
    node_cp['nodeType'] = "jahia";
    node_cp['tag'] = jahiaDockerTag;
  } else {
    node_cp['image']  = dockerImage;
  }
  if (${settings.storageNodeCount} == 3) {
    node_cp['volumeMounts']['/share']['protocol'] = "GLUSTER"
  }
  nodes.push(node_cp);

  // Processing node

  switch ("${settings.processingNodeSize}") {
    case 'large':
      var procCloudlets = 80;
      var procXmx = "7680M";
      var procMaxBytesLocalHeap = "700M";
      var procBigMaxBytesLocalHeap = "800M";
      break;
    case 'medium':
      var procCloudlets = 64;
      var procXmx = "5632M";
      var procMaxBytesLocalHeap = "700M";
      var procBigMaxBytesLocalHeap = "800M";
      break;
    case 'small':
    default:
      var procCloudlets = 40;
      var procXmx = "2584M";
      var procMaxBytesLocalHeap = "500M";
      var procBigMaxBytesLocalHeap = "500M";
  }

  node_proc = {
    "displayName": "Processing",
    "count": "1",
    "cloudlets": procCloudlets,
    "nodeGroup": "proc",
    "links": "sqldb:" + db_scheme,
    "startServiceOnCreation": false,
    "isSLBAccessEnabled": false,
    "volumeMounts": {
        "/share": {
            "readOnly": "false",
            "sourcePath": "data",
            "sourceNodeGroup": "storage",
            "sourceAddressType":"NODE_GROUP"
        },
    },
    "volumes": [
      "/data",
      "/share",
      "/opt/tomcat/webapps"
    ],
    "env": {
        "DB_USER": "${globals.db_user}",
        "DB_PASSWORD": __secret__dbPass,
        "MANAGER_USER": "${globals.mngr_user}",
        "XMS": "${globals.xms}",
        "XMX": procXmx,
        "DATADOGAPIKEY": __secret__DATADOGAPIKEY,
        "DB_USER_DATADOG": __secret__dbUserDatadog,
        "DATADOG_APM_ENABLED": "false",
        "DX_VERSION": "${settings.productVersion}",
        "_PROVIDE": "jahia",
        "_ROLE": "Processing",
        "envName": "${settings.shortdomain}",
        "DB_ENDPOINT": db_scheme,
        "HEALTHCHECK_DURATION": "240",
        "envmode": envmode,
        "jahia_cfg_elasticsearch_prefix": "${settings.shortdomain}",
        "jahia_cfg_org_jahia_ehcachemanager_maxBytesLocalHeap": procMaxBytesLocalHeap,
        "jahia_cfg_org_jahia_ehcachemanager_big_maxBytesLocalHeap": procBigMaxBytesLocalHeap,
        "jahia_cfg_jahia_jackrabbit_datastore_path": "/share/datastore",
        "HAPROXY_NODES_COUNT": "${settings.haproxyNodeCount}",
        "tomcat_cfg_maxpostsize": "${globals.tomcat_maxpostsize}",
        "PROXYSQL_ADMIN_PASSWORD": __secret__proxysql_admin_password,
        "PROXYSQL_MONITORING_PASSWORD": __secret__proxysql_monitoring_password,
        "PROXYSQL_CLUSTER_PASSWORD": __secret__proxysql_cluster_password,
      }
  }
  if (dockerImage == "undefined") {
    node_proc['nodeType'] = "jahia";
    node_proc['tag'] = jahiaDockerTag;
  } else {
    node_proc['image']  = dockerImage;
  }
  if (${settings.storageNodeCount} == 3) {
    node_proc['volumeMounts']['/share']['protocol'] = "GLUSTER"
  }
  nodes.push(node_proc);

  // MariaDB nodes

  switch ("${settings.sqldbNodeSize}") {
    case 'large':
      var mariadbCloudlets = 64;
      break;
    case 'medium':
      var mariadbCloudlets = 48;
      break;
    case 'small':
    default:
      var mariadbCloudlets = 20;
  }

  node_mariadb = {
    "nodeType": "${globals.dbnodeType}",
    "nodeGroup": "sqldb",
    "tag": "10.11.7-almalinux-9",
    "count": ${settings.sqldbNodeCount},
    "cloudlets": mariadbCloudlets,
    "isSLBAccessEnabled": false,
    "env": {
        "ADMINPANEL_ENABLED": false,
        "DATADOGAPIKEY": __secret__DATADOGAPIKEY,
        "DB_USER_DATADOG": __secret__dbUserDatadog,
        "PHPMYADMIN_ENABLED": false,
        "DB_USER": "${globals.db_user}",
        "DB_PASS": __secret__dbPass,
        "_PROVIDE": "Database",
        "_ROLE": db_scheme,
        "envName": "${settings.shortdomain}",
        "envmode": envmode,
        "JELASTIC_EXPOSE": false,
    },
    "distribution": nodes_distribution
  }
  nodes.push(node_mariadb);

  // Storage nodes
  var is_glusterfs = false
  if (${settings.storageNodeCount} == 3) {
    is_glusterfs = true
  }

  switch ("${settings.storageNodeSize}") {
    case 'large':
      var glusterFSCloudlets = 10;
      break;
    case 'medium':
      var glusterFSCloudlets = 8;
      break;
    case 'small':
    default:
      var glusterFSCloudlets = 6;
  }

  node_storage = {
    "nodeType": "storage",
    "tag":  "2.0-10.5-almalinux-9",
    "cloudlets": glusterFSCloudlets,
    "count": ${settings.storageNodeCount},
    "nodeGroup": "storage",
    "displayName": "Storage",
    "cluster": is_glusterfs,
    "env": {
        "DATADOGAPIKEY": __secret__DATADOGAPIKEY,
        "_PROVIDE": "Storage",
        "_ROLE": "storage",
        "envName": "${settings.shortdomain}",
        "envmode": envmode,
        "JELASTIC_EXPOSE": false
    },
    "distribution": nodes_distribution
  }
  nodes.push(node_storage);

  var resp = {
    result: 0,
    nodes: nodes
  };
  return resp;

nodes: definedInOnBeforeInstall

# --Events --
onInstall:
  - log: "## Beginning installation of Jahia"
  - setJelasticUserAsRoot: "*"
  - installRequiredPackages:
      target: "bl, sqldb, storage"
      packages: "jq rclone"
  - installRequiredPackages:
      target: "sqldb"
      packages: "qpress python3-boto3"
  - installPython:
      target: "sqldb, storage"
      python_major_version: 3
      python_minor_version: 8
  - setJournaldLimit
  - installDatabase:
      user: ${globals.db_user}
      __secret__password: ${globals.__secret__db_pass}
  - finishProxysqlInstall:
      __secret__monitor_password: ${globals.__secret__proxysql_monitoring_password}
  - addEnvMetadataToNodeGroup:
      __secret__vaultRoleId: ${settings.vaultRoleId}
      __secret__vaultSecretId: ${settings.vaultSecretId}
      vaultClusterUrl: ${settings.vaultClusterUrl}
      papiHostname: ${settings.papiHostname}
      papiApiVersion: ${settings.papiApiVersion}
      papiEnvId: ${settings.papiEnvId}
  - setupPat:
      jahiaVersion: ${settings.productVersion}
  - installJahia:
      jahiaVersion: ${settings.productVersion}
      __secret__rootpwd: ${settings.rootpwd}
  - installHaproxy
  - getLogEventScript: bl, proc, cp, sqldb, storage
  - installPapiScript: bl, proc, cp, sqldb, storage
  - setupDatadogAgentSql: sqldb
  - setupDatadogAgentJahia: cp, proc
  - setupDatadogAgentStorage: storage
  - setupDatadogAgentHaproxy: bl
  - setupRclone
  - setEnvVersion: ${globals.jahia_env_version}
  - setCloudConf
  - install:
      jps: "${baseUrl}/update-events.yml"
  - startupJahiaHealthCheck: cp
  - setJelEnvRoleInNodeGroupData
  - updateEnvStatusInPapi:
      status: running
  - setEnvironmentAppId
  - upgradeDxClusteringTo8109
  - if(env.region == "aws-univ"):
      - install:
          jps: "${baseUrl}/enable-tomcat-filtering.yaml"


settings:
  fields:
    - name: productVersion
      type: string
      caption: Jahia version
      required: true
    - name: rootpwd
      type: string
      caption: Jahia root password
      vtype: string
      required: true
    - name: haproxyNodeCount
      type: string
      caption: Number of HAProxy nodes
      default: 2
    - name: browsingNodeCount
      type: string
      caption: Number of Jahia browsing nodes
      default: 1
    - name: browsingNodeSize
      type: list
      caption: Jahia browsing node size
      values:
        small: small
        medium: medium
        large: large
      default: small
    - name: processingNodeSize
      type: list
      caption: Jahia processing node size
      values:
        small: small
        medium: medium
        large: large
      default: small
    - name: sqldbNodeCount
      type: string
      caption: Number of MariaDB nodes
      default: 1
    - name: sqldbNodeSize
      type: list
      caption: MariaDB node size
      values:
        small: small
        medium: medium
        large: large
      default: small
    - name: storageNodeCount
      type: string
      caption: Number of storage nodes
      default: 1
    - name: storageNodeSize
      type: list
      caption: Storage node size
      values:
        small: small
        medium: medium
        large: large
      default: small
    # This setting is necessary because used in OnBeforeInstall event and there is
    # no other way to get the shortdomain in this event (even if it is passed as a parameter)
    - name: shortdomain
      type: envname
      caption: Environment
      required: true
    - name: ddogApikey
      type: string
      caption: Datadog API KEY
      required: true
    - name: jahiaDockerImage
      inputType: hidden
      type: string
      default: 'undefined'
    - name: dockerTagSuffix
      type: string
      caption: Docker tag suffix
    - name: vaultRoleId
      type: string
      caption: Vault Role Id
    - name: vaultSecretId
      inputType: password
      type: string
      caption: Vault Secret Id
    - name: vaultClusterUrl
      type: string
      caption: Vault Cluster Url
    - name: papiHostname
      type: string
      caption: Papi hostname
    - name: papiApiVersion
      type: string
      caption: Papi API Version
    - name: papiEnvId
      type: string
      caption: Papi Environment Id
