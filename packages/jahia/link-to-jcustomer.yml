---
type: update
version: 1.5.2
name: Jahia - Update jExperience config
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-unomi-update-dx
description:
  short: Jahia - Update jExperience config


mixins:
  - ../../mixins/common.yml
  - ../../mixins/jahia.yml
  - ../../mixins/jcustomer.yml
  - ../../mixins/elasticsearch.yml

globals:
  kibanaDashboardRoleAndAccountName: ${env.envName}-kibana-dashboard
  kibanaCustomerUserRoleAndAccountName: ${env.envName}-kibana-user
  __secret__kibanaDashboardpassword: ${fn.password(20)}
  __secret__kibanaCustomerUserPassword: ${fn.password(20)}

onInstall:
  - checkJcustomerLink
  - getUnomiDnsAndPwd:
      unomi_env_name: ${settings.unomienv}
  - getJexperienceVersion
  - installOrUpgradeModule:
      moduleSymname: jexperience
      moduleVersion: ${globals.jexperienceVersion}
      moduleGroupId: org.jahia.modules
      moduleRepository: marketing-factory-releases
  - getJcustomerKey:
      jcustomerEnv: ${settings.unomienv}
  - confJexperience: proc
  - confJexperience: cp
  - getJahiaVersion
  - isVersionHigherOrEqual:
      a: ${globals.jahiaVersion}
      b: 8.0.0.0
      res: jahia8
  - if (${globals.jahia8}):
    - configureKibanaDashboard:
        roleAndAccountName: ${globals.kibanaDashboardRoleAndAccountName}
        __secret__password: ${globals.__secret__kibanaDashboardpassword}
        jcustomer_env: ${settings.unomienv}
    - createKibanaCustomerUserAccount:
        accountName: ${globals.kibanaCustomerUserRoleAndAccountName}
        rolesList: ${globals.kibanaDashboardRoleAndAccountName}
        __secret__password: ${globals.__secret__kibanaCustomerUserPassword}
        jcustomerEnv: ${settings.unomienv}
  - setNGData
  - environment.nodegroup.ApplyData[proc, cp]:
      data:
        envLink: ${settings.unomienv}
  - refreshUnomiAllowedIPs:
      unomiEnvName: ${settings.unomienv}
  - if (${globals.jahia8}):
    - getKibanaEndpointOfJcustomer:
        jcustomerEnv: ${settings.unomienv}
    - set:
        __secret__returnMessage: '{"kibana_endpoint": "${globals.kibanaEndpoint}", "kibana_customer_user_account_name": "${globals.kibanaCustomerUserRoleAndAccountName}", "kibana_customer_user_password": "${globals.__secret__kibanaCustomerUserPassword}"}'
    - return:
        type: success
        message: '${this.__secret__returnMessage.toBase64()}'


actions:
  checkJcustomerLink:
    - script: |
        const envName = "${env.envName}";
        jCustomerLinked = jelastic.env.control.GetNodeGroups(envName, session).object.filter(function (object) {
                                        return object.name == "proc";}).pop().envLink;
        if (jCustomerLinked) {
          return {"result": 1, "errOut": "Jahia is already linked to a jCustomer"};
        }
        return {"result": 0, "out": "Jahia is not linked to a jCustomer"}

  setNGData:
    - script: |
        envLink = jelastic.env.control.GetNodeGroups('${settings.unomienv}', session).object.filter(function (object) {
                    return object.name == "cp";}).pop().envLink;
        if (! envLink || envLink === "") {
          // No existing envLink, just set the new one
          envLinkToSet = '${env.shortdomain}';
        } else if (envLink.indexOf('${env.shortdomain}') >= 0) {
          // If the envName already present in the envlink, don't change it
          envLinkToSet = envLink;
        } else {
          // Append the envName to envlink value
          envLinkToSet = envLink + ',' + '${env.shortdomain}';
        }

        return {'result': 0, 'envLinkToSet': envLinkToSet};
    - set:
        envLinkToSet: ${response.envLinkToSet}
    - log: "## this DX shortdomain will now be set to cp node(s) in the Unomi env: ${this.envLinkToSet}"
    - script: |
        var resp = jelastic.env.nodegroup.ApplyData('${settings.unomienv}', session,
          nodeGroup='cp',
          data={'envLink': '${this.envLinkToSet}'}
        );
        if (resp.result != 0) return resp;
        var new_prop = jelastic.env.control.GetNodeGroups('${settings.unomienv}', session);
        return {'result': new_prop.result, 'new_prop': new_prop};

  getJexperienceVersion:
    # Get jExperience version to install according to Jahia env version:
    # - Jahia 7.3.x ==> jExperience 1.11.8
    # - Jahia 8.0.x ==> jExperience 2.2.0
    # - Jahia 8.1.x ==> jExperience 2.2.2
    # Returns:
    #   ${globals.jexperienceVersion}: jExperience version to install according to current Jahia version
    - getJahiaVersion
    - isVersionStrictlyLower:
        a: ${globals.jahiaVersion}
        b: 8.0.0.0
        res: isLowerThan8000
    - if( ${globals.isLowerThan8000} ):
        - setGlobals:
            jexperienceVersion: 1.11.8
    - else:
      - isVersionStrictlyLower:
          a: ${globals.jahiaVersion}
          b: 8.1.0.0
          res: isLowerThan8100
      - if( ${globals.isLowerThan8100} ):
          - setGlobals:
              jexperienceVersion: 2.2.0
      - else:
          - setGlobals:
              jexperienceVersion: 2.2.2

  confJexperience:
    - setGlobalRepoRootUrl
    - cmd[${this}]: |-
        CONF_FILENAME=org.jahia.modules.jexperience.settings-global.cfg
        CONF_PATH="/data/digital-factory-data/karaf/etc/$CONF_FILENAME"
        CONF_ASSET_URL=${globals.repoRootUrl}/assets/jahia/$CONF_FILENAME
        # Check if asset URL is correct
        if (! curl -fIs "$CONF_ASSET_URL" > /dev/null); then
          >&2 echo "Asset not found"
          exit 1
        fi
        # Set up jExperience configuration
        __secret__jcustomer_key="${globals.__secret__jcustomerKey}"
        __secret__unomi_pwd_b64="${globals.__secret__unomi_pwd_b64}"
        # The last sed is required to escape backslashes (with a backslash) inside the cfg file
        curl -fLSs "$CONF_ASSET_URL" \
        | sed -r -e 's;(\w+URL\s*=\s*).*;\1http://${globals.unomidns};' \
                   -e "s;[ #]*(\w+\.jCustomerKey\s*=\s*).*;\1${__secret__jcustomer_key};" \
                   -e "s;(\w+Password\s*=\s*).*;\1$(echo -n $__secret__unomi_pwd_b64 | base64 -d | sed 's;\\;\\\\;g');" \
        | sed 's;\\;\\\\;g' \
                > $CONF_PATH
        chown tomcat:tomcat "$CONF_PATH"
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during jexperience installation."

settings:
  fields:
    - name: unomienv
      type: envlist
      caption: Targeted Unomi env
      required: true
      valueField: shortdomain
