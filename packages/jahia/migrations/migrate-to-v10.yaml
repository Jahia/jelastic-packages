---
type: update
version: 1.5.2
name: Migrate Jahia env to v10
id: migrate-jahia-env-v10

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 10

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - haproxyWorkaround                                    # PAAS-1836, have to fix envs before checks
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - updateEnvFileSource: cp, proc, bl, sqldb             # PAAS-1772
  - replaceAuthBasicEnabledEnvvar                        # PAAS-1815
  - removeHTTPHeader: bl                                 # PAAS-1805
  - useEnvmodeEnvVar                                     # PAAS-1811
  - moveEnvMetadataToNodeGroup                           # PAAS-1844


  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  updateEnvFileSource:
    cmd[${this}]: |-
      OLD="source /.jelenv"
      NEW="source /etc/profile"
      tomcat_env=/opt/tomcat/conf/tomcat-env.sh
      log_event=/usr/local/bin/log_event.sh
      if [ -f $tomcat_env ]; then
        sed -i "s|$OLD|$NEW|" $tomcat_env $log_event
      else
        sed -i "s|$OLD|$NEW|" $log_event
      fi
    user: root

  replaceAuthBasicEnabledEnvvar:
    # Check if basic auth is enabled
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: proc
    - if ("${response.object.auth_basic_enabled}" == "true"):
        # Set "basicAuthEnabled" node group data
        - environment.nodegroup.ApplyData [proc, cp]:
            data:
              basicAuthEnabled: true
    # Remove "auth_basic_enabled" envvar
    - env.control.RemoveContainerEnvVars [proc, cp]:
        vars: ["auth_basic_enabled"]

  haproxyWorkaround:
    - setGlobalRepoRootUrl
    - cmd[bl]: |-
        newMD5="5842c10ecc4da9ba3c6554de9889d264"
        fileName="/etc/sysconfig/haproxy"
        if ! (echo "$newMD5 $fileName" | md5sum -c --status); then
          curl -fLSso $fileName ${globals.repoRootUrl}/packages/jahia/migrations/v10_assets/haproxy-sysconfig || exit 1
          chown haproxy:haproxy $fileName
        fi
        service haproxy status && service haproxy reload || service haproxy start
      user: root

  removeHTTPHeader:
    cmd[${this}]: |-
      line_to_remove='    http-response set-header Strict-Transport-Security "max-age=63072000;"'
      haproxy_conf="/etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg"
      if ( ! grep -qPzo "$line_to_remove" $haproxy_conf ); then
        echo "[INFO] No header to remove."
        exit 0
      fi
      sed -i "/$line_to_remove/d" $haproxy_conf
      service haproxy reload
    user: root

  useEnvmodeEnvVar:
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: proc
    - if (! "${response.object.envmode.print()}"):
        - if (${nodes.sqldb.length} > 1):
            - set:
                envmodeValue: production
        - else:
            - set:
                envmodeValue: development
        - env.control.AddContainerEnvVars[*]:
            vars:
              envmode: ${this.envmodeValue}
    - cmd[*]: |-
        sed 's/jahia_cfg_operatingMode/envmode/' -i /usr/local/bin/set_dd_tags.sh
      user: root

  moveEnvMetadataToNodeGroup:
    - getEnvData
    - if ("${response.is_update_needed}" == "true"):
        - setGlobals:
            organizationName: ${response.org}
            vaultClusterUrl: ${response.vault_url}
            vaultRoleId: ${response.role_id}
            vaultSecretId: ${response.secret_id}
            papiEnvId: ${response.papi_env_id}
            papiHostname: ${response.papi_hostname}
            papiApiVersion: ${response.papi_api_version}
        - updateNodeGroupData: cp
        - removeEnvVars: bl, cp, proc, sqldb

  getEnvData:
    - script: |
        const envName = "${env.envName}";
        const container_env_vars = jelastic.env.control.GetContainerEnvVarsByGroup(envName, session, nodeGroup='cp');
        const orgName = container_env_vars.object.ORGANIZATION_NAME;
        const vaultUrl = container_env_vars.object.VAULT_CLUSTER_URL;
        const roleId = container_env_vars.object.VAULT_ROLE_ID;
        const secretId = container_env_vars.object.VAULT_SECRET_ID;
        const papiEnvId = container_env_vars.object.PAPI_ENV_ID;
        const papiHostname = container_env_vars.object.PAPI_HOSTNAME;
        const papiApiVersion = container_env_vars.object.PAPI_API_VERSION;

        if (! (orgName && vaultUrl && roleId && secretId && papiEnvId && papiHostname && papiApiVersion)) {
          return {'result': 0, 'is_update_needed': "false"};
        } else {
          return {
            'result': 0,
            'is_update_needed': "true",
            'org': orgName,
            'vault_url': vaultUrl,
            'role_id': roleId,
            'secret_id': secretId,
            'papi_env_id': papiEnvId,
            'papi_hostname': papiHostname,
            'papi_api_version': papiApiVersion
          };
        }

  updateNodeGroupData:
    - environment.nodegroup.ApplyData [${this}]:
        data:
          ORGANIZATION_NAME: ${globals.organizationName}
          VAULT_ROLE_ID: ${globals.vaultRoleId}
          VAULT_SECRET_ID: ${globals.vaultSecretId}
          VAULT_CLUSTER_URL: ${globals.vaultClusterUrl}
          PAPI_HOSTNAME: ${globals.papiHostname}
          PAPI_API_VERSION: ${globals.papiApiVersion}
          PAPI_ENV_ID: ${globals.papiEnvId}

  removeEnvVars:
    - env.control.RemoveContainerEnvVars [${this}]:
        vars: [
            "ORGANIZATION_NAME",
            "VAULT_ROLE_ID",
            "VAULT_SECRET_ID",
            "VAULT_CLUSTER_URL",
            "PAPI_HOSTNAME",
            "PAPI_API_VERSION",
            "PAPI_ENV_ID",
            "GALERA_ENV_ORGANIZATION_NAME",
            "GALERA_ENV_VAULT_ROLE_ID",
            "GALERA_ENV_VAULT_SECRET_ID",
            "GALERA_ENV_VAULT_CLUSTER_URL",
            "GALERA_ENV_PAPI_HOSTNAME",
            "GALERA_ENV_PAPI_API_VERSION",
            "GALERA_ENV_PAPI_ENV_ID",
            "GALERA_ORGANIZATION_NAME",
            "GALERA_VAULT_ROLE_ID",
            "GALERA_VAULT_SECRET_ID",
            "GALERA_VAULT_CLUSTER_URL",
            "GALERA_PAPI_HOSTNAME",
            "GALERA_PAPI_API_VERSION",
            "GALERA_PAPI_ENV_ID"
        ]
