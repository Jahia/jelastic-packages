---
type: update
version: 1.5.2
name: Migrate Jahia env to v35
id: migrate-jahia-env-v35

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 35
  ignoredModules: ""

onInstall:
  ### Pre-migration actions
  - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)
  # (None)

  # Regular actions
  - updateDDIPSecConnStatus                  # PAAS-2601
  - fixNodesDistribution                     # PAAS-2634

  # Actions that require a restart
  - useTCMalloc                              # PAAS-2583

  # Actions that require a redeploy
  # (None)

  # Redeploy and restart actions:
  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  preChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  updateDDIPSecConnStatus:
    - cmd[proc, cp]: |-
        file_md5=034d716d25048708f04168fa935994bb
        file_path="/etc/datadog-agent/checks.d/strongswan_connections_status.py"
        if ! (echo "$file_md5 $file_path" | md5sum --status -c); then
          file_url="${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/$(basename $file_path)"
          curl -fLSso $file_path $file_url || exit 1
          chown dd-agent: $file_path
          systemctl restart datadog-agent
        fi

  fixNodesDistribution:
  - script: |
      var distribution = {
        "mode": "SOFT",
        "zones": [
          {"az1": "zoneA"},
          {"az2": "zoneB"},
          {"az3": "zoneC"}
        ]
      }
      var nodeGroupsPayload = [{"nodeGroup": "proc"}]
      var nodeGroups = ["bl", "cp", "sqldb", "storage"]
      nodeGroups.forEach(function (ng) {
        nodeGroupsPayload.push(
          {
            "nodeGroup": ng,
            "distribution": distribution
          }
        )
      })

      resp = api.env.control.ChangeTopology(
        "${env.envName}",
        session,
        "changetopology;${env.appid};${env.envName};${user.uid}",
        "{\"region\": ${env.region},\"sslstate\": true,\"ishaenabled\": false}",
        JSON.stringify(nodeGroupsPayload)
      )
      if (resp["result"] != 0) {
        return {result: 1, error: "The topology update API call failed", errorMessage: resp["error"]}
      }

      return {result: 0}

  useTCMalloc:
    - cmd[cp, proc]: |-
        yum install -y gperftools > /dev/null
        chmod +s $(readlink -f /usr/lib64/libtcmalloc.so)
        if ! (grep -q LD_PRELOAD /opt/tomcat/conf/tomcat-env.sh); then
          echo "export LD_PRELOAD=libtcmalloc.so" >> /opt/tomcat/conf/tomcat-env.sh
          echo "Restart needed"
        fi
    - if ("${response.out}" != ""):
        setGlobals:
          jahiaRollingRestartNeeded: true

settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: disable all checks
