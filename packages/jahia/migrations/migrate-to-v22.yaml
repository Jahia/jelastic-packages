---
type: update
version: 1.5.2
name: Migrate Jahia env to v22
id: migrate-jahia-env-v22

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 22

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - updateGraphQL                       # PAAS-2268
  - upgradeSam                          # PAAS-2276
  - increaseJahia8LogsMaxLineSize       # PAAS-2200
  - upgradeAugmentedSearch              # PAAS-2267
  - setupLogsToS3Bucket                 # PAAS-2193

  # Actions that require a restart
  - updateJDBCConfForLongConnections    # PAAS-2265
  - updateJavaOpts                      # PAAS-2279

  # Restart action:
  - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  updateGraphQL:
    - getJahiaVersion
    - isVersionBetween:
        lower: 8.1.1.0
        lower_may_equal: true
        version: ${globals.jahiaVersion}
        higher: 8.1.3.0
        higher_may_equal: true
        res: isBetween8110and8130
    - if( ${globals.isBetween8110and8130} ):
        - disableHaproxyHealthcheck  # upgrading graphql temporarily break the healthcheck
        - installOrUpgradeModule:
            moduleSymname: graphql-dxm-provider
            moduleVersion: 2.16.0
            moduleGroupId: org.jahia.modules
            moduleRepository: jahia-releases
        - enableHaproxyHealthcheck

  increaseJahia8LogsMaxLineSize:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.0.0
        res: log4j2
    - if (${globals.log4j2}):
        - cmd[cp,proc]: |-
            sed -r 's|(\{%\.-)[0-9]+(m\})|\12000\2|' \
                -i /opt/tomcat/webapps/ROOT/WEB-INF/etc/config/log4j2.xml

  updateJDBCConfForLongConnections:
    - cmd[cp,proc]: |-
        file=/opt/tomcat/webapps/ROOT/META-INF/context.xml
        if (! grep abandonWhenPercentageFull $file); then
          sed -i '/removeAbandoned="true"/a \    jdbcInterceptors="org.apache.tomcat.jdbc.pool.interceptor.ResetAbandonedTimer"' $file
          sed -i '/removeAbandoned="true"/a \    abandonWhenPercentageFull="80"' $file
          echo "restart"
        else
          echo "JDBC configuration alreay up to date"
        fi
        sed -i 's/max_connections = 50/max_connections = 100/' /etc/proxysql.cnf
      user: root
    - cmd[proc]: |-
        ${globals.proxysql_cli} -e "update mysql_servers set max_connections=100"
        ${globals.proxysql_cli} -e "LOAD MYSQL SERVERS TO RUNTIME;"
        ${globals.proxysql_cli} -e "SAVE MYSQL SERVERS TO DISK"
      user: root
    - if("${response.out}" == "restart"):
        - setGlobals:
            jahiaRollingRestartNeeded: true

  upgradeAugmentedSearch:
    - isAugSearchEnabled
    - if (${globals.isAugSearchEnabled}):
        - getJahiaVersion
        - isVersionHigherOrEqual:
            a: ${globals.jahiaVersion}
            b: 8.0.0.0
            res: jahia8
        - if (${globals.jahia8}):
            installOrUpgradeModule:
              moduleSymname: augmented-search
              moduleVersion: 3.4.1
              moduleGroupId: org.jahia.modules
              moduleRepository: augmented-search-releases
              startModule: true
        - else:
            installOrUpgradeModule:
              moduleSymname: augmented-search
              moduleVersion: 1.7.0
              moduleGroupId: org.jahia.modules
              moduleRepository: augmented-search-releases
              startModule: true

  setupLogsToS3Bucket:
    - if ("HideThisLine" && "${globals.__secret__papiToken.print()}" == ""):
        getPapiInfoAll

    - cmd[${nodes.cp.first.id}]: |-
        if [ -f /usr/local/bin/rclone-logs.sh ]; then
          echo "Logs already setup"
        fi
    - if ( "${response.out}" != "Logs already setup" ):
        - cmd[bl]: |-
            curl -fLSso /etc/logrotate.d/haproxy ${globals.repoRootUrl}/assets/haproxy/logrotate_haproxy || exit 1
            chmod 644 /etc/logrotate.d/haproxy
          user: root
        - cmd[cp,proc]: |-
            logrotate_file=/etc/logrotate.hourly.d/jahia_logrotate
            if $(! grep -q dateext $logrotate_file); then
              sed -i '/^}/i\        dateext' $logrotate_file
            fi
          user: root
        - cmd[*]: |-
            yum install rclone
          user: root
        - cmd[${nodes.cp.first.id}]: |-
            __secret__PAPI_TOKEN="${settings.papi_token}"
            export PAPI_TOKEN=$__secret__PAPI_TOKEN
            export PAPI_HOSTNAME=${settings.papi_hostname}
            export PAPI_ENV_ID="${globals.papiEnvId}"
            export PAPI_API_VERSION="${globals.papiApiVersion}"

            papier_id=$(papi.py -X GET paas-environment/$PAPI_ENV_ID | jq -r .papier_id)
            papi.py -X PUT -d '{}' "papier/$papier_id/role/READ_PAAS_REGIONS"
        - setupLogsShipping

  updateJavaOpts:
    - cmd[proc, cp]: |-
        tomcat_env=/opt/tomcat/conf/tomcat-env.sh
        if ! grep -qE "^\s*JAVA_OPTS\s*=.*security.egd" $tomcat_env; then
          sed -i 's;^\s*\(JAVA_OPTS\s*=.*\)"$;\1 -Djava.security.egd=file:/dev/urandom";' $tomcat_env
          echo restart
        fi
    - if("${response.out}" == "restart"):
        - setGlobals:
            jahiaRollingRestartNeeded: true
            
  upgradeSam:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.2.0
        res: isHigherOrEqualThan8120
    - if (${globals.isHigherOrEqualThan8120}):
        - checkModule:
            moduleSymname: server-availability-manager
        - if ("${globals.runningVersion}" != "2.4.0"):
            - disableHaproxyHealthcheck
            - installOrUpgradeModule:
                moduleSymname: server-availability-manager
                moduleVersion: 2.4.0
                moduleGroupId: org.jahia.modules
                moduleRepository: jahia-releases
            - checkJahiaHealth
            - enableHaproxyHealthcheck

settings:
  fields:
    - name: papi_token
      type: string
      caption: papi token to perform operations
      required: true
    - name: papi_hostname
      type: string
      caption: papi dns
      required: true
