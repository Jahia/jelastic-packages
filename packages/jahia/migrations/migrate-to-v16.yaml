---
type: update
version: 1.5.2
name: Migrate Jahia env to v16
id: migrate-jahia-env-v16

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 16

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - upgradeSam                                                # PAAS-2089

  # Actions that require a restart:
  - setESPrefixNodeGroupData                                  # PAAS-1855
  - enableApmByDefault                                        # PAAS-2057
  - removeModulesFolderAndRestartAllJahia                     # PAAS-2079

  # Restart action:
  - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  removeModulesFolderAndRestartAllJahia:
    # Check if env is running on Jahia version 8, If yes,
    # check if changes needed and restart Jahia nodes one by one.
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.0.3.0
        res: isHigherOrEqualThan8030
    - if ( ${globals.isHigherOrEqualThan8030} ):

        # Processing node
        - removeProcNodeFromHaproxy:
            reload: true
        - removeModulesFolderFromNodeAndRestartJahia:
            target: ${nodes.proc.first.id}
        - addProcNodeToHaproxy:
            reload: true
        # Browsing Nodes
        - foreach (nodes.cp):
            - removeBrowsingNodeFromHaproxy:
                nodeId: ${@i.id}
                reload: true
            - removeModulesFolderFromNodeAndRestartJahia:
                target: ${@i.id}
            - addBrowsingNodeToHaproxy:
                nodeId: ${@i.id}
                nodeIp: ${@i.intIP}
                reload: true
        # Bypass final rolling restart, since we just restarted
        - setGlobals:
            jahiaRollingRestartNeeded: false

  removeModulesFolderFromNodeAndRestartJahia:
    - cmd[${this.target}]: |-
        dir="/data/digital-factory-data/modules"
        if ! ls $dir/*.jar &> /dev/null; then
          echo "[INFO] Modules jar file not present. Nothing to do."
          exit 0
        fi
        sudo service tomcat stop
        cd /data/digital-factory-data/
        rm modules/* bundles-deployed/module-bundle-location.map
        sudo service tomcat start
    - startupJahiaHealthCheck: ${this.target}

  setESPrefixNodeGroupData:
    - env.nodegroup.ApplyData[cp, proc]:
        data:
          jahia_cfg_elasticsearch_prefix: ${env.envName}
    - setGlobals:
        jahiaRollingRestartNeeded: true

  upgradeSam:
    - getJahiaVersion
    - isVersionBetween:
        version: ${globals.jahiaVersion}
        higher: 8.0.0.0
        higher_may_equal: false
        lower: 7.3.9.0
        lower_may_equal: true
        res: jahia739plus
    - if (${globals.jahia739plus}):
      - checkModule:
          moduleSymname: server-availability-manager
      - if ("${globals.runningVersion}" != "1.2.0"):
          - disableHaproxyHealthcheck
          - installOrUpgradeModule:
              moduleSymname: server-availability-manager
              moduleVersion: 1.2.0
          - checkJahiaHealth
          - enableHaproxyHealthcheck

  enableApmByDefault:
    # Update default DATADOG_APM_ENABLED value to "true"
    - cmd[cp, proc]: |-
        sed 's/DATADOG_APM_ENABLED:-false/DATADOG_APM_ENABLED:-true/' -i /usr/local/bin/set_dd_tags.sh
      user: root
    # Enable APM if disabled
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: proc
    - if ("${response.object.DATADOG_APM_ENABLED}" == "false"):
        - env.nodegroup.ApplyData[cp, proc]:
            data:
              DATADOG_APM_ENABLED: true
        - setGlobals:
            jahiaRollingRestartNeeded: true
