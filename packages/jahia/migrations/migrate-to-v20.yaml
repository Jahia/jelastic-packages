---
type: update
version: 1.5.2
name: Migrate Jahia env to v20
id: migrate-jahia-env-v20

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 20

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - configureJahiaPurgeCrons                  # PAAS-1681
  - UseG1GC                                   # PAAS-2199
  - addLocalRevisionsCustomCheck              # PAAS-2175
  - addHealthcheckMetricCustomCheck           # PAAS-2194
  - upgradeSam                                # PAAS-2224
  - upgradeDS                                 # PAAS-2223
  - moveDumpsToDifferentFolder                # PAAS-2220

  # Restart action:
  - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"
  - else:
    - if ("${globals.procRestartNeeded}" == "true"):
      - api: environment.control.RestartNodeById
        nodeId: ${nodes.proc.first.id}

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  UseG1GC:
    - cmd[cp,proc]: |-
        if (grep -q UseParallelGC /opt/*maven*/bin/mvn); then
          sed -i '/^MAVEN_OPTS=-XX:+UseParallelGC$/d' -i /opt/*maven*/bin/mvn
        fi
        if (pgrep -u tomcat -f UseParallelGC > /dev/null); then
          newGCconf="-XX:+UseG1GC -XX:+DisableExplicitGC -XX:+UseStringDeduplication -XX:MaxTenuringThreshold=7"
          sed -e '/^JMX_OPTS=/d' \
              -e "s/-XX:+UseParallelGC/$newGCconf/" \
              -i /opt/tomcat/conf/tomcat-env.sh
          echo "restart"
        fi
    - if("${response.out}" == "restart"):
        - setGlobals:
            jahiaRollingRestartNeeded: true

  addLocalRevisionsCustomCheck:
    - generateNodesListFile
    - createDataDogUser
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: proc
    - if ("${response.object.DB_USER_DATADOG.length}" != "20"):
        - api: env.control.GetContainerEnvVarsByGroup
          nodeGroup: sqldb
        - set:
            dd_password: ${response.object.DB_USER_DATADOG}
        - env.control.AddContainerEnvVars[proc, cp]:
          vars:
            DB_USER_DATADOG: ${this.dd_password}
        - cmd[proc, cp]: |-
            ${globals.proxysql_cli} -e "DELETE FROM mysql_users WHERE username='datadog'"
            ${globals.proxysql_cli} -e "INSERT INTO mysql_users (username,password,default_hostgroup,max_connections) VALUES ('datadog','${DB_USER_DATADOG}',2,2)"
            ${globals.proxysql_cli} -e "LOAD MYSQL USERS TO RUNTIME"
            ${globals.proxysql_cli} -e "SAVE MYSQL USERS TO DISK"
            for f in /etc/datadog-agent/checks.d/jahia_local_revisions_discrepancies.py \
                     /etc/datadog-agent/conf.d/jahia_local_revisions_discrepancies.yaml; do
              if [ ! -f $f ]; then
                curl -fSsLo $f ${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/$(basename $f) || exit 1
                chown dd-agent:dd-agent $f
                if (echo $f | grep -q 'yaml'); then
                  sed "s/__PASSWORD__/${DB_USER_DATADOG}/" -i $f
                  [[ "$_ROLE" == "Browsing" ]] \
                    && mv ${f}{,-disabled} \
                    || systemctl restart datadog-agent
                fi
              fi
            done
          user: root

  configureJahiaPurgeCrons:
  - cmd [cp, proc]: |-
      file=/opt/tomcat/conf/digital-factory-config/jahia/applicationcontext-purge-jobs.xml-disabled
      if [ ! -f $file ]; then
        url=${globals.repoRootUrl}/assets/jahia/applicationcontext-purge-jobs.xml-disabled
        curl -fSsLo $file $url || exit 1
      fi
    user: tomcat
  - cmd [proc]: |-
      file=/opt/tomcat/conf/digital-factory-config/jahia/applicationcontext-purge-jobs.xml
      if [ ! -f $file ]; then
        mv $file-disabled $file
        echo "restart"
      fi
    user: tomcat
  - if ("${response.out}" == "restart"):
    - setGlobals:
        procRestartNeeded: true

  addHealthcheckMetricCustomCheck:
    - getPatTokenAndKey
    - cmd [proc, cp]: |-
        __secret__pat_token="${globals.__secret__pat_token}"
        check_conf_path="/etc/datadog-agent/conf.d/healthcheck_metric.d"
        check_conf_file="/etc/datadog-agent/conf.d/healthcheck_metric.d/healthcheck_metric.yaml"
        check_path="/etc/datadog-agent/checks.d/healthcheck_metric.py"

        if [ ! -d $check_conf_path ]; then
          mkdir -p $check_conf_path
          chown dd-agent: -R $check_conf_path
        fi

        for f in $check_conf_file $check_path; do
          if [ ! -f $f ]; then
            curl -fSsLo $f ${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/$(basename $f) || exit 1
            chown dd-agent:dd-agent $f
          fi
        done

        sed -i "s|jahia_root_token_placeholder|$__secret__pat_token|g" $check_conf_file

        systemctl restart datadog-agent
      user: root

  upgradeSam:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.2.0
        res: isHigherOrEqualThan8120
    - if (${globals.isHigherOrEqualThan8120}):
        - checkModule:
            moduleSymname: server-availability-manager
        - if ("${globals.runningVersion}" != "2.3.0"):
            - disableHaproxyHealthcheck
            - installOrUpgradeModule:
                moduleSymname: server-availability-manager
                moduleVersion: 2.3.0
                moduleGroupId: org.jahia.modules
                moduleRepository: jahia-releases
            - checkJahiaHealth
            - enableHaproxyHealthcheck

  upgradeDS:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.0.0
        res: isHigherOrEqualThan810
    - if (${globals.isHigherOrEqualThan810}):
        - checkModule:
            moduleSymname: distributed-sessions
        - if ("${globals.moduleState}" == "started" && "${globals.runningVersion}" != "3.4.0"):
            - installOrUpgradeModule:
                moduleSymname: distributed-sessions
                moduleVersion: 3.4.0
                moduleGroupId: org.jahia.modules
                moduleRepository: jahia-enterprise-releases

  moveDumpsToDifferentFolder:
    - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"DUMPS_PATH": "/var/tmp/cloud", "DUMPS_RETENTION": 30}
    - cmd [cp, proc]: |-
        tomcat_env=/opt/tomcat/conf/tomcat-env.sh
        if ! grep -qE "^\s*JAVA_OPTS\s*=.*HeapDumpPath" $tomcat_env; then
          sed -i 's;^\s*\(JAVA_OPTS\s*=.*\)"$;\1 -XX:HeapDumpPath=\${DUMPS_PATH}/heap_dumps";' $tomcat_env
          echo restart
        fi
      user: root
    - if("${response.out}" == "restart"):
        - setGlobals:
            jahiaRollingRestartNeeded: true
    - cmd [cp, proc]: |-
        script_name=thread-dump.sh
        script_path=/usr/local/bin/$script_name
        script_url=${globals.repoRootUrl}/packages/jahia/migrations/v20_assets/$script_name
        if grep -q "DUMPS_PATH" $script_path; then
          echo "The $script_name script is already up-to-date. nothing to do"
          exit 0
        fi
        curl -fSsLo $script_path $script_url || exit 1
      user: root
