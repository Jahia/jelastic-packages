---
type: update
version: 1.5.2
name: Migrate Jahia env to v18
id: migrate-jahia-env-v18

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 18

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - upgradeSam                                    # PAAS-2131
  - upgradePat                                    # PAAS-2144
  - installScreeb                                 # PAAS-2084
  - updateHAProxyConfig                           # PAAS-2071
  - setupKibanaDashboardAndCreateCustomerAccount  # PAAS-2000
  - upgradePython                                 # PAAS-2028
  - forceSessionConnectAttrsSize                  # PAAS-1944
  - setMaxConnections                             # PAAS-2156
  - fixHaproxyReload                              # PAAS-2157

  # Actions that require a restart:
  - increaseRemoveAbandonedTimeout                # PAAS-2132

  # Restart action:
  - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
    - install:
        jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  upgradeSam:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.2.0
        res: isHigherOrEqualThan8120
    - if (${globals.isHigherOrEqualThan8120}):
        - checkModule:
            moduleSymname: server-availability-manager
        - if ("${globals.runningVersion}" != "2.2.0"):
            - disableHaproxyHealthcheck
            - installOrUpgradeModule:
                moduleSymname: server-availability-manager
                moduleVersion: 2.2.0
                moduleGroupId: org.jahia.modules
                moduleRepository: jahia-releases
            - checkJahiaHealth
            - enableHaproxyHealthcheck

  upgradePat:
    - getJahiaVersion
    - isVersionBetween:
        lower: 8.1.0.0
        lower_may_equal: true
        version: ${globals.jahiaVersion}
        higher: 8.1.2.2
        higher_may_equal: true
        res: isBetween8100and8122
    - if( ${globals.isBetween8100and8122} ):
        # First, we need to upgrade jahia-dashboard to 1.6.0 (dependency)
        - checkModule:
            moduleSymname: jahia-dashboard
        - if( ${fn.compare([globals.runningVersion], 1.6.0)} < 0 ):
            - installOrUpgradeModule:
                moduleSymname: jahia-dashboard
                moduleVersion: 1.6.0
                moduleGroupId: org.jahia.modules
                moduleRepository: jahia-releases
        # Upgrade personal-api-tokens to 1.2.0
        - checkModule:
            moduleSymname: personal-api-tokens
        - if ("${globals.runningVersion}" != "1.2.0"):
            - installOrUpgradeModule:
                moduleSymname: personal-api-tokens
                moduleVersion: 1.2.0
                moduleGroupId: org.jahia.modules
                moduleRepository: jahia-releases

  increaseRemoveAbandonedTimeout:
    - cmd[proc, cp]: |-
        restart="false"
        if (! grep -qE '\s+removeAbandonedTimeout="900"$' /opt/tomcat/webapps/ROOT/META-INF/context.xml); then
          restart="true"
          sed -E 's:(^\s+removeAbandonedTimeout=).*:\1"900":' -i /opt/tomcat/webapps/ROOT/META-INF/context.xml
        fi
        echo $restart

    - if (${response.out}):
        setGlobals:
          jahiaRollingRestartNeeded: true

  installScreeb:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.0.0.0
        res: jahia8
    - if (${globals.jahia8}):
        - installModule:
            moduleSymname: jahia-user-feedbacks
            moduleVersion: 1.1.0
            moduleGroupId: org.jahia.modules
            moduleRepository: jahia-releases
            startModule: true
        - setJahiaUserFeedbacksConfig

  updateHAProxyConfig:
    cmd[bl]: |-
      sed -i 's/req.hdr(X-Forwarded-For)/req.fhdr(X-Forwarded-For)/g' /etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
      service haproxy reload
    user: root

  upgradePython:
    - cmd [bl, cp, sqldb, proc]: yum erase -y python3-3.6.8
      user: root
    - installPython:
        target: "bl, cp, sqldb, proc"
        python_major_version: 3
        python_minor_version: 8
    - cmd [bl, cp, sqldb, proc]: python3 -m pip install requests boto3 "azure==4.0.0" adal
      user: root
    - cmd [bl, cp, sqldb, proc]: |-
        tmp_file=/tmp/papi.py
        final_file=/usr/local/bin/papi.py
        curl -fLSso $tmp_file ${globals.repoRootUrl}/assets/common/papi.py || exit 1
        rm -f $final_file && mv $tmp_file $final_file
        chmod 755 $final_file
      user: root

  forceSessionConnectAttrsSize:
  # only set the global parameters, no forced reboot of nodes
    - cmd[sqldb]: |-
        conf_file=/etc/mysql/conf.d/mysql.cnf
        if ! (grep -q "^performance_schema_session_connect_attrs_size = -1" $conf_file); then
          sed -e '/performance_schema_session_connect_attrs_size/d' \
              -e '4i performance_schema_session_connect_attrs_size = -1' \
              -i $conf_file
        fi

  setMaxConnections:
    - cmd[sqldb]: |-
        conf_file=/etc/mysql/conf.d/mysql.cnf
        if ! (grep -q "^max_connections = 360" $conf_file); then
          sed -e '/max_connections/d' \
              -e '5i max_connections = 360' \
              -i $conf_file
        fi
        if [[ $(mysql -e "select @@global.max_connections" | tail -n1) != 360 ]]; then
          mysql -e "set global max_connections=360"
        fi

  fixHaproxyReload:
    - cmd[bl]: |-
        dest_file=/etc/systemd/system/haproxy.service.d/override.conf
        if [[ $(md5sum $dest_file | awk '{print $1}') != "ff7527154f4f4146193a92b9ee61b795" ]]; then
          curl -fLSso $dest_file ${globals.repoRootUrl}/assets/haproxy/haproxy_service_override || exit 1
          systemctl daemon-reload
        fi

        dest_file=/usr/local/bin/haproxy-reload.sh
        if [[ $(md5sum $dest_file | awk '{print $1}') != "ff34e97fb4a96a7cf13957393e9bb022" ]]; then
          curl -fLSso $dest_file ${globals.repoRootUrl}/assets/haproxy/haproxy-reload.sh || exit 1
        fi
      user: root
