---
type: update
version: 1.5.2
name: Migrate Jahia env to v44
id: migrate-jahia-env-v44

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 44
  ignoredModules: "server-availability-manager"

onInstall:
  ### Pre-migration actions
  - checkEnvProvides: jahia
  - if(!${settings.force}):
      - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)
  - updateSAM                                         # PAAS-2996

  # Regular actions
  - installTelnet                                     # PAAS-3055
  - captureCookiesInHaproxy                           # PAAS-3036
  - addCustomSshConfForKarafConsole                   # PAAS-3008
  - updateStorageNodesCloudlets                       # PAAS-2673
  - enablePageComposerForJahia82                      # PAAS-3012
  - fixSomeJavaSymlinks                               # PAAS-3081
  - addClassesDumps                                   # PAAS-3033
  - logThreadName                                     # PAAS-3054
  - mariaDbWithSystemD                                # PAAS-3048

  # Actions that require a restart
  - setXmxRamRatio                                    # PAAS-2584
  - restartTomcatOnOOM                                # PAAS-2842
  - yetAnotherFixDumpPath                             # PAAS-3089 (needs to be the last "restart action")

  # Actions that require a redeploy

  # Redeploy and restart actions:

  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  preChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
#    - checkDatadogBrowserTests
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
#    - checkDatadogBrowserTests:
#        postCheck: true
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  installTelnet :
    - cmd[cp, proc]: |-
        if ! (rpm -q telnet) > /dev/null; then
          yum install -y telnet
        fi

  captureCookiesInHaproxy:
    - cmd[bl]: |-
        f=/etc/haproxy/haproxy.cfg.jahia/jahia-cloud.cfg
        if ! (grep -q "capture request header" $f); then
          sed -i '/capture response header/i\ \ \ \ capture cookie "SERVERID" len 20' $f
          sed -i '/capture response header/i\ \ \ \ capture request header User-Agent len 500' $f
          systemctl reload haproxy
        fi

  addCustomSshConfForKarafConsole:
    - cmd[cp, proc]: |-
        if [ ! -f /root/karaf_openssl.cnf ]; then
          curl -fLSso /root/karaf_openssl.cnf ${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/karaf_openssl.cnf
        fi

  updateStorageNodesCloudlets:
    - if(${nodes.sqldb.first.flexibleCloudlets} == 20) && (${nodes.storage.first.flexibleCloudlets} != 6):
        # If small DB and not small storage node, we resize storage nodes to small
        - install:
          jps: "${globals.repoRootUrl}/packages/common/manage-cloudlets.yml"
          settings:
            cloudlets: 6
            nodeGroup: storage
            forceRestart: false

  enablePageComposerForJahia82:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.2.0.0
        res: isHigherOrEqual8200
    - if( ${globals.isHigherOrEqual8200} ):
        - callProvisioningAPI:
            target: proc
            payload:
              - editConfiguration: "org.jahia.modules.jcontent"
                properties:
                  hideLegacyPageComposer: "false"
                  showPageBuilder: "true"

  addClassesDumps:
    - cmd [cp, proc]: |-
        md5="fa29e1062411c485585b3a6cdb7a9f04"
        script_name=thread-dump.sh
        script_path=/usr/local/bin/$script_name
        if ! (echo "$md5 $script_path" | md5sum --status -c); then
          curl -fSsLo $script_path ${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/$script_name || exit 1
          chmod +x $script_path
        fi
      user: root

  setXmxRamRatio:
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: proc
    - if ("${nodes.proc.first.flexibleCloudlets}" == "80") && ("${response.object.XMX}" != "6144M"):
        setXmx:
          Xmx: 6144M
          nodeGroup: proc
    - elif ("${nodes.proc.first.flexibleCloudlets}" == "64") && ("${response.object.XMX}" != "4915M"):
        setXmx:
          Xmx: 4915M
          nodeGroup: proc
    - elif ("${nodes.proc.first.flexibleCloudlets}" == "40") && ("${response.object.XMX}" != "3072M"):
        setXmx:
          Xmx: 3072M
          nodeGroup: proc

    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: cp
    - if ("${nodes.cp.first.flexibleCloudlets}" == "80") && ("${response.object.XMX}" != "6144M"):
        setXmx:
          Xmx: 6144M
          nodeGroup: cp
    - elif ("${nodes.cp.first.flexibleCloudlets}" == "64") && ("${response.object.XMX}" != "4915M"):
        setXmx:
          Xmx: 4915M
          nodeGroup: cp
    - elif ("${nodes.cp.first.flexibleCloudlets}" == "40") && ("${response.object.XMX}" != "3072M"):
        setXmx:
          Xmx: 3072M
          nodeGroup: cp

  setXmx:
    - api: env.control.AddContainerEnvVars
      nodeGroup: ${this.nodeGroup}
      vars: {"XMX": "${this.Xmx}"}
    - setGlobals:
        jahiaRollingRestartNeeded: true

  fixSomeJavaSymlinks:
    - cmd[cp, proc]: |-
        if [[ ${JAVA_VERSION%%.*} == 17 ]]; then
          alternatives --add-follower java /usr/lib/jvm/jdk-17-oracle-x64/bin/java /usr/bin/jcmd jcmd /usr/java/zulu-17.0.10/bin/jcmd
          alternatives --add-follower java /usr/java/graalvm-jdk-17.0.9+11.1/bin/java /usr/bin/jcmd jcmd /usr/java/graalvm-jdk-17.0.9+11.1/bin/jcmd
          alternatives --add-follower java /usr/lib/jvm/jdk-17-oracle-x64/bin/java /usr/bin/jstack jstack /usr/java/zulu-17.0.10/bin/jstack
          alternatives --add-follower java /usr/java/graalvm-jdk-17.0.9+11.1/bin/java /usr/bin/jstack jstack /usr/java/graalvm-jdk-17.0.9+11.1/bin/jstack
        else
          echo "no need to update java alternatives configuration here"
        fi

  restartTomcatOnOOM:
    - cmd[proc, cp]: |-
        f=/opt/tomcat/conf/tomcat-env.sh
        if ! grep -qE "^\s*JAVA_OPTS\s*=.*ExitOnOutOfMemoryError" $f; then
          sed -i '/-XX:+ExitOnOutOfMemoryError/d' /opt/tomcat/conf/variables.conf
          sed -i 's/HeapDumpOnOutOfMemoryError/& -XX:+ExitOnOutOfMemoryError/' $f
          echo restart
        fi
    - if("${response.out}" == "restart"):
        - setGlobals:
            jahiaRollingRestartNeeded: true

  logThreadName:
    - cmd[proc, cp]: |-
        conf=/opt/tomcat/webapps/ROOT/WEB-INF/etc/config/log4j2.xml
        if ! grep -qF '[%t][%c{1}]' $conf; then
          sed -i 's|\[%c{1}\]|[%t][%c{1}]|' $conf
        fi

  fixDumpPathByNode:
    - cmd[${this}]: |-
        file=/opt/tomcat/bin/setenv.sh
        tempfile=$(mktemp)
        # fix the first typo if any and remove the duplication if any
        sed 's/DUMP_PATH/DUMPS_PATH/g' $file > $tempfile
        if (cmp --silent $file $tempfile); then
          echo "ok"
          rm $tempfile
        else
          echo "nok"
          chown tomcat:tomcat $tempfile
          chmod +x $tempfile
          mv $tempfile $file
        fi
    - if ("${response.out}" == "nok"):
        - if (globals.toRestart.length == 0):
            - script: |-
                let d = [ "${this}" ]
                return {"result": 0, onAfterReturn: {setGlobals: {toRestart: d}}}
        - else:
            - script: |-
                let d = ${globals.toRestart.toJSON()}
                d.push("${this}")
                return {"result": 0, onAfterReturn: {setGlobals: {toRestart: d}}}

  yetAnotherFixDumpPath:
    - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
        # this is a no brainer case
        - cmd[proc, cp]: |-
            sed -i 's/DUMP_PATH/DUMPS_PATH/g' /opt/tomcat/bin/setenv.sh
    - else:
        - setGlobals:
            toRestart: []
        # we fix/restart node only if required
        - fixDumpPathByNode: ${nodes.proc.first.id}
        - forEach(nodes.cp):
            - fixDumpPathByNode: ${@i.id}
        - if(globals.toRestart.length > 0):
            - log: "${globals.toRestart.length} node(s) have to be restarted"
            - dumpModules:
                operation: restart
                checkVersion: true
            - forEach(globals.toRestart):
                - api: environment.control.RestartNodeById
                  nodeId: ${@i}
            - checkModulesAfterOperation:
                operation: restart
                checkVersion: true
        - else:
            - log: "no DUMP_PATH typo here"


  mariaDbWithSystemD:
    - cmd [sqldb]: |-
        line='Cmnd_Alias JAHIA_MYSQL_SERVICE = /sbin/service mysqld *, /sbin/service mysql *, /usr/bin/systemctl * mysqld, /usr/bin/systemctl * mysql, /usr/bin/systemctl * mysqld.service, /usr/bin/systemctl * mysql.service, /sbin/service mariadb *, /usr/bin/systemctl * mariadb, /usr/bin/systemctl * mariadb.service'
        sudo_file=/etc/sudoers.d/jahia-rules

        if [[ ! -x /usr/bin/mariabackup ]]; then
          yum install -y MariaDB-backup
        fi
        if [[ ! -x /usr/bin/qpress ]]; then
          yum install -y qpress
        fi
        if [[ ! -x /usr/bin/socat ]]; then
          yum install -y socat
        fi

        rm -f /etc/init.d/mysql

        if ! grep -qE "Cmnd_Alias JAHIA_MYSQL_SERVICE.*systemctl" $sudo_file; then
          sed -i $sudo_file \
              -e "/Cmnd_Alias JAHIA_MYSQL/d" \
              -e "/Cmnd_Alias JAHIA_TOMCAT_SERVICE/a $line"
        fi

  updateSAM:
    - getJahiaVersion
    - isVersionStrictlyLower:
        a: ${globals.jahiaVersion}
        b: 8.1.5.2
        res: isBelow8152
    - if (${globals.isBelow8152}):
        setGlobals:
          requiredSamVersion: 2.7.0
    - isVersionBetween:
        lower: 8.1.5.2
        lower_may_equal: true
        version: ${globals.jahiaVersion}
        higher: 8.2.0.0
        higher_may_equal: false
        res: isBetween8152and820
    - if (${globals.isBetween8152and820}):
        setGlobals:
          requiredSamVersion: 2.8.1
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.2.0.0
        res: jahia82plus
    - if (${globals.jahia82plus}):
        setGlobals:
          requiredSamVersion: 3.2.1
    - checkModule:
        moduleSymname: server-availability-manager
    - if ("${globals.runningVersion}" != "${globals.requiredSamVersion}"):
        - disableHaproxyHealthcheck
        - installOrUpgradeModules:
            modules: server-availability-manager/${globals.requiredSamVersion}
        # Probe is present in SAM 3.2+ only
        - if (${globals.jahia82plus}):
            - callProvisioningAPI:
                target: proc
                payload:
                  - editConfiguration:  "org.jahia.modules.sam.healthcheck.ProbesRegistry"
                    properties:
                      probes.RenderingChain.severity: "HIGH"
        - checkJahiaHealth: "cp, proc"
        - enableHaproxyHealthcheck

settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: Disable checks
      tooltip: Disable post and pre checks
    - type: toggle
      name: force
      caption: Force migration
      tooltip: Apply the migration even if env_version is up-to-date
