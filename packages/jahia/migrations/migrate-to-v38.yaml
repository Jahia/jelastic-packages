---
type: update
version: 1.5.2
name: Migrate Jahia env to v38
id: migrate-jahia-env-v38

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 38
  ignoredModules: ""

onInstall:
  ### Pre-migration actions
  - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)
  # (None)

  # Regular actions
  - fixDatadogProductTag                             # PAAS-2691
  - forceDatadogSite                                 # PAAS-2742
  - updateSendLogsCron                               # PAAS-2739
  - getLogEventScript: bl, proc, cp, sqldb, storage  # PAAS-2746 (action from mixins/common.yml)
  - updateCurl                                       # PAAS-2746
  - addConsumptionMetricsCheck                       # PAAS-2658, PAAS-2677, PAAS-2678, PAAS-2688
  - addTomcatTempCleanup                             # PAAS-2392
  - keepKarafConfsHistory                            # PAAS-2801
  - fixProxySQLServiceOverrideConf                   # PAAS-2819

  # Actions that require a restart
  - disableAPM                                      # PAAS-2799

  # Actions that require a redeploy
  # (None)

  # Redeploy and restart actions:
  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  preChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  fixDatadogProductTag:
    cmd[bl, cp, proc, sqldb]: |-
      confFile="/etc/datadog-agent/datadog.yaml"
      tagFile="/usr/local/bin/set_dd_tags.sh"
      if ! (grep -q "product:jahia" $confFile); then
        sed -i 's/^ - product:.*/ - product:jahia/' $confFile
        sed -i '/product:/s|.*|echo " - product:$(awk '\''$2~/^product/ {split($2,a,":"); print a[2]}'\'' "$ddconffile")"|' $tagFile
        systemctl restart datadog-agent
      fi

  forceDatadogSite:
    cmd[bl, cp, proc, sqldb]: |-
      tagFile="/usr/local/bin/set_dd_tags.sh"
      if ! (grep -q "DD_SITE" $tagFile); then
        sed '/logs_enabled:/i echo "site: ${DD_SITE}"' -i $tagFile
      fi

  updateSendLogsCron:
    cmd[bl, cp, proc, sqldb, storage]: |-
      file_md5=f835639b2aa6af855ce38a1ead7790aa
      file_path=/usr/local/bin/rclone-logs.sh
      if ! (echo "$file_md5 $file_path" | md5sum --status -c); then
        curl -fLSso $file_path ${globals.repoRootUrl}/assets/common/rclone-logs.sh || exit 1
        chmod +x $file_path
      fi

  addESCredentialsAsEnvvar:
    - getPatTokenAndKey
    - cmd [proc]: |-
        __secret__API_TOKEN="${globals.__secret__pat_token}"
        response=$(curl -XPOST -sfL \
          http://localhost:8080/modules/graphql \
          -H "Authorization: APIToken $__secret__API_TOKEN" \
          -H "Content-Type: application/json" \
          -H 'Origin: http://localhost:8080' \
          -d '{"query": "{ jcr { nodeByPath(path: \"/settings/databaseConnector/jahia-cloud_augmented-search\") { property(name: \"dc:password\") { decryptedValue } } } }"}')
        if [ $? -ne 0 ]; then
          echo "The curl command returned a non-zero code, aborting" >&2
          exit 1
        fi
        password=$(echo $response | jq -r .data.jcr.nodeByPath.property.decryptedValue)
        if [ "$password" = "null" ]; then
          echo "The GraphQL query did not return the ES password, aborting" >&2
          exit 1
        fi
        echo $password
    - set:
        esPassword: ${response.out}
    - getPapiInfoAll
    - cmd [proc]: |-
        set -euo pipefail
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"
        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")
        es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint | sed 's/https:\/\/\(.*\):.*/\1/g')
        echo $es_endpoint
    - set:
        esHostname: ${response.out}
    - if (env.region == "aws-loim"):
        set:
          esSsl: 'false'
    - else:
        set:
          esSsl: 'true'
    - env.control.AddContainerEnvVars [cp, proc]:
      vars:
        JAHIA_ELASTICSEARCH_ADDRESSES: ${this.esHostname}
        JAHIA_ELASTICSEARCH_USERNAME: ${env.envName}
        JAHIA_ELASTICSEARCH_PASSWORD: ${this.esPassword}
        JAHIA_ELASTICSEARCH_SSL_ENABLE: ${this.esSsl}

  addConsumptionMetricsCheck:
    - isAugSearchEnabled
    - if (${globals.isAugSearchEnabled}):
        - addESCredentialsAsEnvvar
    - getPatTokenAndKey
    - cmd[cp, proc]: |-
        __secret__pat_token="${globals.__secret__pat_token}"
        dd_dir=/etc/datadog-agent
        dd_checks_dir=$dd_dir/checks.d
        dd_conf_dir=$dd_dir/conf.d
        as_conf_dir=$dd_conf_dir/augmented_search.d
        healthcheck_conf_dir=$dd_conf_dir/healthcheck_metric.d
        custom_metrics_conf_dir=$dd_conf_dir/jahia_custom_metrics.d
        jahia_root_token_file=$dd_conf_dir/healthcheck_metric.d/jahia_root_token

        [ -d $as_conf_dir ] || mkdir $as_conf_dir
        [ -d $custom_metrics_conf_dir ] || mkdir $custom_metrics_conf_dir

        if ! [ -f $jahia_root_token_file ]; then
          echo -n $__secret__pat_token > $jahia_root_token_file
          chown dd-agent: $jahia_root_token_file
          chmod 640 $jahia_root_token_file
        fi

        [ -f $as_conf_dir/jahia_root_token ] || ln -s $jahia_root_token_file $as_conf_dir/jahia_root_token
        [ -f $custom_metrics_conf_dir/jahia_root_token ] || ln -s $jahia_root_token_file $custom_metrics_conf_dir/jahia_root_token

        for check in augmented_search healthcheck_metric jahia_custom_metrics; do
          curl -fLSso $dd_checks_dir/$check.py ${globals.repoRootUrl}/packages/jahia/migrations/v38_assets/$check.py || exit 1
          curl -fLSso $dd_conf_dir/$check.d/$check.yaml ${globals.repoRootUrl}/packages/jahia/migrations/v38_assets/$check.yaml || exit 1
        done

        [ -f $dd_conf_dir/augmented_search.yaml-disabled ] && mv $as_conf_dir/augmented_search.yaml $as_conf_dir/augmented_search.yaml-disabled
        rm -f $dd_conf_dir/augmented_search.yaml $dd_conf_dir/augmented_search.yaml-disabled

        curl -fLSso $custom_metrics_conf_dir/jahia_privileged_users_count.groovy ${globals.repoRootUrl}/packages/jahia/migrations/v38_assets/jahia_privileged_users_count.groovy || exit 1
        if [[ "${_ROLE}" != "Processing" ]]; then
          [ -f $custom_metrics_conf_dir/jahia_custom_metrics.yaml ] && mv $custom_metrics_conf_dir/jahia_custom_metrics.yaml $custom_metrics_conf_dir/jahia_custom_metrics.yaml-disabled
        fi

        chown dd-agent: -R $dd_checks_dir $as_conf_dir $healthcheck_conf_dir $custom_metrics_conf_dir
        systemctl restart datadog-agent
    - cmd [storage]: |-
        dd_dir=/etc/datadog-agent
        dd_checks_dir=$dd_dir/checks.d
        check_name=storage_jahia_custom_metrics
        dd_conf_dir=$dd_dir/conf.d/${check_name}.d
        sudoers=/etc/sudoers.d/jahia-rules

        grep -q JAHIA_DD_AGENT_CHECK $sudoers || \
          sed -e "/Cmnd_Alias JAHIA_MYSQL_SERVICE/a Cmnd_Alias JAHIA_DD_AGENT_CHECK = \/usr\/bin\/du" \
              -e "/mysql ALL/a dd-agent ALL=NOPASSWD: JAHIA_DD_AGENT_CHECK" \
              -i $sudoers

        [ -d $dd_conf_dir ] || mkdir $dd_conf_dir
        curl -fLSso $dd_checks_dir/${check_name}.py ${globals.repoRootUrl}/assets/storage/${check_name}.py || exit 1
        curl -fLSso $dd_conf_dir/${check_name}.yaml-disabled ${globals.repoRootUrl}/assets/storage/${check_name}.yaml || exit 1
        chown dd-agent: -R $dd_checks_dir $dd_conf_dir
    - cmd [${nodes.storage.first.id}]: |-
        conf_file=/etc/datadog-agent/conf.d/storage_jahia_custom_metrics.d/storage_jahia_custom_metrics.yaml
        [ -f $conf_file ] || mv ${conf_file}-disabled $conf_file
        systemctl restart datadog-agent

  addTomcatTempCleanup:
    cmd[cp, proc]: |-
      filePath=/etc/systemd/system/tomcat_tmp_cleanup
      if ! [ -f $filePath.service ]; then
        curl -fLSso $filePath.service ${globals.repoRootUrl}/packages/jahia/migrations/v38_assets/tomcat_tmp_cleanup.service || exit 1
        curl -fLSso $filePath.timer ${globals.repoRootUrl}/packages/jahia/migrations/v38_assets/tomcat_tmp_cleanup.timer || exit 1
        systemctl enable --now tomcat_tmp_cleanup.timer
      fi

  # We overwrite the checkJahiaDatadogCustomChecks action because we update
  # augmentedsearch's custom check and move the conf file to a different folder.
  # It should be deleted for migration-v39
  checkJahiaDatadogCustomChecks:
    - if (nodes.sqldb.length == 3):
        - checkDatadogAgentCheck:
            target: ${this}
            checkName: proxysql_backend_missing
        - checkDatadogAgentCheck:
            target: ${this}
            checkName: proxysql_connections_discrepancies
    - else:
        - checkDatadogAgentCheck:
            target: ${this}
            checkName: proxysql
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: jahia_node_not_in_haproxy_pool
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: strongswan_connections_status
    - cmd[${this}]: |-
        if find /etc/datadog-agent/conf.d -type f -name "augmented_search.yaml-disabled" | grep -q augmented_search.yaml-disabled; then
          echo "disabled"
        fi
    - if ("${response.out}" != "disabled"):
      - checkDatadogAgentCheck:
          target: ${this}
          checkName: augmented_search

  updateCurl:
    - cmd[*]: |-
        if [[ $(curl --version | awk '$1=="curl" {print $2}') != "8.2.1" ]]; then
          CURL_VERSION=8.2.1-4.0.cf.rhel7.x86_64
          curl -fLSso /root/curl-${CURL_VERSION}.rpm "http://paas-rpms.s3.amazonaws.com/curl-${CURL_VERSION}.rpm"
          curl -fLSso /root/libcurl-${CURL_VERSION}.rpm "http://paas-rpms.s3.amazonaws.com/libcurl-${CURL_VERSION}.rpm"
          yum -y localinstall /root/curl-${CURL_VERSION}.rpm /root/libcurl-${CURL_VERSION}.rpm
          rm -f /root/*.rpm
        fi

  disableAPM:
    # Update default DATADOG_APM_ENABLED value to "false"
    - cmd[cp, proc]: |-
        sed 's/DATADOG_APM_ENABLED:-true/DATADOG_APM_ENABLED:-false/' -i /usr/local/bin/set_dd_tags.sh
    # disable APM if enabled
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: proc
    - if ("${response.object.DATADOG_APM_ENABLED}" == "true"):
        - env.control.AddContainerEnvVars[cp, proc]:
            vars: {"DATADOG_APM_ENABLED": "false"}
        - setGlobals:
            jahiaRollingRestartNeeded: true

  keepKarafConfsHistory:
    - cmd[cp, proc]: |-
        if ! (grep -q karaf_confs_history /etc/jelastic/redeploy.conf); then
          echo "/var/tmp/cloud/karaf_confs_history" >> /etc/jelastic/redeploy.conf
        fi

  fixProxySQLServiceOverrideConf:
    - cmd [cp, proc]: |-
        sed "s;ExecStartPost=touch;ExecStartPost=/usr/bin/touch;" -i /etc/systemd/system/proxysql.service.d/override.conf
        systemctl daemon-reload

settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: disable all checks
