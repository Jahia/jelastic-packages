---
type: update
version: 1.5.2
name: Migrate Jahia env to v41
id: migrate-jahia-env-v41

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 41
  ignoredModules: "app-shell,distributed-sessions"

onInstall:
  ### Pre-migration actions
  - checkEnvProvides: jahia
  - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)
  - updateAppshell            # PAAS-2939
  - updateDistributedSession  # PAAS-2972

  # Regular actions
  - removeOldModuleVersions           # PAAS-2926
  - updateJahiaOverride               # PAAS-2941
  - updateJahiaPrivilegedUsersGroovy  # PAAS-2906

  # Actions that require a restart
  - switchDatastoreGC2Timer   # PAAS-2905 (require proc's tomcat restart)

  # Redeploy and restart actions:
  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  preChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecksOld: bl # !!!! Use the new check for next release !!!!
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - checkDatadogBrowserTests
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecksOld: bl # !!!! Use the new check for next release !!!!
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - checkDatadogBrowserTests:
        postCheck: true
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  checkHaproxyDatadogCustomChecksOld:
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: haproxy
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: haproxy_one_remaining_browsing
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: process

  removeOldModuleVersions:
    - getJahiaVersion
    - isVersionBetween:
        version: ${globals.jahiaVersion}
        higher: 8.1.7.0
        higher_may_equal: false
        lower: 8.1.3.0
        lower_may_equal: true
        res: concernedVersion
    - if (${globals.concernedVersion}):
        - if ("${globals.jahiaVersion}" == "8.1.3.0"):
            set:
              version: 8.1.3.2
        - elif ("${globals.jahiaVersion}" == "8.1.5.0"):
            set:
              version: 8.1.5.2
        - elif ("${globals.jahiaVersion}" == "8.1.6.0"):
            set:
              version: 8.1.6.1
        - else:
            return:
              type: error
              message: "Error, unknown jahia version ${globals.jahiaVersion}"
        - set:
            nodes:
              - cp
              - proc
        - forEach(${this.nodes}):
          - enableKarafLogin: ${@i}
          - cmd[${@i}]: |-
              for module in "provisioning" "jcrcommands"; do
                current_versions=$(${globals.karafConsole} cluster:bundle-list -s default |grep $module | awk '{print $10 }')
                if ! (echo $current_versions | grep -q ${this.version}); then
                  echo "$module/${this.version} is missing and will be installed"
                  ${globals.karafConsole} bundle:install -l 30 mvn:org.jahia.bundles/org.jahia.bundles.$module/${this.version}
                  ${globals.karafConsole} bundle:start org.jahia.bundles.$module/${this.version}
                fi
                if (echo $current_versions | grep -q ${globals.jahiaVersion}); then
                  echo "$module/${globals.jahiaVersion} is present and will be unstalled."
                  ${globals.karafConsole} bundle:uninstall org.jahia.bundles.$module/${globals.jahiaVersion}
                fi
              done
          - disableKarafLogin: ${@i}

  switchDatastoreGC2Timer:
    - cmd[proc]: |-
        custom_file=/opt/tomcat/conf/digital-factory-config/jahia/applicationcontext-custom.xml
        is_there=$(xmlstarlet sel -N x=http://www.springframework.org/schema/beans \
                    -t -v '//x:bean[@id="DataStoreGarbageCollectorJob"]/x:property[@name="disabled"]/@value' \
                    $custom_file)
        if [[ $is_there == true ]]; then
          echo "true"
        else
          echo "false"
        fi
    - if("${response.out}" == "false"):
        - switchDatastoreGarbageCollectionToTimer
        - api: environment.control.RestartNodeById
          nodeId: ${nodes.proc.first.id}
        - cmd[proc]: |-
            systemctl start run_datastore_gc

  updateJahiaOverride:
    - cmd[cp, proc]: |-
        file_md5=5953b707b79c45351883609d35481bba
        file_path=/var/lib/jelastic/customizations/jahia_override.lib
        file_url=${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/jahia_override.lib
        if ! (echo "$file_md5 $file_path" | md5sum --status -c); then
          curl -fLSso $file_path $file_url || exit 1
          chmod +x $file_path
        fi

  updateAppshell:
    - getJahiaVersion
    - isVersionBetween:
            lower: 8.1.3.0
            lower_may_equal: true
            version: ${globals.jahiaVersion}
            higher: 8.1.6.0
            higher_may_equal: true
            res: isBetween813and816
    - if (${globals.isBetween813and816}):
        installOrUpgradeModules:
          modules: app-shell/2.9.0

  updateJahiaPrivilegedUsersGroovy:
    - cmd[cp, proc]: |-
        file_md5=0cfa80bdf3083adc0ff93628b5bd1bf4
        file_path=/etc/datadog-agent/conf.d/jahia_custom_metrics.d/jahia_privileged_users_count.groovy
        file_url=${globals.repoRootUrl}/packages/jahia/migrations/v${globals.version}_assets/jahia_privileged_users_count.groovy
        if ! (echo "$file_md5 $file_path" | md5sum --status -c); then
          curl --retry 6 -fLSso $file_path $file_url || exit 1
          chown dd-agent: $file_path
          [[ $_ROLE == Processing ]] && systemctl restart datadog-agent || true
        fi

  updateDistributedSession:
    - getJahiaVersion
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.5.0
        res: isHigherOrEqualThan815
    - checkModule:
        moduleSymname: distributed-sessions
    - if (${globals.isHigherOrEqualThan815}):
        - if ("${globals.moduleState}" == "started" && "${globals.runningVersion}" != "3.5.0"):
            - installOrUpgradeModules:
                modules: distributed-sessions/3.5.0
    - else:
        if ("${globals.moduleState}" == "started" && "${globals.runningVersion}" != "3.4.1"):
          - installOrUpgradeModules:
              modules: distributed-sessions/3.4.1

settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: disable all checks
