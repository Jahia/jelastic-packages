---
type: update
version: 1.5.2
name: Migrate Jahia env to v41
id: migrate-jahia-env-v41

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 41
  ignoredModules: ""

onInstall:
  ### Pre-migration actions
  - checkEnvProvides: jahia
  - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)
  # (None)

  # Regular actions

  # Actions that require a restart
  - switchDatastoreGC2Timer   # PAAS-2905 (require proc's tomcat restart)

  # Actions that require a redeploy
  - upgradeHaproxy            # PAAS-2860
  - removeOldModuleVersions   # PAAS-2926

  # Redeploy and restart actions:
  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  preChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  upgradeHaproxy:
    - setGlobals:
        haproxyVersion: "2.8.9-almalinux-9"
    - foreach (nodes.bl):
      - if ("${nodes.bl.first.version}" != "${globals.haproxyVersion}"):
        - api: environment.control.RedeployContainerById
          nodeId: ${@i.id}
          tag: ${globals.haproxyVersion}
          useExistingVolumes: true
          skipReinstall: false
          envName: ${env.envName}
      - cmd [${@i.id}]: systemctl restart haproxy
    - environment.nodegroup.ApplyData [bl]:
      data:
        productName: haproxy
        productVersion: ${globals.haproxyVersion}

  removeOldModuleVersions:
    - getJahiaVersion
    - isVersionBetween:
        version: ${globals.jahiaVersion}
        higher: 8.1.7.0
        higher_may_equal: false
        lower: 8.1.3.0
        lower_may_equal: true
        res: concernedVersion
    - if (${globals.concernedVersion}):
        - if ("${globals.jahiaVersion}" == "8.1.3.0"):
            set:
              version: 8.1.3.2
        - elif ("${globals.jahiaVersion}" == "8.1.5.0"):
            set:
              version: 8.1.5.2
        - elif ("${globals.jahiaVersion}" == "8.1.6.0"):
            set:
              version: 8.1.6.1
        - else:
            return:
              type: error
              message: "Error, unknown jahia version ${globals.jahiaVersion}"

        - enableKarafLogin: "cp, proc"
        - cmd[cp, proc]: |-
            for module in "provisioning" "jcrcommands"; do
              current_versions=$(${globals.karafConsole} cluster:bundle-list -s default |grep $module | awk '{print $10 }')
              if ! (echo $current_versions | grep -q ${this.version}); then
                echo "$module/${this.version} is missing and will be installed"
                ${globals.karafConsole} bundle:install -l 30 mvn:org.jahia.bundles/org.jahia.bundles.$module/${this.version}
                ${globals.karafConsole} bundle:start org.jahia.bundles.$module/${this.version}
              fi
              if (echo $current_versions | grep -q ${globals.jahiaVersion}); then
                echo "$module/${globals.jahiaVersion} is present and will be unstalled."
                ${globals.karafConsole} bundle:uninstall org.jahia.bundles.$module/${globals.jahiaVersion}
              fi
            done
        - disableKarafLogin: "cp, proc"

  switchDatastoreGC2Timer:
    - cmd[proc]: |-
        custom_file=/opt/tomcat/conf/digital-factory-config/jahia/applicationcontext-custom.xml
        is_there=$(xmlstarlet sel -N x=http://www.springframework.org/schema/beans \
                    -t -v '//x:bean[@id="DataStoreGarbageCollectorJob"]/x:property[@name="disabled"]/@value' \
                    $custom_file)
        if [[ $is_there == true ]]; then
          echo "true"
        else
          echo "false"
        fi
    - if("${response.out}" == "false"):
        - switchDatastoreGarbageCollectionToTimer
        - api: environment.control.RestartNodeById
          nodeId: ${nodes.proc.first.id}


settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: disable all checks
