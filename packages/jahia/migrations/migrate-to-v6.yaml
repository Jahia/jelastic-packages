---
type: update
version: 1.5.2
name: Migrate Jahia env to v6
id: migrate-jahia-env-v6

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 6

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - eventsUpdate
  ### End Pre-checks

  - addHaproxyOneRemainingBrowsingScript # PAAS-1598
  - updateJcustomerApiKey                # PAAS-1557
  - switchSSTtoMariabackup               # PAAS-1504
  - removeStrongSwanServiceFromRedeploy  # PAAS-1587
  - datadogCustomCheckForJahiaNodes      # PAAS-1596
  - setJahiaTcpBindAddress               # PAAS-1580
  - installIPSecDNSSplit                 # PAAS-1592

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  addHaproxyOneRemainingBrowsingScript:
    - setGlobalRepoRootUrl
    - cmd [bl]: |-
        script_name="haproxy_one_remaining_browsing.py"
        script_path="/etc/datadog-agent/checks.d"
        if [ "194de187655afaa01c0226c99f8241ad" = "$(md5sum $script_path/$script_name | awk '{print $1}')" ]; then
          echo "haproxy_one_remaining_browsing.py script up-to-date, nothing to do"
          exit 0
        fi
        curl -fsSL -o $script_path/$script_name ${globals.repoRootUrl}/assets/haproxy/$script_name || exit 1
        systemctl restart datadog-agent || exit 1
      user: root

  updateJcustomerApiKey:
    - script: |
        const envName = "${env.envName}"
        envLinked = jelastic.env.control.GetNodeGroups(envName, session).object.filter(function (object) {
                             return object.name == "cp";
                          }).pop().envLink;
        return {'result': 0, 'out': envLinked};
    - if ("${response.out}" != "null" & "${response.out}" != ""):
        - setGlobals:
            envLinked: ${response.out}
        - getJcustomerKey:
            jcustomerEnv: ${globals.envLinked}
        - cmd[cp,proc]: |-
            CONF_FILENAME=org.jahia.modules.jexperience.settings-global.cfg
            CONF_PATH="/data/digital-factory-data/karaf/etc/$CONF_FILENAME"
            jcustomer_key=${globals.jcustomerKey}
            sed -i -r -e "s;[ #]*(\w+\.jCustomerKey\s*=\s*).*;\1${jcustomer_key};" $CONF_PATH
    - cmd[cp,proc]: rm -rf /root/.secrets
      user: root

  switchSSTtoMariabackup:
    - setGlobalRepoRootUrl
    - cmd [sqldb]: |-
        mariadb_repo_md5="8a433d1bb35b8a99c00f6c09d4b2424a"
        if [ "$mariadb_repo_md5" = "$(md5sum /etc/yum.repos.d/MariaDB.repo | awk '{print $1}')" ]; then
          exit 0
        fi
        find /etc/yum.repos.d -maxdepth 1 -iname "*mariadb*" -delete
        curl -fsSL ${globals.repoRootUrl}/packages/jahia/migrations/v6_assets/MariaDB.repo > /etc/yum.repos.d/MariaDB.repo
      user: root
    - cmd [sqldb]: |-
        if ! rpm --quiet -q percona-release; then
          yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
        fi
        if [[ ! -x /usr/bin/mariabackup ]]; then
          yum install -y MariaDB-backup
        fi
        if [[ ! -x /usr/bin/qpress ]]; then
          yum install -y qpress
        fi
        if [[ ! -x /usr/bin/socat ]]; then
          yum install -y socat
        fi
      user: root
    - cmd [sqldb]: |-
        init_mysql="/etc/init.d/mysql"
        redeploy_conf="/etc/jelastic/redeploy.conf"
        if ! grep -s MariaDB-backup $init_mysql; then
          curl -fsSL ${globals.repoRootUrl}/assets/database/mysql-init.d > $init_mysql || exit 1
        fi
        if ! grep -s "$init_mysql" $redeploy_conf; then
          echo "$init_mysql" >> $redeploy_conf
        fi
      user: root
    - cmd [sqldb]: |-
        if ! grep -s wsrep_sst_auth /etc/mysql/conf.d/mysql.cnf; then
          printf "\nwsrep_sst_auth = mysql:\nwsrep_sst_method = mariabackup" >> /etc/mysql/conf.d/mysql.cnf
          mysql -e "set global wsrep_sst_auth = 'mysql:'; set global wsrep_sst_method = 'mariabackup';"
        fi

  removeStrongSwanServiceFromRedeploy:
    - cmd[cp, proc]: |-
        sed -i '/strongswan.service/d' /etc/jelastic/redeploy.conf
      user: root

  datadogCustomCheckForJahiaNodes:
    cmd[cp, proc]: |-
      CUSTOM_CHECK_SCRIPT=/etc/datadog-agent/checks.d/jahia_node_not_in_haproxy_pool.py
      wget -qO $CUSTOM_CHECK_SCRIPT ${baseUrl}/v6_assets/jahia_node_not_in_haproxy_pool.py
      chown dd-agent:dd-agent $CUSTOM_CHECK_SCRIPT
      systemctl restart datadog-agent
    user: root

  setJahiaTcpBindAddress:
    cmd[cp, proc]: |-
      if [ "$(grep jahia_cfg_cluster_tcp_bindAddress /opt/tomcat/conf/tomcat-env.sh)" == "" ]; then
        sed -i '/TOMCAT_USER=/ a jahia_cfg_cluster_tcp_bindAddress=$(hostname -i)' /opt/tomcat/conf/tomcat-env.sh
      fi

  installIPSecDNSSplit:
    - cmd[cp, proc]: |-
        if [ ! -x /usr/sbin/dnsmasq ]; then
          yum install -y dnsmasq
          systemctl disable dnsmasq
        fi
        f_resolve="/etc/strongswan/strongswan.d/charon/resolve.conf"
        md5_resolve="2bc40fdfbf39ef56a41348b5fe0e36ab"
        if ! (echo "$md5_resolve $f_resolve" | md5sum -c --status); then
          curl -fsSL ${globals.repoRootUrl}/packages/jahia/migrations/v6_assets/charon_resolve.conf > $f_resolve || exit 1
        fi
        f_updown="/usr/local/bin/ipsec_updown.sh"
        if [ ! -x $f_updown ]; then
          curl -fsSL ${globals.repoRootUrl}/packages/jahia/migrations/v6_assets/strongswan_updown_script.sh > $f_updown || exit 1
          chmod +x /usr/local/bin/ipsec_updown.sh
        fi
        if ! (grep -q "$f_updown" /etc/strongswan/ipsec.conf); then
          l1='\  # script to start when connection up/down\n'
          l2='  leftupdown=/usr/local/bin/ipsec_updown.sh\n'
          sed -i "/^include/i$l1$l2" /etc/strongswan/ipsec.conf
        fi
      user: root
