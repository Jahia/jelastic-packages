---
type: update
version: 1.5.2
name: Migrate Jahia env to v45
id: migrate-jahia-env-v45

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 45
  ignoredModules: "jahia-ui-root,jahia-page-composer,jahia-dashboard,jahia-administration,content-editor,jcontent,app-shell,graphql-dxm-provider"

onInstall:
  ### Pre-migration actions
  - checkEnvProvides: jahia
  - if(!${settings.force}):
      - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)

  # Regular actions
  - updateModules                                 # PAAS-3105
  # Actions that require a restart

  # Actions that require a redeploy
  - upgradeHaproxy                                # PAAS-3119

  # Redeploy and restart actions:
  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  preChecks:
    - checkJahiaHealth:
        target: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth:
        target: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  upgradeHaproxy:
    - setGlobals:
        haproxyVersion: "2.8.11-almalinux-9"
    - foreach (nodes.bl):
      - if ("${@i.version}" != "${globals.haproxyVersion}"):
        - api: environment.control.RedeployContainerById
          nodeId: ${@i.id}
          tag: ${globals.haproxyVersion}
          useExistingVolumes: true
          skipReinstall: false
          envName: ${env.envName}
    - environment.nodegroup.ApplyData [bl]:
      data:
        productName: haproxy
        productVersion: ${globals.haproxyVersion}

  updateModules:
    # Install modules with a single version available
      - set:
          modules: [
            {"name": "jahia-ui-root", "version":"1.10.0"},
            {"name": "jahia-page-composer", "version":"1.12.0"},
            {"name": "jahia-dashboard", "version":"1.10.0"},
            {"name": "jahia-administration", "version":"1.10.0"}
            ]
      - forEach(this.modules):
          - checkModule:
              moduleSymname: ${@i.name}
          - if ("${globals.runningVersion}" != "${@i.version}"):
                  - installOrUpgradeModules:
                      modules: ${@i.name}/${@i.version}
    # Install modules with multiple versions available
      - checkModule:
          moduleSymname: content-editor
      # Make sure it is installed, as it's optional in 8.2.X
      - if ("${globals.installedVersionsCount}" != ""):
          - if (${fn.compare([globals.runningVersion], 4.0.0)} < 0):
              set: {"version":"3.7.0"}
          - else:
              set: {"version":"4.11.0"}
          - if ("${globals.runningVersion}" != "${this.version}"):
              - installOrUpgradeModules:
                  modules: content-editor/${this.version}
      - checkModule:
          moduleSymname: app-shell
      - if (${fn.compare([globals.runningVersion], 3.0.0)} < 0):
          set: {"version":"2.10.0"}
      - else:
          set: {"version":"3.2.0"}
      - if ("${globals.runningVersion}" != "${this.version}"):
          - installOrUpgradeModules:
              modules: app-shell/${this.version}
      - checkModule:
          moduleSymname: jcontent
      # Only upgrade jcontent if 2.X installed
      - if (${fn.compare([globals.runningVersion], 3.0.0)} < 0):
          set: {"version":"2.17.0"}
      - if ("${globals.runningVersion}" != "${this.version}"):
          - installOrUpgradeModules:
              modules: jcontent/${this.version}
      # Finish with graphql-dxm-provider if 2.X installed
      - checkModule:
          moduleSymname: graphql-dxm-provider
      - if (${fn.compare([globals.runningVersion], 3.0.0)} < 0):
          - if ("${globals.runningVersion}" != "2.21.0"):
              - installOrUpgradeModules:
                  modules: graphql-dxm-provider/2.21.0

settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: Disable checks
      tooltip: Disable post and pre checks
    - type: toggle
      name: force
      caption: Force migration
      tooltip: Apply the migration even if env_version is up-to-date
