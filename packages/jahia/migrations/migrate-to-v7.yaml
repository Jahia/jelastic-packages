---
type: update
version: 1.5.2
name: Migrate Jahia env to v7
id: migrate-jahia-env-v7

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 7

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealthOld: bl ########### Temporary healthcheck specific to this migration, please keep that in mind for future migration scripts #############
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - haproxyNewConf                    # PAAS-1321
  - updateIPSecScript                 # PAAS-1651
  - updateDnsmasqConf                 # PAAS-1651
  - addJelasticExposeFalse            # PAAS-1658
  - updateStrongswanOverride          # PAAS-1667
  - updateIMFlavor                    # PAAS-1645
  - changeAccessLogPatternAndRestart  # PAAS-1653
  - restartJahiaNode                  # for PAAS-1645 and PAAS-1653
  - datadogCustomCheckForJahiaNodes   # PAAS-1653

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkHaproxyHealth: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  # Temporary healthcheck since haproxy configuration is changed during the migration
  checkHaproxyHealthOld:
    cmd [${this}]: |-
      if service haproxy status > /dev/null; then
        adm_user=$(awk '/ stats auth / {print $3}' /etc/haproxy/haproxy.cfg.d/00-global.cfg)
        curl -fsI /dev/null -u "$adm_user" localhost:80/haproxy_adm_panel && exit 0
      fi
      echo "[ERROR] Haproxy is unavailable, exiting" 1>&2 && exit 1
    user: root

  updateIPSecScript:
    - cmd[cp, proc]: |-
        target=/usr/local/bin/ipsec_updown.sh
        curl -fLSso $target ${baseUrl}/v7_assets/ipsec_updown.sh || exit 1
        chmod 755 $target
      user: root

  updateDnsmasqConf:
    cmd[cp, proc]: |-
      if ! (systemctl is-active -q dnsmasq); then
        echo "No need to update dnsmasq conf"
        exit 0
      fi
      infra_conf=$dnsmasq_dir/infra_internals
      infra_root_dns=(j.jahia.com cloud.jahia.com azure.jahia.com)
      [ -f $infra_conf ] && rm $infra_conf
      awk '$1=="nameserver" && $2!~/^(127\.|8\.8\.)/ {print $2}' /etc/resolv.conf | while read dns_infra; do
        for internal_dns in ${infra_root_dns[*]}; do
          line="server=/$internal_dns/$dns_infra"
          echo "add this line in $infra_conf: $line"
          echo "$line" >> $infra_conf
        done
      done
      sed -i '/127.0.0.1/d' /etc/resolv.conf
      systemctl restart dnsmasq
      sed -i '1 i nameserver 127.0.0.1' /etc/resolv.conf
    user: root

  datadogCustomCheckForJahiaNodes:
    - cmd[cp, proc]: |-
        CUSTOM_CHECK_SCRIPT=/etc/datadog-agent/checks.d/jahia_node_not_in_haproxy_pool.py
        curl -fLSso $CUSTOM_CHECK_SCRIPT ${globals.repoRootUrl}/packages/jahia/migrations/v7_assets/jahia_node_not_in_haproxy_pool.py || exit 1
        chown dd-agent:dd-agent $CUSTOM_CHECK_SCRIPT
        systemctl restart datadog-agent
      user: root

  updateStrongswanOverride:
    - cmd[cp, proc]: |-
        curl -fLSso /etc/systemd/system/strongswan.service.d/override.conf ${globals.repoRootUrl}/packages/jahia/migrations/v7_assets/strongswan_override || exit 1
        chmod 644 /etc/systemd/system/strongswan.service.d/override.conf
        systemctl daemon-reload
      user: root

  changeAccessLogPatternAndRestart:
    - updateLogPattern: proc
    - forEach(nodes.cp):
        - updateLogPattern: ${@i.id}

  updateLogPattern:
    - cmd[${this}]: |-
        CONFIG_FILE=/opt/tomcat/conf/server.xml
        USER_AGENT="\&quot\;%{User-Agent}i\&quot"
        if ( grep -q "$USER_AGENT" $CONFIG_FILE ); then
          echo "[INFO] Pattern is up-to-date"
          exit 0
        fi
        CURRENT_PATTERN="%{org.apache.catalina.AccessLog.RemoteAddr}r %l %u %t \&quot\;%r\&quot\; %s %b"
        NEW_PATTERN="%{org.apache.catalina.AccessLog.RemoteAddr}r %l %u %t \&quot\;%r\&quot\; %s %b \&quot\;%{User-Agent}i\&quot\;"
        sed -i "s/$CURRENT_PATTERN/$NEW_PATTERN/" $CONFIG_FILE

  restartJahiaNode:
    - install:
        jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"
        settings:
          enable: ${this.enable}
          login: ${this.basic_auth_user}
          pwd: ${this.basic_auth_password}

  addJelasticExposeFalse:
    - env.control.AddContainerEnvVars[sqldb]:
      vars: {"JELASTIC_EXPOSE": "false"}

  updateIMFlavor:
    - cmd[cp, proc]: |-
        [ -f /etc/yum.repos.d/remi.repo ] || yum install -y https://rpms.remirepo.net/enterprise/remi-release-7.rpm
        [ -f /usr/bin/magick  ] || yum --enablerepo=remi install -y ImageMagick7
      user: root
    - api: env.control.GetContainerEnvVars
      nodeId: ${nodes.proc.first.id}
    - if ("${response.object.jahia_cfg_imageMagickPath}" != "/usr/bin"):
        - env.control.AddContainerEnvVars [cp, proc]:
          vars:
            jahia_cfg_imageMagickPath: /usr/bin

  haproxyNewConf:
    - cmd [bl]: |-
        [ -d /etc/haproxy/haproxy.cfg.jahia ] && echo true || echo false
    - if ("${response.out}" == "false"):
        - improveHaproxyConf

  improveHaproxyConf:
    # Conf
    - cmd [bl]: |-
        HAPROXY_DIR=/etc/haproxy
        HAPROXY_CONF_DIR=$HAPROXY_DIR/haproxy.cfg.jahia
        HAPROXY_SYSCONFIG=/etc/sysconfig/haproxy
        mkdir $HAPROXY_CONF_DIR $HAPROXY_CONF_DIR/customer.configuration.d
        curl -fLSso $HAPROXY_CONF_DIR/jahia-cloud.cfg ${globals.repoRootUrl}/assets/haproxy/haproxy-jahia-cloud.cfg || exit 1
        curl -fLSso $HAPROXY_SYSCONFIG ${globals.repoRootUrl}/assets/haproxy/haproxy-sysconfig || exit 1
        echo $HAPROXY_SYSCONFIG >> /etc/jelastic/redeploy.conf
        chown -R haproxy:haproxy $HAPROXY_DIR
        sed -i "s|cfgfile=.*|cfgfile=$HAPROXY_DIR/haproxy.cfg|g" /etc/init.d/haproxy
      user: root
    # Rewrite rules
    - cmd [bl]: |-
        OLD_HAPROXY_CONF=/etc/haproxy/haproxy.cfg.d/00-global.cfg
        CUSTOMER_RULES_FILE=/etc/haproxy/haproxy.cfg.jahia/customer.configuration.d/customer_rules.cfg
        HAPROXY_SYSCONFIG=/etc/sysconfig/haproxy
        awk '/## START_REWRITES ##/{flag=1; next} /## END_REWRITES ##/{flag=0} flag' $OLD_HAPROXY_CONF > $CUSTOMER_RULES_FILE
        [ -s $CUSTOMER_RULES_FILE ] || rm -f $CUSTOMER_RULES_FILE
    # Backends
    - resetHaproxyBackends: bl
    - configureProcessingDirectAccessHaproxy: bl
    # Basic auth
    - cmd [bl]: |-
        HAPROXY_DIR=/etc/haproxy
        OLD_HAPROXY_CONF=$HAPROXY_DIR/haproxy.cfg.d/00-global.cfg
        HAPROXY_CONF=$HAPROXY_DIR/haproxy.cfg.jahia/jahia-cloud.cfg
        user=$(awk '/user .* password .*/ {print $2}' $OLD_HAPROXY_CONF)
        password=$(awk '/user .* password .*/ {print $4}' $OLD_HAPROXY_CONF)
        sed -i "s;^\(\s*user \).*\( password \).*$;\1$user\2$password;" $HAPROXY_CONF
        old_auth_basic_disabled=$(grep -c  "#acl tools.*#HTTP_AUTH_BASIC" $OLD_HAPROXY_CONF)
        auth_basic_disabled=$(grep -c  "#acl tools.*#HTTP_AUTH_BASIC" $HAPROXY_CONF)
        [ $old_auth_basic_disabled -eq $auth_basic_disabled ] && exit 0
        if [ $old_auth_basic_disabled -eq 1 ]; then
          sed -i "s;^\(\s*\)\(.*#HTTP_AUTH_BASIC.*\)$;\1#\2;" $HAPROXY_CONF
        else
          sed -i "s;^\(\s*\)#\+\(.*#HTTP_AUTH_BASIC.*\)$;\1\2;" $HAPROXY_CONF
        fi
        sudo service haproxy reload
    - checkHaproxyHealth: bl
    - cmd [bl]: |-
        tar -czf /root/haproxy.cfg.d-migrationv7-backup.tar.gz /etc/haproxy/haproxy.cfg.d
        rm -rf /etc/haproxy/haproxy.cfg.d
      user: root
