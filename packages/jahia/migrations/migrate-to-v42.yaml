---
type: update
version: 1.5.2
name: Migrate Jahia env to v42
id: migrate-jahia-env-v42

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 42

onInstall:
  ### Pre-migration actions
  - checkEnvProvides: jahia
  - checkEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - preChecks
  - else:
      log: "pre migration checks are disabled"
  - setGlobalRepoRootUrl
  ### End pre-migration actions

  # Actions that update modules (needs to be done first)

  # Regular actions

  # Actions that require a restart

  # Actions that require a redeploy
  - upgradeHaproxy            # PAAS-2860
  - if (nodes.sqldb.length == 1) || (nodes.storage.length == 1):
      stopJahiaNodes
  - upgradeSqldb              # PAAS-2932
  - upgradeStorage            # PAAS-3037
  - if (nodes.sqldb.length == 1) || (nodes.storage.length == 1):
      startJahiaNodes

  # Redeploy and restart actions:
  - if ("${globals.jahiaRollingRedeployNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-redeploy.yml"
  - else:
      - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
          - install:
              jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  # Actions that can only run when the redeploy is done
  # (None)

  ### Post-migration actions
  - setEnvVersion: ${globals.version}
  - if(!${settings.disable_checks}):
      - postChecks
  - else:
      log: "post migration checks are disabled"
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  ### End post-migration actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  checkHaproxyDatadogCustomChecksOld:
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: haproxy
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: haproxy_one_remaining_browsing
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: process

  preChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecksOld: bl # !!!! Use the new check for next release !!!!
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
#    - checkDatadogBrowserTests
    - dumpModules:
        operation: migration
        checkVersion: true

  postChecks:
    - checkJahiaHealth: "cp, proc"
    - checkJahiaDatadogCustomChecks: "cp, proc"
    - checkHaproxyHealth: bl
    - checkHaproxyDatadogCustomChecks: bl
    - checkMariadbHealth:
        target: sqldb
    - checkGaleraClusterHealth: sqldb
    - checkMariadbDatadogCustomChecks: sqldb
#    - checkDatadogBrowserTests:
#        postCheck: true
    - checkModulesAfterOperation:
        operation: migration
        ignoredModules: ${globals.ignoredModules}
        checkVersion: true

  upgradeHaproxy:
    - setGlobals:
        haproxyVersion: "2.8.9-almalinux-9"
    - foreach (nodes.bl):
      - if ("${@i.version}" != "${globals.haproxyVersion}"):
        - api: environment.control.RedeployContainerById
          nodeId: ${@i.id}
          tag: ${globals.haproxyVersion}
          useExistingVolumes: true
          skipReinstall: false
          envName: ${env.envName}
      - cmd [${@i.id}]: systemctl restart haproxy
    - environment.nodegroup.ApplyData [bl]:
      data:
        productName: haproxy
        productVersion: ${globals.haproxyVersion}

  upgradeSqldb:
    - setGlobals:
        sqlDbVersion: "10.11.7-almalinux-9"
    - if("${nodes.sqldb.first.version}" != "${globals.sqlDbVersion}"):
      - if(nodes.sqldb.length > 1):
        - install:
            jps: "${baseUrl}../redeploy-galera-nodes.yml"
      - else:
        - setGlobals:
            targetDockerTag: ${globals.sqlDbVersion}
        - getGaleraNodeNameIndex: ${nodes.sqldb.first.id}
        - redeployGaleraNode:
            target: ${nodes.sqldb.first.id}
      - foreach(nodes.sqldb):
          - cmd[${@i.id}]: |-
              mariadb-upgrade --check-if-upgrade-is-needed && mariadb-upgrade || true

  upgradeStorage:
    - setGlobals:
        storageOSVersion: "2.0-10.5-almalinux-9"
    - if (nodes.storage.length > 1):
        install:
          jps: "${globals.repoRootUrl}/packages/jahia/migrations/v42_assets/replication-logic.jps"
    - foreach (nodes.storage):
      - if ("${@i.version}" != "${globals.storageOSVersion}"):
        - api: environment.control.RedeployContainerById
          nodeId: ${@i.id}
          tag: ${globals.storageOSVersion}
          useExistingVolumes: true
          skipReinstall: false
          envName: ${env.envName}
        - sleep: 30

  stopJahiaNodes:
    - muteDatadogHost:
        target: "*"
        duration: 60
    - muteEnvWideMonitors
    - stopJahia: cp, proc

  startJahiaNodes:
    - api: environment.control.RestartNodeById
      nodeId: ${nodes.proc.first.id}
    - foreach (nodes.cp):
        - api: environment.control.RestartNodeById
          nodeId: ${@i.id}
    - unmuteDatadogHost:
        target: "*"
    - unmuteEnvWideMonitors

settings:
  fields:
    - type: toggle
      name: disable_checks
      caption: disable all checks
