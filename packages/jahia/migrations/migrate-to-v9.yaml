---
type: update
version: 1.5.2
name: Migrate Jahia env to v9
id: migrate-jahia-env-v9

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 9

onInstall:
  ### Temporary placed here because it's required for different healthchecks
  ### Should be removed in the next release's migration package
  - installRequiredPackagesEverywhere       # PAAS-1760
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - datadogCustomCheckForJahiaNodes                # PAAS-1693
  - installPapiScript: bl, proc, cp, sqldb         # PAAS-1686
  - updateProxySQLConfigForSingleDBNodes           # PAAS-1647
  - addVaultInfosToDBNodes                         # PAAS-1722
  - addPapiEnvVars                                 # PAAS-1662
  - addPapiRole                                    # PAAS-1662

  # Actions that require a restart:
  - improveTomcatJDBC                              # PAAS-1722
  - addJvmRoute                                    # PAAS-1640
  - updateApmJavaOption                            # PAAS-1767
  - addDSCookieName                                # PAAS-1288 (just add envvar)

  # Restart actions:
  - jahiaRollingRestart                            # needed for PAAS-1722, PAAS-1640, PAAS-1767 and PAAS-1288

  # Needs to be performed only once PAAS-1722 is applied
  - setGaleraMaster                                # PAAS-1723

  # Needs to be performed only once the cookieName envvar is setted
  - installDSModule                                # PAAS-1288

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  datadogCustomCheckForJahiaNodes:
    - cmd[cp, proc]: |-
        CUSTOM_CHECK_SCRIPT=/etc/datadog-agent/checks.d/jahia_node_not_in_haproxy_pool.py
        curl -fLSso $CUSTOM_CHECK_SCRIPT ${globals.repoRootUrl}/packages/jahia/migrations/v9_assets/jahia_node_not_in_haproxy_pool.py || exit 1
        chown dd-agent:dd-agent $CUSTOM_CHECK_SCRIPT
        systemctl restart datadog-agent
      user: root

  updateProxySQLConfigForSingleDBNodes:
    if (nodes.sqldb.length == 1):
      configureProxysqlForSingleDBNode

  installRequiredPackagesEverywhere:
    - cmd[*]: |-
        yumdb sync-force
      user: root
    - installRequiredPackages:
        target: "cp, proc, bl, sqldb"
        packages: "python36 python36-pip jq"

  improveTomcatJDBC:
    - cmd[cp, proc]: |-
        f=/opt/tomcat/webapps/ROOT/META-INF/context.xml
        curl -fLSso ${f} ${globals.repoRootUrl}/packages/jahia/migrations/v9_assets/context.xml || exit 1

  jahiaRollingRestart:
    - install:
        jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  addVaultInfosToDBNodes:
    - script: |-
        const container_env_vars = jelastic.env.control.GetContainerEnvVars(
                                     '${env.envName}',
                                     session,
                                     ${nodes.cp.first.id}
                                   );

        var resp = jelastic.env.control.AddContainerEnvVars('${env.envName}',
          session,
          nodeGroup='sqldb',
          vars={
            'VAULT_CLUSTER_URL': container_env_vars.object.VAULT_CLUSTER_URL,
            'VAULT_SECRET_ID': container_env_vars.object.VAULT_SECRET_ID,
            'VAULT_ROLE_ID': container_env_vars.object.VAULT_ROLE_ID
          }
        );


        return {'result': 0}

  setGaleraMaster:
    if (nodes.sqldb.length == 3):
      proxysqlSwitchMaster:
        target: 3

  addJvmRoute:
    cmd[proc, cp]: |-
      short_name=$(echo ${_ROLE}.$HOSTNAME | sed -r 's/^([a-Z]+)\.[a-Z]+([0-9]+)-.+$/\1.\2/' | tr 'A-Z' 'a-z')
      # the follwing will update or add if not present the jvmRoute property
      sed -i -n -e '/^\s*jahia.session.jvmRoute\s*=/!p' -e "\$ajahia.session.jvmRoute = $short_name" $STACK_PATH/conf/digital-factory-config/jahia/jahia.node.properties
      # the following will update or add if not present the jvmRoute attribute
      sudo yum install -y xmlstarlet
      xmlstarlet ed -P -L \
        -u "Server/Service/Engine/@jvmRoute" -v "$short_name" \
        -i "Server/Service/Engine[not(@jvmRoute)]" -t attr -n "jvmRoute" -v "$short_name" \
        /opt/tomcat/conf/server.xml

  updateApmJavaOption:
    cmd[proc, cp]: |-
      # Remove all options set after dd.profiling.enable (basically all used for apm)
      sed -i 's/\s-Ddd\.[^"]*//' /opt/tomcat/conf/tomcat-env.sh
      if ! (grep -q APM_OPTS /opt/tomcat/conf/tomcat-env.sh);then
          echo 'APM_OPTS="-Ddd.profiling.enabled=true -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -javaagent:/opt/tomcat/datadog/dd-java-agent.jar -Ddd.service=jahia -Ddd.env=${env.domain}"' >>  /opt/tomcat/conf/tomcat-env.sh
          echo '$DATADOG_APM_ENABLED && JAVA_OPTS+=" $APM_OPTS"' >> /opt/tomcat/conf/tomcat-env.sh
      fi

  addPapiEnvVars:
    - cmd[${nodes.cp.first.id}]: |-
        export PAPI_TOKEN="${settings.papi_token}"
        export PAPI_API_VERSION="v1"
        export PAPI_HOSTNAME=${settings.papi_hostname}
        papi.py -X GET "paas-environment?namespace=${env.envName}" | jq -r '.[0].environment_id'
    - env.control.AddContainerEnvVars[*]:
      vars: {
        "PAPI_HOSTNAME": "${settings.papi_hostname}",
        "PAPI_API_VERSION": "v1",
        "PAPI_ENV_ID": "${response.out}"
      }

  addPapiRole:
    - cmd[${nodes.cp.first.id}]: |-
        export PAPI_TOKEN="${settings.papi_token}"
        papier_id=$(papi.py -X GET paas-environment/$PAPI_ENV_ID | jq -r .papier_id)
        papi.py -X PUT -d '{}' "papier/$papier_id/role/MANAGE_OWN_PAPIER"

  addDSCookieName:
    - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"jahia_cfg_jahia_session_cookieName": "DISTRIBUTED_JSESSIONID"}

  installDSModule:
    - getJahiaVersion
    - if (${fn.compare([globals.jahiaVersion], 8.0.0.0)} < 0):
        - set:
            ds_version: 2.1.1
    - else:
        - set:
            ds_version: 3.1.0
    - upgradeModule:
        moduleSymname: distributed-sessions
        moduleVersion: ${this.ds_version}

settings:
  fields:
    - name: papi_token
      type: string
      caption: papi token to perform operations
      required: true
    - name: papi_hostname
      type: string
      caption: papi dns
      required: true
