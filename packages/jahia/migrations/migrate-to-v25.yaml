---
type: update
version: 1.5.2
name: Migrate Jahia env to v25
id: migrate-jahia-env-v25

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 25

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  # Temporary version to use before the migration in case proxysql credentials are broken (PAAS-2363)
  - checkJahiaDatadogCustomChecksBeforeMig: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - fixProxySqlCredentials               # PAAS-2363

  # Actions that require a restart


  # Restart action:
  - if ("${globals.jahiaRollingRestartNeeded}" == "true"):
      - install:
          jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth:
      target: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  checkJahiaDatadogCustomChecksBeforeMig:
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: jahia_node_not_in_haproxy_pool
    - checkDatadogAgentCheck:
        target: ${this}
        checkName: strongswan_connections_status
    - cmd[${this}]: |-
        if [ -f /etc/datadog-agent/conf.d/augmented_search.yaml-disabled ]; then
          echo "disabled"
        fi
    - if ("${response.out}" != "disabled"):
      - checkDatadogAgentCheck:
          target: ${this}
          checkName: augmented_search

  fixProxySqlCredentials:
    - cmd[cp, proc]: |-
        mysql -h 127.0.0.1 -uadmin -p$PROXYSQL_ADMIN_PASSWORD -P6032 -e "select * from mysql_servers" > /dev/null
        if [ $? -eq 0 ]; then
          echo "Env up to date, just saving config"
          ${globals.proxysql_cli} -e "SAVE ADMIN VARIABLES TO DISK"
          ${globals.proxysql_cli} -e "SAVE MYSQL VARIABLES TO DISK"
        else
          echo "Env is broken after restart, resetting everything"
          source /.jelenv
          admin_creds_query="set admin-admin_credentials='admin:$PROXYSQL_ADMIN_PASSWORD;cluster1:$PROXYSQL_CLUSTER_PASSWORD';"
          cluster_creds_query="set admin-cluster_password='$PROXYSQL_CLUSTER_PASSWORD';"
          monitor_creds_query="set mysql-monitor_password='$PROXYSQL_MONITORING_PASSWORD';"
          persist_config_query="LOAD ADMIN VARIABLES TO RUNTIME; LOAD MYSQL VARIABLES TO RUNTIME;"
          mysql -h 127.0.0.1 -uadmin -padmin -P6032 -e "$admin_creds_query $cluster_creds_query $monitor_creds_query $persist_config_query"
          ${globals.proxysql_cli} -e "SAVE ADMIN VARIABLES TO DISK"
          ${globals.proxysql_cli} -e "SAVE MYSQL VARIABLES TO DISK"
        fi
