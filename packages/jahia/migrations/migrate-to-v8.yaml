---
type: update
version: 1.5.2
name: Migrate Jahia env to v8
id: migrate-jahia-env-v8

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jahia.yml"
  - "../../../mixins/mariadb.yml"
  - "../../../mixins/haproxy.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 8

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - fixTomcatInitScript                                    # PAAS-1685
  - setOrganizationNameEnvVar: bl, cp, proc, sqldb         # PAAS-1631
  - updateHAProxyRulesFile                                 # PAAS-1498
  - updateHaproxyConfig                                    # PAAS-1575 + PAAS-1708
  - addMaxPostSize                                         # PAAS-1579
  - addHaproxyNodesCountOnJahiaNodes                       # PAAS-1674
  - enableGCMetricsOnJahiaNodes                            # PAAS-1664
  - addGaleraNodeCustomCheck                               # PAAS-1677
  - enableNativeMemoryTracking                             # PAAS-1705
  - configureDatadogAPM                                    # PAAS-1712
  - disableIoCheck                                         # PAAS-1542
  - updateDDIPSecConnStatus                                # PAAS-1694
  - restartDDAgentOnJahiaNodes                             # needed for PAAS-1674, PAAS-1664, PAAS-1677, PAAS-1712, PAAS-1542 and PAAS-1694
  - jahiaRollingRestart                                    # needed for PAAS-1579, PAAS-1705 and PAAS-1712
  - updateStrongswanOverride                               # PAAS-1690

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.proc.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJahiaHealth: "cp, proc"
  - checkJahiaDatadogCustomChecks: "cp, proc"
  - checkHaproxyHealth: bl
  - checkHaproxyDatadogCustomChecks: bl
  - checkMariadbHealth: sqldb
  - checkGaleraClusterHealth: sqldb
  - checkMariadbDatadogCustomChecks: sqldb
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}../update-events.yml"

  addHaproxyNodesCountOnJahiaNodes:
    - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"HAPROXY_NODES_COUNT": "${nodes.bl.length}"}
    - cmd[cp, proc]: |-
        target=/etc/datadog-agent/checks.d/jahia_node_not_in_haproxy_pool.py
        curl -fLSso $target ${baseUrl}v8_assets/jahia_node_not_in_haproxy_pool.py || exit 1
        chown dd-agent: $target
      user: root

  enableGCMetricsOnJahiaNodes:
    - cmd[cp,proc]: |-
        CONF_FILE=/etc/datadog-agent/conf.d/tomcat.d/conf.yaml
        LINE_TO_ADD="new_gc_metrics: true"
        if ( grep -q "$LINE_TO_ADD" $CONF_FILE ); then
          echo "[INFO] Config is already updated"
          exit 0
        fi
        sed -i "/init_config/a\ \ \ \ $LINE_TO_ADD" $CONF_FILE
      user: root

  fixTomcatInitScript:
    - cmd[cp, proc]: |-
        sed -e '/^\s\+JVM_PID=/,/^}$/!b' -e '/^}$/!d;i \    JVM_PID="$(pgrep -f "jvm=$JVM_ID" | head -n 1)"' -i /etc/init.d/tomcat
      user: root

  addMaxPostSize:
    - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"tomcat_cfg_maxpostsize": "2097152"}
    - cmd[cp, proc]: |-
        if ! (grep -q '\-DmaxPostSize=' /opt/tomcat/conf/tomcat-env.sh); then
          sed -i -E '/^JAVA_OPTS/ s/(.)$/ -DmaxPostSize=${tomcat_cfg_maxpostsize}\1/g' /opt/tomcat/conf/tomcat-env.sh
        fi
        if ! (grep -q 'maxPostSize=' /opt/tomcat/conf/server.xml); then
          sed -i '/Connector port="80"/a \               maxPostSize="${maxPostSize}"' /opt/tomcat/conf/server.xml
        fi
      user: root

  addGaleraNodeCustomCheck:
    - cmd[sqldb]: |-
        custom_check_script=/etc/datadog-agent/checks.d/check_galera_wsrep_ready_status.py
        custom_check_config=/etc/datadog-agent/conf.d/check_galera_wsrep_ready_status.yaml
        curl -fLSso $custom_check_script ${globals.repoRootUrl}/assets/database/check_galera_wsrep_ready_status.py || exit 1
        chown dd-agent: $custom_check_script
        ln -s /etc/datadog-agent/conf.d/mysql.d/conf.yaml $custom_check_config
        chown -h dd-agent: $custom_check_config
      user: root

  setOrganizationNameEnvVar:
    - if (!globals.organization_name):
        - script: |
            return {"result": 0, "orgname": "${user.email}".split('@')[0]}
        - setGlobals:
            organization_name: ${response.orgname}
    - env.control.AddContainerEnvVars[${this}]:
      vars: {"ORGANIZATION_NAME": "${globals.organization_name}"}

  updateHaproxyConfig:
    - env.control.AddContainerEnvVars[bl]:
      vars:
        haproxy_cfg_timeout_server: "5m"
    - cmd[bl]: |-
        HAPROXY_CONF_DIR=/etc/haproxy/haproxy.cfg.jahia
        HAPROXY_SYSCONFIG=/etc/sysconfig/haproxy
        HAPROXY_RELOAD=/usr/local/bin/haproxy-reload.sh
        curl -fLSso $HAPROXY_CONF_DIR/jahia-cloud.cfg ${globals.repoRootUrl}/assets/haproxy/haproxy-jahia-cloud.cfg || exit 1
        curl -fLSso $HAPROXY_SYSCONFIG ${globals.repoRootUrl}/assets/haproxy/haproxy-sysconfig || exit 1
        curl -fLSso $HAPROXY_RELOAD ${globals.repoRootUrl}/assets/haproxy/haproxy-reload.sh || exit 1
        chmod +x $HAPROXY_RELOAD
        service haproxy reload
      user: root

  enableNativeMemoryTracking:
    - cmd[cp, proc]: |-
        if ! (grep -q '\-XX:NativeMemoryTracking=summary' /opt/tomcat/conf/tomcat-env.sh); then
          sed -i -E '/^JAVA_OPTS/ s/(.)$/ -XX:NativeMemoryTracking=summary\1/g' /opt/tomcat/conf/tomcat-env.sh
        fi
      user: root

  configureDatadogAPM:
    - env.control.AddContainerEnvVars[cp, proc]:
      vars: {"DATADOG_APM_ENABLED": "false"}
    - cmd[cp, proc]: |-
        # Update set_dd_tags.sh and run it to update dd-agent config (disable APM by default)
        curl -fLSso /usr/local/bin/set_dd_tags.sh ${baseUrl}/v8_assets/set_dd_tags.sh || exit 1
        # Install dd-java-agent.jar
        if [ ! -f /opt/tomcat/datadog/dd-java-agent.jar ]; then
          mkdir /opt/tomcat/datadog
          curl -fLSso /opt/tomcat/datadog/dd-java-agent.jar https://dtdg.co/latest-java-tracer || exit 1
          chown tomcat: -R /opt/tomcat/datadog/
        fi
        # Add required JAVA_OPTS (tomcat restart needed to be taken into account)
        if ! (grep -q '\-javaagent:/opt/tomcat/datadog/dd-java-agent.jar' /opt/tomcat/conf/tomcat-env.sh); then
          sed -i -E '/^JAVA_OPTS/ s#(.)$# -Ddd.profiling.enabled=true -XX:FlightRecorderOptions=stackdepth=256 -Ddd.logs.injection=true -javaagent:/opt/tomcat/datadog/dd-java-agent.jar -Ddd.service=jahia -Ddd.env=${env.domain}\1#g' /opt/tomcat/conf/tomcat-env.sh
        fi
      user: root

  disableIoCheck:
    - cmd[cp,proc,sqldb,bl]: |-
        io_conf_path=/etc/datadog-agent/conf.d/io.d/conf.yaml.default
        if [ -f "$io_conf_path" ]; then
          mv $io_conf_path $io_conf_path.disabled
        fi
      user: root
    # Only restart agent on DB and HAProxy nodes, since jahia nodes are handled in a another action
    - cmd[sqldb,bl]: |-
        systemctl restart datadog-agent
      user: root

  updateDDIPSecConnStatus:
    - cmd[proc, cp]: |-
        filename="strongswan_connections_status.py"
        curl -fLSso /etc/datadog-agent/checks.d/$filename ${baseUrl}/v8_assets/$filename || exit 1
        chown dd-agent: /etc/datadog-agent/checks.d/$filename
      user: root

  restartDDAgentOnJahiaNodes:
    - cmd[cp,proc]: |-
        # Launch "set_dd_tags" script (needed for "configureDatadogAPM")
        output="$(/usr/local/bin/set_dd_tags.sh)"
        # Force agent restart in case "set_dd_tags" didn't already do it
        if [ "$output" = "Tags are up to date, exiting." ]; then
          echo "Force datadog-agent restart"
          systemctl restart datadog-agent
        fi
      user: root

  updateStrongswanOverride:
    - cmd[cp, proc]: |-
        curl -fLSso /etc/systemd/system/strongswan.service.d/override.conf ${globals.repoRootUrl}/packages/jahia/migrations/v8_assets/strongswan_override || exit 1
        curl -fLSso /usr/local/bin/strongswan_connection.sh ${globals.repoRootUrl}/packages/jahia/migrations/v8_assets/strongswan_connection.sh || exit 1
        chmod 644 /etc/systemd/system/strongswan.service.d/override.conf
        chmod 755 /usr/local/bin/strongswan_connection.sh
        systemctl daemon-reload
      user: root
  updateHAProxyRulesFile:
    - cmd[bl]: |-
        OLD_CUSTOMER_RULES_FILE=/etc/haproxy/haproxy.cfg.jahia/customer.configuration.d/customer_rules.cfg
        NEW_CUSTOMER_RULES_FILE=/etc/haproxy/haproxy.cfg.jahia/customer.configuration.d/rewrite-rules.cfg
        if find $OLD_CUSTOMER_RULES_FILE -maxdepth 0 -empty > /dev/null 2>&1; then
          mv -f $OLD_CUSTOMER_RULES_FILE $NEW_CUSTOMER_RULES_FILE
        fi

  jahiaRollingRestart:
    - install:
        jps: "${globals.repoRootUrl}/packages/jahia/jahia-rolling-restart.yml"
