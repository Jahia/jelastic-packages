---
type: update
version: 1.5.2
name: Jahia - Install Augmented Search
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-augmentedsearch-install
description:
  short: Jahia - Install Augmented Search

globals:
  __secret__elasticsearch_password: ${fn.password(20)}
  esConnectionName: jahia-cloud_augmented-search

mixins:
  - ../../mixins/common.yml
  - ../../mixins/elasticsearch.yml
  - ../../mixins/jahia.yml
  - ../../mixins/haproxy.yml


onInstall:
  - determineModulesVersions
  - setupES4AS
  - installModules
  - setupModules
  - setNodeGroupData
  - enableDatadogAugSearchCheck


actions:
  determineModulesVersions:
    - getJahiaVersion
    - setGlobals:
        db_connector_ver: 1.5.0
        es_connector_ver: 3.2.0
        augsearch_ver: 3.6.0
    - isVersionStrictlyLower:
        a: ${globals.jahiaVersion}
        b: 8.1.3.0
        res: lessjahia813
    - if(globals.lessjahia813):
        - setGlobals:  # if jahia < 8.1.3
            augsearch_ver: 3.4.2
    - else:
        - isVersionStrictlyHigher:
            a: ${globals.jahiaVersion}
            b: 8.2.0.0
            res: jahia82Plus
        - if(${globals.jahia82Plus}):
            setGlobals:
              db_connector_ver: 1.6.0
              es_connector_ver: 3.3.0

  installModules:
    - cmd[proc, cp]: |-
        rm -f /data/digital-factory-data/karaf/etc/org.jahia.modules.augmentedsearch.cfg
    - installOrUpgradeModules:
        modules: database-connector/${globals.db_connector_ver}, elasticsearch-connector/${globals.es_connector_ver}, augmented-search/${globals.augsearch_ver}

  setNodeGroupData:
    - environment.nodegroup.ApplyData[cp]:
        data:
          augsearch: enable

  setupAugSearch:
    - updateModuleKarafConfig:
        servicePid: "org.jahia.modules.augmentedsearch"
        properties:
          org.jahia.modules.augmentedsearch.prefix: "as"
          org.jahia.modules.augmentedsearch.numberOfShards: "1"
          org.jahia.modules.augmentedsearch.numberOfReplicas: "1"
          org.jahia.modules.augmentedsearch.minHeapPerShardInMb: "10"
    - if (! ${globals.updateModuleKarafConfig_success}):
        return:
        type: error
        message: "Failed to update AS configuration"

  setupESConnector:
    - cmd[proc]: |-
        set -euo pipefail
        __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
        export PAPI_TOKEN="$__secret__PAPI_TOKEN"
        export PAPI_HOSTNAME="${globals.papiHostname}"
        export PAPI_ENV_ID="${globals.papiEnvId}"
        export PAPI_API_VERSION="${globals.papiApiVersion}"

        environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
        ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
        ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")
        es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint | sed 's/https:\/\/\(.*\):.*/\1/g')
        echo $es_endpoint
    - set:
        esEndpoint: ${response.out}
    - cmd [proc]: |-
        __secret__API_TOKEN="${globals.__secret__pat_token}"
        get_current_es_connection() {
          curl -fLSs http://localhost:8080/modules/graphql \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            -d '{"query":"query { admin { search { currentConnection } } }"}' \
            | jq -r '.data.admin.search.currentConnection'
        }

        __secret__elasticsearch_password="${globals.__secret__elasticsearch_password}"
        payload_add_es() {
        cat << EOF
        {
          "id": "${globals.esConnectionName}",
          "isConnected": true,
          "host": "${this.esEndpoint}",
          "port": "443",
          "user": "${env.envName}",
          "password": "$__secret__elasticsearch_password",
          "options": '{"useXPackSecurity": true, "useEncryption": true}'
        }
        EOF
        }

        curl_add_es() {
          curl -fLSs -XPOST http://localhost:8080/modules/dbconn/elasticsearch/add \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            -d "$(payload_add_es)"
        }

        curl_delete_es(){
          curl -fLSs -XDELETE http://localhost:8080/modules/dbconn/elasticsearch/remove/$current_es_connection \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            | jq -r ".success"
        }

        curl_set_as_conn() {
          curl -fLSs -XPOST http://localhost:8080/modules/graphql \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            -d '{"query":"mutation { admin { search { setDbConnection(connectionId:\"jahia-cloud_augmented-search\") } } }"}' \
            | jq -r '.data.admin.search.setDbConnection'
        }

        curl_clear_as_conn() {
          curl -fLSs -XPOST http://localhost:8080/modules/graphql \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            -d '{"query":"mutation { admin { search { clearDbConnection } } }"}' \
            | jq -r '.data.admin.search.clearDbConnection'
        }

        curl_remove_as_site() {
          curl -fLSs -XPOST http://localhost:8080/modules/graphql \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            -d '{"query":"mutation { admin { search { removeSite(siteKey:\"'$1'\") } } }"}' \
            | jq -r '.data.admin.search.removeSite'
        }

        curl_list_as_sites() {
          curl -fLSs -XPOST http://localhost:8080/modules/graphql \
            -H "Authorization: APIToken $__secret__API_TOKEN" \
            -H 'Origin: http://localhost:8080' \
            -H 'Content-Type: application/json' \
            -d '{"query":"query { admin { search { listSites {sites { siteKey } } } } }"}' \
            | jq -r '.data.admin.search.listSites.sites | .[] | .siteKey'
        }

        add_es(){
          result=$(curl_add_es)
          success=$(echo $result | jq -r .success)
          verified=$(echo $result | jq -r .connectionVerified)
          if [ "$success" != "Connection successfully added" ]; then
            echo "Failed to add the connection"
            exit 1
          elif [ "$verified" != "true" ]; then
            echo "The new connection could not be verified"
            exit 1
          fi
          echo "ES connection added in ES Connector"
        }

        current_es_connection=$(get_current_es_connection)
        if [ "$current_es_connection" = "null" ]; then
          echo "No ES connection found in AS module"
          add_es
        elif [ "$current_es_connection" = "${globals.esConnectionName}" ]; then
          echo "Connection already configured, we recreate it"
          # to be absolutely sure that you can remove the connection,
          # first check whether any sites are registered in AS and remove them if necessary
          for site in $(curl_list_as_sites); do
            echo "Sitekey $site is registred on augmented search"
            result=$(curl_remove_as_site $site)
            if [ "$result" != "Successful" ]; then
              echo "Error when removing $site from augmented search"
              exit 1
            else
              echo "$site is now removing from augmented search"
            fi
          done
          result=$(curl_clear_as_conn)
          if [ "$result" != "Successful" ] && [ "$result" != "Exist already" ]; then
            echo "Failed to clear AS database connection"
            exit 1
          fi
          echo "AS connection is clear"
          result=$(curl_delete_es)
          if [ "$result" != "Successfully removed ElasticSearch connection" ]; then
            echo "Failed to remove the old connection but may be normal, so we can continue"
          fi
          echo "Old ES connection is now removed"
          add_es
        fi

        result=$(curl_set_as_conn)
        if [ "$result" != "Successful" ]; then
          echo "Failed to use the ${globals.esConnectionName} connection for AS"
          exit 1
        fi
        echo "AS is now using the new ES connection"
    - if (env.region == "aws-univ"):
        set:
          esSsl: 'false'
    - else:
        set:
          esSsl: 'true'
    - env.control.AddContainerEnvVars [cp, proc]:
      vars:
        JAHIA_ELASTICSEARCH_ADDRESSES: ${this.esEndpoint}
        JAHIA_ELASTICSEARCH_USERNAME: ${env.envName}
        JAHIA_ELASTICSEARCH_PASSWORD: ${globals.__secret__elasticsearch_password}
        JAHIA_ELASTICSEARCH_SSL_ENABLE: ${this.esSsl}

  setupModules:
    - setupAugSearch
    - setupESConnector

  enableDatadogAugSearchCheck:
    - cmd[proc,cp]: |-
        check_conf_path="/etc/datadog-agent/conf.d/augmented_search.d/augmented_search.yaml-disabled"
        check_conf_path_enabled="/etc/datadog-agent/conf.d/augmented_search.d/augmented_search.yaml"
        if [ ! -f $check_conf_path_enabled ]; then
          mv $check_conf_path $check_conf_path_enabled
          systemctl restart datadog-agent
        fi
