---
type: update
version: 1.5.2
name: migrate nodes
logo: ../../assets/common/jahia-logo-70x70.png
id: migrate-node
description:
  short: Jahia Cloud - migrate node
  text: migrate node from an HN to another

ssl: true
skipNodeEmails: true

mixins:
  - ../../mixins/common.yml
  - ../../mixins/jahia.yml
  - ../../mixins/jcustomer.yml
  - ../../mixins/haproxy.yml
  - ../../mixins/mariadb.yml

onBeforeInit: |
      hns = jelastic.administration.cluster.gethdnodes("cluster", session).array;
      list = [];
      setting = {
        "type": "list",
        "caption": "HN",
        "name": "destination",
        "required": true,
        "values": []
      };
      hns.forEach(
        function(hn) {
          if (hn["status"] != "INFRASTRUCTURE_NODE") {
            setting.values.push({"caption": hn["hostname"], "value": hn["id"]});
          }
        }
      );
      resp = { result: 0, settings: {fields: []} };
      resp.settings.fields.push(setting);
      resp.settings.fields.push({"type": "string", "caption": "Id of the node to migrate", "required": true, "name": "nodeId"});
      return resp


onInstall:
  - checkCompatibilityAndDetermineNodeAndEnvType
  - logEvent:
      target: ${settings.nodeId}
      title: "Restarting node ${settings.nodeId}"
      text: "${settings.nodeId} node is going to be restarted"
  - muteDatadogHost:
      target: ${settings.nodeId}
      duration: 60

  - if ("${globals.envType}" == "jahia"):
    - if ("${globals.nodeType}" == "bl"):
        migrateNode
    - elif ("${globals.nodeType}" == "cp"):
        browsingNode
    - elif ("${globals.nodeType}" == "proc"):
        procNode
    - elif ("${globals.nodeType}" == "sqldb"):
        dbNode
    - elif ("${globals.nodeType}" == "storage"):
        storageNode
  - else: # jCustomer env
    - if ("${globals.nodeType}" == "bl"):
        migrateNode
    - elif ("${globals.nodeType}" == "cp"):
        jcustomerNode

  - logEvent:
      target: ${settings.nodeId}
      title: "Node ${settings.nodeId} restarted"
      text: "Node ${settings.nodeId} has restarted"
  - unmuteDatadogHost:
      target: ${settings.nodeId}


actions:
  checkCompatibilityAndDetermineNodeAndEnvType:
    script: |-
        destHnId = ${settings.destination};
        nodeId = ${settings.nodeId};
        envType = "jcustomer";
        nodeType = ""
        nodeInEnv = false;
        envInfos =  jelastic.env.control.GetEnvInfo('${env.envName}', session);
        nodes = envInfos["nodes"];
        nodes.forEach(
          function(node) {
            if (node["nodeGroup"] == "proc")
              envType = "jahia";
            if (node["id"] == nodeId) {
              nodeType = node["nodeGroup"];
              nodeInEnv = true;
            }
          }
        );
        if (!nodeInEnv) {
              return {"result": 1, "errOut": "Can't find node in ${env.envName}"}
        }
        if (nodeType == "") {
              return {"result": 1, "errOut": "Can't determine node type"}
        }
        nodeGroup = envInfos["env"]["hardwareNodeGroup"];
        hns = jelastic.administration.cluster.gethdnodes("cluster", session).array;
        error = ""
        hns.forEach(
          function(hn) {
            if (hn["id"] == destHnId && hn["hardwareNodeGroup"] != nodeGroup)
              error = "HN not in the same region as the node"
          }
        );
        if (error != "") {
          return {"result": 1, "errOut": error}
        }

        setglobals = {setGlobals: {envType: envType, nodeType: nodeType}}
        return {"result": 0, onAfterReturn: setglobals, "debug": destHnId, "nodeGroup": nodeGroup}

  migrateNode:
    script: |
      return api.administration.cluster.migratenode(
          "cluster",
          session,
          ${settings.nodeId},
          ${settings.destination},
          false
      )

  browsingNode:
    - backupKarafConfsDir: ${settings.nodeId}
    - removeBrowsingNodeFromHaproxy:
        nodeId: ${settings.nodeId}
        reload: true
    - queryShutdownEndpoint:
        target: ${settings.nodeId}
    - migrateNode
    - forEach(nodes.cp):
        if ("${settings.nodeId}" == "${@i.id}"):
          - startupJahiaHealthCheck: ${settings.nodeId}
          - addBrowsingNodeToHaproxy:
              nodeId: ${@i.id}
              nodeIp: ${@i.intIP}
              reload: true
          - checkKarafConfsChecksums: ${settings.nodeId}

  procNode:
    - backupKarafConfsDir: ${settings.nodeId}
    - removeProcNodeFromHaproxy:
        reload: true
    - queryShutdownEndpoint:
        target: ${settings.nodeId}
    - cleanJRJJournalTable:
        batchSize: 10000
    - migrateNode
    - startupJahiaHealthCheck: ${settings.nodeId}
    - addProcNodeToHaproxy:
        reload: true
    - checkKarafConfsChecksums: ${settings.nodeId}

  dbNode:
    - if (nodes.sqldb.length > 1):
        - getGaleraMaster
        - forEach(nodes.sqldb): # Only restart no master nodes. It allows to change master node only once
            - getGaleraNodeNameIndex: ${@i.id}
            - if ("${globals.galeraNodeNameIndex}" != "${globals.galeraMasterIndex}"):
              - log: "Setting cloudlets on MariaDB node ${@i.id}..."
              - setDonorNode:
                  target : ${@i.id}
              - setCloudlets: ${@i.id}
            - else:
              - setGlobals:
                  origMasterId: ${@i.id}

        - script: |-
            masterIndex = "${globals.galeraMasterIndex}".slice(-1);
            newMasterIndex = ((masterIndex + 1) % 3) + 1
            return {'result':0, 'newMasterIndex': newMasterIndex}

        - proxysqlSwitchMaster:
            target: ${response.newMasterIndex}

        - setDonorNode:
            target: ${globals.origMasterId}
    - else:
        stopAllJahiaNodes
    - migrateNode
    - checkMariadbHealth:
        target: ${this}
        maxDuration: 300
    - if (nodes.sqldb.length > 1):
        checkGaleraClusterHealth: ${this}
    - else:
        startAllJahiaNodes

  stopAllJahiaNodes:
    - backupKarafConfsDir: cp, proc
    - removeProcNodeFromHaproxy:
        reload: true
    - forEach(nodes.cp):
      - removeBrowsingNodeFromHaproxy:
          nodeId: ${@i.id}
          reload: true
    - queryShutdownEndpoint:
        target: cp, proc
    - cmd[cp, proc]: |-
        service tomcat stop

  startAllJahiaNodes:
    - cmd[proc]: |-
        service tomcat start
    - startupJahiaHealthCheck: proc
    - addProcNodeToHaproxy:
        reload: true
    - cmd[cp]: |-
        service tomcat start
    - forEach(nodes.cp):
        - startupJahiaHealthCheck: ${@i.id}
        - addBrowsingNodeToHaproxy:
            nodeId: ${@i.id}
            nodeIp: ${@i.intIP}
            reload: true
    - checkKarafConfsChecksums: proc, cp

  storageNode:
    - if (nodes.storage.length == 1):
        stopAllJahiaNodes
    - migrateNode
    - if (nodes.sqldb.length == 1):
        startAllJahiaNodes

  jcustomerNode:
    - removeBrowsingNodeFromHaproxy:
        nodeId: ${settings.nodeId}
        reload: true
    - migrateNode
    - forEach(nodes.cp):
        if ("${settings.nodeId}" == "${@i.id}"):
          - checkJcustomerHealthWhenStarting: ${@i.id}
          - addBrowsingNodeToHaproxy:
              nodeId: ${@i.id}
              nodeIp: ${@i.intIP}
              reload: true

