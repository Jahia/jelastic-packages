---
type: update
version: 1.5
name: Jahia - Snapshots an environment and stores it in the appropriate object storage
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-backup-to-bucket

globals:
  timestamp: ${settings.timestamp}
  argTimestamp: '-t "${globals.timestamp}"'
  logAction: "${settings.backtype} Backup"
  logsPath: "/var/log/jelastic-packages/backup.log"
  lowerDBConnection: 100000

mixins:
  - ../../mixins/common.yml
  - ../../mixins/elasticsearch.yml
  - ../../mixins/mariadb.yml

onInstall:
  - getBackrestAwsAccessKey
  - if ('${globals.timestamp}' == ''):
      - setTimestamp
  - if (nodes.proc):  # Jahia
      - chooseTheBestDatabaseNodeToBackup
      - clearJelasticLogs:
          target: proc
          user: tomcat
          logsPath: ${globals.logsPath}
      - clearJelasticLogs:
          target: ${globals.dbBackupNode}
          user: mysql
          logsPath: ${globals.logsPath}
      - clearJelasticLogs:
          target: bl
          user: haproxy
          logsPath: ${globals.logsPath}
      - installBackupTools:
          target: ${globals.dbBackupNode}
          logAction: ${globals.logAction}
      - installBackupTools:
          target: proc
          logAction: ${globals.logAction}
      - if (nodes.bl):  # Haproxy
          - installBackupTools:
              target: bl
              logAction: ${globals.logAction}
      - backupMariadb: ${globals.dbBackupNode}
      - backupJahia
      - if (nodes.bl):  # Haproxy
          - backupHaproxy
      - addMetadata: proc
      - rotateBackups: proc
  - else:  # Jcustomer
      # This action will be removed once all environments are migrated to EC
      - backupPreECMigrationJCustomerEnv
      - clearJelasticLogs:
          target: ${nodes.cp.first.id}
          user: root
          logsPath: ${globals.logsPath}
      - installBackupTools:
          target: ${nodes.cp.first.id}
          logAction: ${globals.logAction}
      - backupElasticsearch
      - backupJcustomer
      - addMetadata: ${nodes.cp.first.id}
      - rotateElasticsearchBackup

actions:
  setTimestamp:
    - script: |
          var diso = new Date()
          var m = diso.getMonth() + 1
          var H = diso.getHours()
          var M = diso.getMinutes()
          var d = diso.getDate()
          if(m.toString().length != 2) {m = "0" + m}
          if(H.toString().length != 2) {H = "0" + H}
          if(M.toString().length != 2) {M = "0" + M}
          if(d.toString().length != 2) {d = "0" + d}
          var timestamp = diso.getFullYear() + "-" + m + "-" + d + "T" + H + ":" + M + ":00"
          return {'result': 0, 'timestamp': timestamp}
    - setGlobals:
        timestamp: ${response.timestamp}
        argTimestamp: '-t "${response.timestamp}"'

  backupJahia:
    - cmd [proc]: |-
        ## [${globals.logAction}] - 3/5
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd jelastic_backup
        tar -cz -H posix -f digital-factory-data.tar.gz -C / data/digital-factory-data/ 2>>${globals.logsPath}
        if [ "$?" -gt 1 ]; then
          echo "tar command return an error code greater than 1. Exiting" >>${globals.logsPath}
          exit 1
        fi
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f digital-factory-data.tar.gz ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -f digital-factory-data.tar.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during jahia data backup. ${response.errOut}"
    - cmd [proc]: |-
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd jelastic_backup
        tar -cz -H posix -f digital-factory-config.tar.gz -C / opt/tomcat/conf/digital-factory-config/ 2>>${globals.logsPath} || exit 1
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f digital-factory-config.tar.gz ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -f digital-factory-config.tar.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during jahia configuration backup. ${response.errOut}"
    - cmd [proc]: |-
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd jelastic_backup
        grep -E "^(jahia|tomcat)_cfg_" /.jelenv | grep -v "jahia_cfg_mvnPath" > jahia-env-vars 2>>${globals.logsPath} || exit 1
        gzip jahia-env-vars 2>>${globals.logsPath} || exit 1
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f jahia-env-vars.gz ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -f jahia-env-vars.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during environment variables backup. ${response.errOut}"

  addMetadata:
    - cmd [${this}]: |-
        ## [${globals.logAction}] - 4/5
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd jelastic_backup
        python3 backrest.py -a addmeta --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} ${globals.argTimestamp} -m ${settings.backtype} --displayname '${env.displayName}' 2>>${globals.logsPath} || exit 1
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during backup's metadata definition. ${response.errOut}"

  rotateBackups:
    - cmd [${this}]: |-
        ## [${globals.logAction}] - 5/5
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd jelastic_backup
        python3 backrest.py -a rotate --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} ${globals.argTimestamp} -m ${settings.backtype} -k ${settings.retention} 2>>${globals.logsPath} || exit 1
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during backup rotation. ${response.errOut}"

  backupElasticsearch:
    - cmd[${nodes.cp.first.id}]: |-
        ## [${globals.logAction}] - 2/5
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST)
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g')
        echo jc${cluster_role}${env.uid}${env_region}
    - setGlobals:
        account: ${response.out}
    - cmd[${nodes.cp.first.id}]: |-
        awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST
    - setGlobals:
        region: ${response.out}

    - cmd[${nodes.cp.first.id}]: |-
        awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST
    - setGlobals:
        provider: ${response.out}

    - cmd[${nodes.cp.first.id}]: |-
        curl -s \
          -u $UNOMI_ELASTICSEARCH_USERNAME:$UNOMI_ELASTICSEARCH_PASSWORD \
          https://$UNOMI_ELASTICSEARCH_ADDRESSES | python -c "import sys, json; print(json.load(sys.stdin)['version']['number'])"
    - setGlobals:
        esVersion: ${response.out}
    - getECAdminCredentials

    # Configure backup depending on cloud provider
    - if ("${globals.provider}" == "aws" || "${globals.provider}" == "ovh"):
        - cmd[${nodes.cp.first.id}]: |-
            # Create the bucket if doesn't exists
            __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
            __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
            export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
            cd jelastic_backup
            python3 elasticsearch.py --bucketname ${globals.account} --backupname ${settings.backup_name} --cloudprovider=${globals.provider} --operation=backup 2>>${globals.logsPath} || exit 1
        - if ("${globals.provider}" == "aws"):
            - set:
                region: ${globals.region}
        - else:
            - set:
                region: "eu-west-1"
        - setAwsSnapshotRepository:
            repositoryName: ${env.shortdomain}
            backupName: ${settings.backup_name}
            region: ${this.region}
            account: ${globals.account}
            logsPath: ${globals.logsPath}
            __secret__awsAccessKeyId: ${globals.__secret__backrestAwsAccessKeyId}
            __secret__awsSecretAccessKey: ${globals.__secret__backrestAwsSecretAccessKey}
    - else:
        - setAzureSnapshotRepository:
            repositoryName: ${env.shortdomain}
            __secret__awsAccessKeyId: ${globals.__secret__backrestAwsAccessKeyId}
            __secret__awsSecretAccessKey: ${globals.__secret__backrestAwsSecretAccessKey}
            operation: "backup"
            account: ${globals.account}
            backupName: ${settings.backup_name}
            logsPath: ${globals.logsPath}

    # start backup
    - cmd[${nodes.cp.first.id}]: |-
        ## [${globals.logAction}] - 3/5
        output_file=$(mktemp)
        __secret__ec_admin_credentials=${globals.__secret__ecAdminCredentials}
        timestamp=$(echo "${globals.timestamp}"| awk '{print tolower($0)}')
        return_code=$(curl -sS -o $output_file -w '%{http_code}' \
          -H 'Content-Type: application/json' \
          -u $__secret__ec_admin_credentials \
          -XPUT "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_snapshot/${env.shortdomain}/${timestamp}_${settings.backtype}?wait_for_completion=true" \
          -d'{
            "indices": "'${UNOMI_ELASTICSEARCH_INDEXPREFIX}'-*,-global-geonameentry*",
            "include_global_state": false
          }')
        exit=0
        if [ $return_code -ne 200 ]; then
          cat $output_file | tee -a ${globals.logsPath}
          exit=1
        fi
        rm -f $output_file
        exit $exit
    - if ("${response.out}" != ""):
        - return:
            type: error
            message: "An error occurred during the backup process."

  rotateElasticsearchBackup:
    - getECAdminCredentials
    - cmd[${nodes.cp.first.id}]: |-
        ## [${globals.logAction}] - 5/5
        __secret__ec_admin_credentials=${globals.__secret__ecAdminCredentials}
        export AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}" AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        cd jelastic_backup
        # filter and format snapshot list
        snapshots=$(curl -s \
          -H 'Content-Type: application/json' \
          -u $__secret__ec_admin_credentials \
          -XPUT "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_snapshot/${env.shortdomain}/_all?pretty" \
          | grep "\"snapshot\"" | grep "${settings.backtype}" |awk '{ print substr($3,2,length($3)-3)}')
        delete_count=$(( $(wc -l<<<"$snapshots") - ${settings.retention} ))
        if [ $delete_count -lt 1 ]; then
          exit 0;
        fi
        snapshots_to_delete=$(head -n $delete_count <<<"$snapshots")
        for snapshot in $snapshots_to_delete;  do
          timestamp=$(echo $snapshot |awk '{print toupper(substr($0,0,19))}')
          python3 backrest.py -a delmeta --bucketname ${globals.account} --backupname ${settings.backup_name} -t $timestamp
          if [ $? -eq 0 ]; then
            curl \
              -u $__secret__ec_admin_credentials \
              -XDELETE "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_snapshot/${env.shortdomain}/$snapshot"
            echo "snapshot $snapshot deleted" | tee -a ${globals.logsPath}
          fi
        done

  backupHaproxy:
    - cmd [${nodes.bl.first.id}]: |-
        HAPROXY_CONF_DIR=/etc/haproxy/haproxy.cfg.jahia
        HAPROXY_CUSTOMER_CONF_DIR_NAME=customer.configuration.d
        HAPROXY_CUSTOMER_ERROR_PAGES_DIR_NAME=customer.errorpages.d
        HAPROXY_CUSTOMER_ERROR_PAGES_CONF_NAME=http-errors.cfg
        HAPROXY_JAHIA_CONF=$HAPROXY_CONF_DIR/jahia-cloud.cfg
        HAPROXY_CUSTOMER_CONF_DIR=$HAPROXY_CONF_DIR/$HAPROXY_CUSTOMER_CONF_DIR_NAME
        HAPROXY_CUSTOMER_ERROR_PAGES_CONF=$HAPROXY_CONF_DIR/$HAPROXY_CUSTOMER_ERROR_PAGES_CONF_NAME
        HAPROXY_CUSTOMER_ERROR_PAGES_DIR=$HAPROXY_CONF_DIR/$HAPROXY_CUSTOMER_ERROR_PAGES_DIR_NAME
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        cd jelastic_backup
        cp -a $HAPROXY_CUSTOMER_CONF_DIR .
        cp -a $HAPROXY_CUSTOMER_ERROR_PAGES_CONF $HAPROXY_CUSTOMER_ERROR_PAGES_CONF_NAME
        cp -a $HAPROXY_CUSTOMER_ERROR_PAGES_DIR .
        touch auth_basic
        if ! grep -qe  "#acl tools.*#HTTP_AUTH_BASIC" $HAPROXY_JAHIA_CONF; then
            awk '/user .* password .*/ {print $2" "$4}' $HAPROXY_JAHIA_CONF > auth_basic
        fi
        tar -cz -H posix -f haproxy.tar.gz $HAPROXY_CUSTOMER_CONF_DIR_NAME auth_basic $HAPROXY_CUSTOMER_ERROR_PAGES_DIR_NAME $HAPROXY_CUSTOMER_ERROR_PAGES_CONF_NAME
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f haproxy.tar.gz ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -rf haproxy.tar.gz $HAPROXY_CUSTOMER_ERROR_PAGES_DIR_NAME $HAPROXY_CUSTOMER_ERROR_PAGES_CONF_NAME $HAPROXY_CUSTOMER_CONF_DIR_NAME
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during haproxy backup."

  backupMariadb:
    - cmd[${this}]: |-
        ## [${globals.logAction}] - 2/5
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region
        BACKUP_DIR=database-backup
        BACKUP_NAME=database.tar
        cd jelastic_backup
        rm -rf $BACKUP_DIR
        mkdir $BACKUP_DIR
        GALERA_INFOS=""
        if [ "$(mysql -sNe  "show global status like 'wsrep_ready'"|grep ON)" != "" ]; then
          GALERA_INFOS="--galera-info"
        fi
        ionice -n 5 mariabackup --backup --target-dir=$BACKUP_DIR $GALERA_INFOS --compress --compress-threads=2 --user mysql 2>> ${globals.logsPath} || exit 1
        tar -H posix -C "$PWD/$BACKUP_DIR" -cf $BACKUP_NAME . 2>> ${globals.logsPath}
        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f $BACKUP_NAME ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -rf $BACKUP_DIR $BACKUP_NAME
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during database backup."

  chooseTheBestDatabaseNodeToBackup:
    - if (nodes.sqldb.length > 1):
        # choose the node having the lowest number of openened connections
        - forEach(i:nodes.sqldb):
            chooseIfLessConnections: ${@i.id}
    - else:
        - setGlobals:
            dbBackupNode: ${nodes.sqldb.first.id}

  chooseIfLessConnections:
    - cmd[${this}]: mysql -sNe "select count(host) from information_schema.processlist"
    - if (${response.out} < ${globals.lowerDBConnection}):
        - setGlobals:
            lowerDBConnection: ${response.out}
            dbBackupNode: ${this}
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during database backup."

  backupJcustomer:
    - cmd [${nodes.cp.first.id}]: |-
        ## [${globals.logAction}] - 3/5
        __secret__AWS_ACCESS_KEY_ID="${globals.__secret__backrestAwsAccessKeyId}"
        __secret__AWS_SECRET_ACCESS_KEY="${globals.__secret__backrestAwsSecretAccessKey}"
        export AWS_ACCESS_KEY_ID="$__secret__AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$__secret__AWS_SECRET_ACCESS_KEY"
        provider=$(awk -F'=' '$1=="JEL_CLOUDPROVIDER" {print $2}' /metadata_from_HOST); if [ "$provider" != "aws" ]; then aws_region='eu-west-1'; else aws_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST); fi; export AWS_DEFAULT_REGION="$aws_region"
        cluster_role=$(awk -F'=' '$1=="JEL_ENV_ROLE" {print $2}' /metadata_from_HOST); export cluster_role
        env_region=$(awk -F'=' '$1=="JEL_REGION" {print $2}' /metadata_from_HOST | sed 's/[[:punct:]]//g'); export env_region

        cd jelastic_backup
        echo "Backup unomi env vars" >> ${globals.logsPath}
        grep -P '^UNOMI_(?!ELASTICSEARCH)' /.jelenv | grep -v "^UNOMI_ELASTICSEARCH_" > jcustomer-env-vars 2>>${globals.logsPath}
        gzip jcustomer-env-vars 2>>${globals.logsPath} || exit 1

        python3 backrest.py -a upload --bucketname jc${cluster_role}${env.uid}${env_region} --backupname ${settings.backup_name} -f jcustomer-env-vars.gz ${globals.argTimestamp} -m ${settings.backtype} 2>>${globals.logsPath} || exit 1
        rm -f jcustomer-env-vars.gz
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred during environment variables backup. ${response.errOut}"


########################################### LEGACY ACTIONS ###########################################
############# TO BE REMOVED WHEN ALL ELASTICSEARCH ARE MIGRATED TO ELASTIC CLOUD #####################
  backupPreECMigrationJCustomerEnv:
    - script: |-
        const currentVersion = jelastic.env.control.GetNodeGroups("${env.envName}", session).object.filter(function (object) {
            return object.name == "cp";
        }).pop().envVersion;
        return {'result': 0, 'preECMigration': (11 > currentVersion)}

    - if (${response.preECMigration}):
        # Call backup package with v1.7.1 commit hash.
        # Used instead of the tag in case somebody break the tag and creates an infinite loop
        - install:
            jps: "https://raw.githubusercontent.com/Jahia/jelastic-packages/da22414d6d93df36b4da5bc516df21e0873345e7/packages/common/backup.yml"
            settings:
              backup_name: ${settings.backup_name}
              timestamp: ${settings.timestamp}
              retention: ${settings.retention}
              backtype: ${settings.backtype}
        - return:
            type: success


settings:
  fields:
    - name: backup_name
      type: string
      caption: Backup Name
      vtype: text
      required: true
    - name: timestamp
      caption: timestamp in format %Y-%m-%dT%H:%M:00
      required: false
      type: string
    - name: retention
      caption: how many backup do you want to keep
      type: string
      default: 15
    - name: backtype
      caption: is this a manual or auto backup
      type: string
      default: manual
