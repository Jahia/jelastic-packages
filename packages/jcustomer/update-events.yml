---
type: update
version: 1.5.2
name: Unomi - Update events
logo: ../../assets/common/jahia-logo-70x70.png
id: unomi-update-events
description:
  short: Unomi - Update events


mixins:
  - ../../mixins/common.yml
  - ../../mixins/jcustomer.yml
  - ../../mixins/elasticsearch.yml
  - ../../mixins/jahia.yml
  - ../../mixins/haproxy.yml

onBeforeScaleIn[cp]:
  - forEach(event.response.nodes):
      - removeBrowsingNodeFromHaproxy:
          nodeId: ${@i.id}
          reload: true

onBeforeServiceScaleOut[cp]:
  - saveUnomiRootPassword

onAfterServiceScaleOut[cp]:
  - getUnomiRootPassword
  - forEach(event.response.nodes):
      - setupUnomi:
          nodeId: ${@i.id}
          __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}
      - setupDatadogAgentUnomi:
          target: ${@i.id}
          __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}
      - checkJcustomerHealthWhenStarting: ${@i.id}
  - resetHaproxyBackends

onBeforeRestartNode[cp]:
  removeBrowsingNodeFromHaproxy:
    nodeId: ${event.params.nodeId}
    reload: true

onAfterRestartNode[cp]:
  - if ('${event.params.nodeGroup:}'):
      forEach(nodes.cp):
        - checkJcustomerHealthWhenStarting: ${@i.id}
        - reapplyPatches: ${@i.id}
        - addBrowsingNodeToHaproxy:
            nodeId: ${@i.id}
            nodeIp: ${@i.intIP}
            reload: true
  - else:
      forEach(nodes.cp):
        if ("${event.params.nodeId}" == "${@i.id}"):
          - checkJcustomerHealthWhenStarting: ${@i.id}
          - reapplyPatches: ${@i.id}
          - addBrowsingNodeToHaproxy:
              nodeId: ${@i.id}
              nodeIp: ${@i.intIP}
              reload: true


onBeforeRedeployContainer[cp]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - forEach(nodes.cp):
          removeBrowsingNodeFromHaproxy:
            nodeId: ${@i.id}
            reload: true
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - removeBrowsingNodeFromHaproxy:
          nodeId: ${event.params.nodeId}
          reload: true
  - saveUnomiRootPassword

onAfterRedeployContainer[cp]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - onAfterRedeployJcustomerContainer: ${event.params.nodeGroup}
      - forEach(nodes.${event.params.nodeGroup}):
          - setupUnomi:
              nodeId: ${@i.id}
              __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}
          - checkJcustomerHealthWhenStarting: ${@i.id}
      - resetHaproxyBackends
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - onAfterRedeployJcustomerContainer: ${event.params.nodeId}
      - setupUnomi:
          nodeId: ${event.params.nodeId}
          __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}
      - forEach(nodes.cp):
          if ("${event.params.nodeId}" == "${@i.id}"):
            - checkJcustomerHealthWhenStarting: ${@i.id}
            - addBrowsingNodeToHaproxy:
                nodeId: ${@i.id}
                nodeIp: ${@i.intIP}
                reload: true

onAfterRedeployContainer[bl]:
  - if ('${event.params.nodeGroup:}'):
      # Handle RedeployContainersByGroup
      - setJelasticUserAsRoot: ${event.params.nodeGroup}
      - installRequiredPackages:
          target: ${event.params.nodeGroup}
          packages: "jq rclone"
      - createSslCert: ${event.params.nodeGroup}
      - cmd[${event.params.nodeGroup}]: |-
          service haproxy restart
      - setupDatadogAgentHaproxy: ${event.params.nodeGroup}
      - environment.nodegroup.ApplyData [bl]:
          data:
            productName: haproxy
            productVersion: ${nodes.bl.first.version}
  - elif ('${event.params.nodeId:}'):
      # Handle RedeployContainerById
      - setJelasticUserAsRoot: ${event.params.nodeId}
      - installRequiredPackages:
          target: ${event.params.nodeId}
          packages: "jq rclone"
      - createSslCert: ${event.params.nodeId}
      - cmd[${event.params.nodeId}]: |-
          service haproxy restart
      - setupDatadogAgentHaproxy: ${event.params.nodeId}
      - environment.nodegroup.ApplyData [bl]:
          data:
            productName: haproxy
            productVersion: ${nodes.bl.first.version}

onAfterScaleIn[bl]:
  - env.control.AddContainerEnvVars[cp, proc]:
    vars: {"HAPROXY_NODES_COUNT": "${nodes.bl.length}"}
  - cmd[cp,proc]: service datadog-agent restart
  - refreshUnomiAllowedIPs

onAfterScaleOut[bl]:
  - forEach(event.response.nodes):
      - setJelasticUserAsRoot: ${@i.id}
      - installRequiredPackages:
          target: ${@i.id}
          packages: "jq rclone"
      - createSslCert: ${@i.id}
      - cmd[${@i.id}]: |-
          service haproxy restart
  - env.control.AddContainerEnvVars[cp, proc]:
    vars: {"HAPROXY_NODES_COUNT": "${nodes.bl.length}"}
  - cmd[cp,proc]: service datadog-agent restart
  - refreshUnomiAllowedIPs

onBeforeDelete:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Deleting environment $envName"
      text: "$envName is going to be deleted"
  - deleteEnvLinkJcustomer
  - destroyESDeployment
  - if ("${env.status}" == 1):
      - muteDatadogHost:
          target: "*"
          duration: 2880 # 48h
      - muteEnvWideMonitors
  - deleteEnvironment
  - removeAllSecrets

onBeforeStop:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Stopping environment $envName"
      text: "$envName is going to stop"
  - muteDatadogHost:
      target: "*"
      duration: 2880 # 48h
  - muteEnvWideMonitors
  - updateEnvStatusInPapi:
      status: stopped

onAfterStart:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "$envName environment started"
      text: "$envName is started"
  - updateS3LogsCredentials
  - checkJcustomerHealthWhenStarting: cp
  - reapplyPatches: cp
  - resetHaproxyBackends
  - unmuteDatadogHost:
      target: "*"
  - unmuteEnvWideMonitors
  - updateEnvStatusInPapi:
      status: running

onBeforeMigrate:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Migration triggered for $envName environment"
      text: "$envName going to be migrate"
  - muteDatadogHost:
      target: "*"
      duration: 60
  - muteEnvWideMonitors

onAfterMigrate:
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Environment $envName migrated"
      text: "$envName has been migrated"
  - unmuteDatadogHost:
      target: "*"
  - unmuteEnvWideMonitors

onBeforeRestartNode:
  - logEvent:
      target: ${event.params.nodeid}
      title: "Restarting node ${event.params.nodeid}"
      text: "${event.params.nodeid} node is going to be restarted"
  - muteDatadogHost:
      target: ${event.params.nodeId}
      duration: 20

onAfterRestartNode:
  - logEvent:
      target: ${event.params.nodeid}
      title: "Node ${event.params.nodeid} restarted"
      text: "Node ${event.params.nodeid} has restarted"
  - unmuteDatadogHost:
      target: ${event.params.nodeId}

onBeforeRedeployContainer:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "Redeploying ${event.params.nodeGroup} nodes to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes are going to be redeploy to ${event.params.tag} version"
      - muteDatadogHost:
          target: ${event.params.nodeGroup}
          duration: 20
  - elif ('${event.params.nodeid.print()}' != ''):
      - logEvent:
          target: ${nodes.cp.first.id}
          title: "Redeploying node ${event.params.nodeid} to ${event.params.tag} version"
          text: "Node ${event.params.nodeid} is going to be redeploy to ${event.params.tag} version"
      - muteDatadogHost:
          target: ${event.params.nodeId}
          duration: 20

onAfterRedeployContainer:
  - if ('${event.params.nodeGroup.print()}' != ''):
      - fetchRcloneFiles: ${event.params.nodeGroup}
      - getLogEventScript: ${event.params.nodeGroup}
      - logEvent:
          target: ${event.params.nodeGroup}
          title: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
          text: "${event.params.nodeGroup} nodes have been redeployed to ${event.params.tag} version"
      - unmuteDatadogHost:
          target: ${event.params.nodeGroup}
      - installPapiScript: ${event.params.nodeGroup}
  - elif ('${event.params.nodeid.print()}' != ''):
      - fetchRcloneFiles: ${event.params.nodeId}
      - getLogEventScript: ${event.params.nodeid}
      - logEvent:
          target: ${event.params.nodeid}
          title: "Node ${event.params.nodeid} redeployed to ${event.params.tag} version"
          text: "Node ${event.params.nodeid} has been redeploy to ${event.params.tag} version"
      - unmuteDatadogHost:
          target: ${event.params.nodeId}
      - installPapiScript: ${event.params.nodeId}

onBeforeScaleIn:
  forEach(event.response.nodes):
    - logEvent:
        target: ${@i.id}
        title: "Scaling in ${event.params.nodeGroup} node group"
        text: "Node ${@i.id} is going to be removed"
    - muteDatadogHost:
        target: ${@i.id}
        duration: 2880 # 48h

onAfterServiceScaleOut:
  forEach(event.response.nodes):
    - getLogEventScript: ${@i.id}
    - logEvent:
        target: ${@i.id}
        title: "Scaled out ${event.params.nodeGroup} node group"
        text: "Node ${@i.id} has been added"
    - installPapiScript: ${@i.id}
