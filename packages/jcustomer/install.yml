---
type: install
version: 1.5.2
name: Unomi - Install
logo: ../../assets/common/jahia-logo-70x70.png
id: jahia-unomi
description:
  short: Unomi - Install
  text: This is the Jahia Cloud package for Unomi.
    Apache Unomi is a Java Open Source customer data platform, a Java server
    designed to manage customers, leads and visitors data and help personalize
    customers experiences while also offering features to respect visitor
    privacy rules (such as GDPR).

globals:
  jcustomer_env_version: 24
  unomi_version: ${settings.productVersion}
  __secret__elasticsearch_password: ${fn.password(20)}
  workato_ips:
    - 3.65.225.246
    - 3.66.45.94
    - 18.198.249.58
    - 34.226.132.221
    - 52.5.142.59
    - 52.54.43.157
ssl: true
skipNodeEmails: true

mixins:
  - ../../mixins/common.yml
  - ../../mixins/jcustomer.yml
  - ../../mixins/elasticsearch.yml

onBeforeInstall: |
  var unomiVersion = '${settings.productVersion}';
  var envmode = '${settings.envmode}';
  var __secret__elasticsearchPassword = "${globals.__secret__elasticsearch_password}";
  var __secret__DATADOGAPIKEY = "${settings.ddogApikey}";

  var resp = {
    result: 0,
    nodes: []
  }

  // jCustomer nodes

  var jCustomerDockerTag = "${settings.productVersion}";
  if ("${settings.jCustomerDockerTagSuffix}" != "") {
    jCustomerDockerTag += "_${settings.jCustomerDockerTagSuffix}"
  }

  switch ("${settings.jCustomerNodeSize}") {
    case 'large':
      var jCustomerCloudlets = 40;
      var jCustomerXmx = "3G";
      break;
    case 'medium':
      var jCustomerCloudlets = 32;
      var jCustomerXmx = "2458M";
      break;
    case 'small':
    default:
      var jCustomerCloudlets = 26;
      var jCustomerXmx = "2G";
  }

  node_unomi = {
    nodeType: "jcustomer",
    tag: jCustomerDockerTag,
    displayName: "jCustomer",
    count: ${settings.jCustomerNodeCount},
    cloudlets: jCustomerCloudlets,
    nodeGroup: 'cp',
    startServiceOnCreation: false,
    env: {
      DATADOG_APM_ENABLED: true,
      DATADOGAPIKEY: __secret__DATADOGAPIKEY,
      UNOMI_VERSION: unomiVersion,
      UNOMI_HTTP_PORT: '80',
      UNOMI_ELASTICSEARCH_SSL_ENABLE: 'true',
      UNOMI_ELASTICSEARCH_CLUSTERNAME: 'jahia-dx',
      UNOMI_ELASTICSEARCH_INDEXPREFIX: '${settings.shortdomain}__jc',
      UNOMI_ELASTICSEARCH_USERNAME: '${settings.shortdomain}',
      UNOMI_ELASTICSEARCH_PASSWORD: __secret__elasticsearchPassword,
      UNOMI_THIRDPARTY_PROVIDER1_IPADDRESSES: "127.0.0.1,::1,${globals.workato_ips.join(,)}",
      UNOMI_ELASTICSEARCH_DEFAULTINDEX_SHARDS: 1,
      UNOMI_ELASTICSEARCH_MONTHLYINDEX_SHARDS: 1,
      UNOMI_ELASTICSEARCH_DEFAULTINDEX_REPLICAS: 1,
      UNOMI_ELASTICSEARCH_MONTHLYINDEX_REPLICAS: 1,
      UNOMI_EVENT_PURGE_EXISTTIME: -1,
      UNOMI_MONTHLY_INDEX_PURGE_EXISTTIME: -1,
      UNOMI_PROFILE_PURGE_EXISTTIME: -1,
      UNOMI_PROFILE_PURGE_INACTIVETIME: -1,
      XMX: jCustomerXmx,
      XMS: "1G",
      envName: "${settings.shortdomain}",
      _ROLE: 'unomi',
      _PROVIDE: 'unomi',
      envmode: envmode,
    }
  }

  resp.nodes.push(node_unomi)
  return resp

nodes: definedInOnBeforeInstall

# --Events --
onInstall:
  - if("HideThisLine" && "${settings.rootPassword}"):
      setGlobals:
        __secret__unomi_root_password_b64: ${settings.rootPassword.toBase64()}
  - else:
      - set:
          __secret__random_unomi_root_password: ${fn.password(20)}
      - setGlobals:
          __secret__unomi_root_password_b64: ${this.__secret__random_unomi_root_password.toBase64()}
  - environment.nodegroup.ApplyData [cp]:
      data:
        productName: unomi
        productVersion: ${settings.productVersion}
  - setJournaldLimit
  - getLogEventScript: cp
  - installPapiScript: cp
  - createJelasticPackagesLogDir: cp
  - addEnvMetadataToNodeGroup:
      __secret__vaultRoleId: ${settings.vaultRoleId}
      __secret__vaultSecretId: ${settings.vaultSecretId}
      vaultClusterUrl: ${settings.vaultClusterUrl}
      papiHostname: ${settings.papiHostname}
      papiApiVersion: ${settings.papiApiVersion}
      papiEnvId: ${settings.papiEnvId}
  - setCloudConf
  - setupES:
      papiEnvId: ${settings.papiEnvId}
  - setJcustomerApiKey
  - configureDatadogAPM: cp
  - forEach(nodes.cp):
      - setupUnomi:
          nodeId: ${@i.id}
          __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}
  - initRedeployConfig
  - setupDatadogAgentUnomi:
      target: cp
      __secret__unomi_root_password_b64: ${globals.__secret__unomi_root_password_b64}
  - setEnvVersion: ${globals.jcustomer_env_version}
  - install:
      jps: "${baseUrl}/update-events.yml"
  - setJelEnvRoleInNodeGroupData
  - setupRclone
  - updateEnvStatusInPapi:
      status: running
  - setEnvironmentAppId


settings:
  fields:
    - name: productVersion
      type: string
      caption: jCustomer Version
      required: true
    - name: jCustomerNodeCount
      type: list
      caption: jCustomer node count
      values:
        "1": single
        "2": 2 nodes cluster
        "3": 3 nodes cluster
        "4": 4 nodes cluster
        "5": 5 nodes cluster
        "6": 6 nodes cluster
        "7": 7 nodes cluster
      default: 1
    - name: jCustomerNodeSize
      type: list
      caption: jCustomer node size
      values:
        small: small
        medium: medium
        large: large
      default: small
    - name: jCustomerDockerTagSuffix
      type: string
      caption: jCustomer Docker tag suffix
    - name: ddogApikey
      type: string
      caption: Datadog API KEY
      required: true
      vtype: text
    - name: rootPassword
      type: string
      caption: Unomi root password
    - name: vaultRoleId
      type: string
      caption: Vault Role Id
    - name: vaultSecretId
      inputType: password
      type: string
      caption: Vault Secret Id
    - name: vaultClusterUrl
      type: string
      caption: Vault Cluster Url
    - name: papiHostname
      type: string
      caption: Papi hostname
    - name: papiApiVersion
      type: string
      caption: Papi API Version
    - name: papiEnvId
      type: string
      caption: Papi Environment Id
    - name: envmode
      type: string
      caption: accepted values are prod or dev
    # This setting is necessary because used in OnBeforeInstall event and there is
    # no other way to get the shortdomain in this event (even if it is passed as a parameter)
    - name: shortdomain
      type: envname
      caption: Environment
      required: true
