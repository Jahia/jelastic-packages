---
type: update
version: 1.5.2
name: jCustomer - Update geoname index and aliases
id: jcustomer-update-geoname-index-and-aliases
logo: ../../assets/common/jahia-logo-70x70.png
description:
  short: jCustomer - Update geoname index and aliases

mixins:
  - ../../mixins/common.yml

onInstall:
  - ForEach(nodes.cp):
      - checkDatadogAgentCheck:
          target: ${@i.id}
          checkName: jcustomer_status
  - updateGeonameIndexAndAliases: ${nodes.cp.first.id}

actions:
  updateGeonameIndexAndAliases:
    - cmd[${this}]: |-
        curl -flsSo allCountries.zip "http://download.geonames.org/export/dump/allCountries.zip" || exit 1
        cmp -s allCountries.zip /opt/jcustomer/jcustomer/etc/allCountries.zip
        if [[ $? -eq 0 ]]; then
          rm -rf allCountries.zip
          echo "[INFO] Geoname index is up-to date"
        fi
    - if ("${response.out}" == ""):
        - getPapiInfoAll
        - cmd[${this}]: |-
            __secret__PAPI_TOKEN="${globals.__secret__papiToken}"
            export PAPI_TOKEN="$__secret__PAPI_TOKEN"
            export PAPI_HOSTNAME="${globals.papiHostname}"
            export PAPI_ENV_ID="${globals.papiEnvId}"
            export PAPI_API_VERSION="${globals.papiApiVersion}"

            environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
            ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
            ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")
            es_endpoint=$(echo $ec_deployment | jq -r .es_endpoint)

            creds=$(papi.py -X GET "ec-deployment/$ec_deployment_id/credentials")
            password=$(echo $creds | jq -r .password)
            login=$(echo $creds | jq -r .login)

            index="global-geonameentry"
            mv allCountries.zip /opt/jcustomer/jcustomer/etc
            chown karaf: /opt/jcustomer/jcustomer/etc/allCountries.zip
            index_aliases=$(curl -fLSsu "$login:$password" "$es_endpoint/$index/_alias" | jq -r .[].aliases | jq keys[])

            for alias in $index_aliases; do
              echo "Removing alias $alias of $index index"
              curl -fLSsu "$login:$password" "$es_endpoint/_aliases" -H 'Content-Type:application/json' -d '{"actions": [{"remove": {"index": "'$index'","alias": '$alias'}}]}' || exit 1
            done

            curl -fLSsu "$login:$password" -XDELETE "$es_endpoint/$index" || exit 1

            curl -fLSsu "$login:$password" "$es_endpoint/$index" -H 'Content-Type:application/json' -s -XPUT -d '{
              "settings" : {"index" : {"number_of_shards" : 1,"number_of_replicas" : 1}},
              "mappings": {
                "properties": {
                  "admin1Code": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "admin2Code": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "admin3Code": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "admin4Code": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "asciiname": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "cc2": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "countryCode": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "dem": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "elevation": {"type": "long"},
                  "featureClass": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "featureCode": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "itemId": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "itemType": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "location": {"type": "geo_point"},
                  "modificationDate": {"type": "date"},
                  "name": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  },
                  "population": {"type": "long"},
                  "timezone": {
                    "type": "text",
                    "fields": {"keyword": {"type": "keyword","ignore_above": 256}}
                  }
                }
              }
            }'

            if [ $? -ne 0 ]; then
              echo "Failed to create $index index." && exit 1
            fi

            for alias in $index_aliases; do
              curl -fLSsu "$login:$password" "$es_endpoint/_aliases" -H 'Content-Type:application/json' -d '{"actions": [{"add": {"is_write_index": true,"index": "'$index'","alias": '$alias'}}]}'
              if [ $? -ne 0 ]; then
                echo "Failed to create geonameentry alias." && exit 1
              fi
            done
        - api: environment.control.RestartNodeById
          nodeId: ${this}
