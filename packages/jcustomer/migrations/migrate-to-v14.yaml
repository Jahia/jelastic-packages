---
type: update
version: 1.5.2
name: Migrate jCustomer env to v14
id: migrate-jcustomer-env-v14

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jcustomer.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 14

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJcustomerHealth: cp
  - checkJcustomerDatadogCustomChecks: cp
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - cleanupRolesAndUsersForMutualizedECDeployment          # PAAS-2108

  # Actions that require a restart:
  - configureDatadogAPM                                    # PAAS-2022
  - addManagePermissionToESRoles                           # PAAS-2109 and PAAS-2116

  # Restart action:
  - install:
      jps: "${globals.repoRootUrl}/packages/jcustomer/jcustomer-rolling-restart.yml"

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJcustomerHealth: cp
  - checkJcustomerDatadogCustomChecks: cp
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}/../update-events.yml"

  configureDatadogAPM:
    - cmd [proc, cp]: |-
        dd_dir=/opt/jcustomer/jcustomer/datadog
        dd_file=$dd_dir/dd-java-agent.jar
        [ -d  $dd_dir ] || mkdir $dd_dir
        if [ ! -f $dd_file ]; then
          curl -fSsLo $dd_file https://dtdg.co/latest-java-tracer || exit 1
          chown karaf: -R /opt/jcustomer/jcustomer/datadog
        fi
    - api: env.control.AddContainerEnvVars
      nodeGroup: cp
      vars: {"DATADOG_APM_ENABLED": "true"}
    - cmd [cp]: |-
        setenv=$(find /opt/jcustomer/jcustomer/bin -name setenv)
        if ! grep -q "APM_OPTS" $setenv; then
          echo 'APM_OPTS="-javaagent:'${JCUSTOMER_HOME}'/jcustomer/datadog/dd-java-agent.jar -Ddd.logs.injection=true -Ddd.service=jcustomer -Ddd.env='${env.envName}' -Ddd.profiling.enabled=true"' >> $setenv
          # Because cloudscripting interprets the bash form ${<variable name>:<something>} as its own placeholder, we have to use a trick
          echo '${DATADOG_APM_ENABLED¤-true} && JAVA_OPTS+=" $APM_OPTS"' | sed 's/¤/:/' >> $setenv
        fi
    - cmd [cp]: |-
        set_dd_tag="/usr/local/bin/set_dd_tags.sh"
        if ! grep -q "apm_config" $set_dd_tag; then
          sed -i "/logs_enabled/i echo \"apm_config:\"\necho \"  enabled: \${DATADOG_APM_ENABLED:-true}\"" $set_dd_tag
        fi

  addManagePermissionToESRoles:
  - if ("${globals.papiToken.print()}" == ""):
      getPapiInfoAll
  - cmd [${nodes.cp.first.id}]: |-
      export PAPI_TOKEN="${globals.papiToken}"
      export PAPI_HOSTNAME="${globals.papiHostname}"
      export PAPI_ENV_ID="${globals.papiEnvId}"
      export PAPI_API_VERSION="${globals.papiApiVersion}"

      environment=$(papi.py -X GET "paas-environment/$PAPI_ENV_ID")
      ec_deployment_id=$(echo $environment | jq -r .ec_deployment_id)
      ec_deployment=$(papi.py -X GET "ec-deployment/$ec_deployment_id")

      kibana_endpoint=$(echo $ec_deployment | jq -r .kibana_endpoint)

      creds=$(papi.py -X GET "ec-deployment/$ec_deployment_id/credentials")
      password=$(echo $creds | jq -r .password)
      login=$(echo $creds | jq -r .login)

      # Create Kibana role
      curl -fLSsu "$login:$password" "$kibana_endpoint/api/security/role/${env.envName}" -XPUT \
           -H 'Content-Type:application/json' -H "kbn-xsrf: reporting" \
           -d '{"metadata": {},"elasticsearch": {"cluster": ["monitor", "manage_index_templates", "manage"], "indices": [{"names": ["${env.envName}_*"], "privileges": ["all"]},{"names": ["global-geonameentry"], "privileges": ["view_index_metadata"]}] }, "kibana": [{"base": ["all"], "feature": {}, "spaces": ["${env.envName}"]}]}'
      if [ $? -ne 0 ]; then
        echo "Failed to update kibana role." && exit 1
      fi
