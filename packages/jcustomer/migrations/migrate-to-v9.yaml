---
type: update
version: 1.5.2
name: Migrate jCustomer env to v9
id: migrate-jcustomer-env-v9

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/elasticsearch.yml"
  - "../../../mixins/jcustomer.yml"

globals:
  version: 9

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJcustomerHealth: cp
  - checkJcustomerDatadogCustomChecks: cp
  - checkEsClusterStatus
  - checkElasticsearchDatadogCustomChecks: es
  - eventsUpdate
  ### End Pre-checks


  - removeHazelcastEnvVar                   # PAAS-1779
  - updateEnvFileSource: cp, es             # PAAS-1772
  - useEnvmodeEnvVar                        # PAAS-1811
  - moveEnvMetadataToNodeGroup              # PAAS-1844

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJcustomerHealth: cp
  - checkJcustomerDatadogCustomChecks: cp
  - checkEsClusterStatus
  - checkElasticsearchDatadogCustomChecks: es
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}/../update-events.yml"

  removeHazelcastEnvVar:
    - env.control.RemoveContainerEnvVars [cp]:
      vars:
        [UNOMI_HAZELCAST_TCPIP_MEMBERS]
    - forEach(nodes.cp):
        - cmd[${@i.id}]: |-
            systemctl stop karaf
            envfile=$(find /opt/jcustomer/jcustomer/bin -name setenv)
            sed -i "/UNOMI_HAZELCAST_TCPIP_MEMBERS/d" $envfile
            rm -rf /opt/jcustomer/jcustomer/data/cache/*
            systemctl start karaf
          user: root
        - checkJcustomerHealthWhenStarting: ${@i.id}

  updateEnvFileSource:
    cmd[${this}]: |-
      OLD="source /.jelenv"
      NEW="source /etc/profile"
      log_event=/usr/local/bin/log_event.sh
      sed -i "s|$OLD|$NEW|" $log_event
    user: root

  useEnvmodeEnvVar:
    - api: env.control.GetContainerEnvVarsByGroup
      nodeGroup: cp
    - if (! "${response.object.envmode.print()}"):
        - if (${nodes.es.length} > 1):
            - set:
                envmodeValue: production
        - else:
            - set:
                envmodeValue: development
        - env.control.AddContainerEnvVars[*]:
            vars:
              envmode: ${this.envmodeValue}
    - cmd[*]: |-
        sed 's/jahia_cfg_operatingMode/envmode/' -i /usr/local/bin/set_dd_tags.sh
      user: root

  moveEnvMetadataToNodeGroup:
    - getEnvData
    - updateNodeGroupData: cp
    - removeEnvVars: cp, es

  getEnvData:
    - script: |
        const envName = "${env.envName}";
        const container_env_vars = jelastic.env.control.GetContainerEnvVarsByGroup(envName, session, nodeGroup='cp');
        const orgName = container_env_vars.object.ORGANIZATION_NAME;
        const vaultUrl = container_env_vars.object.VAULT_CLUSTER_URL;
        const roleId = container_env_vars.object.VAULT_ROLE_ID;
        const secretId = container_env_vars.object.VAULT_SECRET_ID;
        const papiEnvId = container_env_vars.object.PAPI_ENV_ID;
        const papiHostname = container_env_vars.object.PAPI_HOSTNAME;
        const papiApiVersion = container_env_vars.object.PAPI_API_VERSION;

        return {
          'result': 0,
          'org': orgName,
          'vault_url': vaultUrl,
          'role_id': roleId,
          'secret_id': secretId,
          'papi_env_id': papiEnvId,
          'papi_hostname': papiHostname,
          'papi_api_version': papiApiVersion
        };
    - setGlobals:
        organizationName: ${response.org}
        vaultClusterUrl: ${response.vault_url}
        vaultRoleId: ${response.role_id}
        vaultSecretId: ${response.secret_id}
        papiEnvId: ${response.papi_env_id}
        papiHostname: ${response.papi_hostname}
        papiApiVersion: ${response.papi_api_version}

  updateNodeGroupData:
    - environment.nodegroup.ApplyData [${this}]:
        data:
          ORGANIZATION_NAME: ${globals.organizationName}
          VAULT_ROLE_ID: ${globals.vaultRoleId}
          VAULT_SECRET_ID: ${globals.vaultSecretId}
          VAULT_CLUSTER_URL: ${globals.vaultClusterUrl}
          PAPI_HOSTNAME: ${globals.papiHostname}
          PAPI_API_VERSION: ${globals.papiApiVersion}
          PAPI_ENV_ID: ${globals.papiEnvId}

  removeEnvVars:
    - env.control.RemoveContainerEnvVars [${this}]:
        vars: [
            "ORGANIZATION_NAME",
            "VAULT_ROLE_ID",
            "VAULT_SECRET_ID",
            "VAULT_CLUSTER_URL",
            "PAPI_HOSTNAME",
            "PAPI_API_VERSION",
            "PAPI_ENV_ID"
        ]
