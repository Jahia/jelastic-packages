---
type: update
version: 1.5.2
name: Migrate jCustomer env to v15
id: migrate-jcustomer-env-v15

# Required for healthchecks
mixins:
  - "../../../mixins/common.yml"
  - "../../../mixins/jcustomer.yml"
  - "../../../mixins/elasticsearch.yml"

globals:
  version: 15
  jCustomerRollingRestartNeeded: false

onInstall:
  ### Pre-checks
  - checkEnvVersion: ${globals.version}
  - checkJcustomerHealth: cp
  - checkJcustomerDatadogCustomChecks: cp
  - eventsUpdate
  - setGlobalRepoRootUrl
  ### End Pre-checks

  - upgradePython                    # PAAS-2028

  # Actions that require a restart:
  - fixAPM                           # PAAS-2145

  # Restart action:
  - if (${globals.jCustomerRollingRestartNeeded}):
      - install:
          jps: "${globals.repoRootUrl}/packages/jcustomer/jcustomer-rolling-restart.yml"

  ### Post-actions
  - setEnvVersion: ${globals.version}
  - logEvent:
      target: ${nodes.cp.first.id}
      title: "Environment $envName migrated"
      text: "Environment $envName migrated to v${globals.version}"
  - checkJcustomerHealth: cp
  - checkJcustomerDatadogCustomChecks: cp
  ### End Post-actions

actions:
  eventsUpdate:
    install:
      jps: "${baseUrl}/../update-events.yml"

  fixAPM:
    - cmd[${nodes.cp.first.id}]: |-
        to_restart="false"
        if ! (pgrep -u karaf -a -f dd-java-agent.jar > /dev/null); then
          to_restart="true"
        fi
        if (grep -q '^APM' /opt/jcustomer/jcustomer/bin/setenv); then
          setenv_set="true"
        else
          setenv_set="false"
          to_restart="true"
        fi
        if [ -f /opt/jcustomer/jcustomer/datadog/dd-java-agent.jar ]; then
          agent_jar="true"
        else
          agent_jar="false"
          to_restart="true"
        fi
        if (grep -q DATADOG_APM_ENABLED /proc/$(pgrep -u karaf java)/environ); then
          apm_envvar="true"
        else
          apm_envvar="false"
          to_restart="true"
        fi
        echo """
        {
          "setenv_set": $setenv_set,
          "agent_jar": $agent_jar,
          "apm_envvar": $apm_envvar,
          "to_restart": $to_restart
        }
        """

    - script: |-
        const rep = ${response.out.toJSON()}
        const result = {"result": 0}
        return Object.assign({}, result, rep)

    - set:
        setenv_set: ${response.setenv_set}
        agent_jar: ${response.agent_jar}
        apm_envvar: ${response.apm_envvar}
        to_restart: ${response.to_restart}

    - if(${this.to_restart}):
        - cmd[cp]: |-
            if ! ${this.agent_jar}; then
              [ -d opt/jcustomer/jcustomer/datadog ] || mkdir opt/jcustomer/jcustomer/datadog
              curl -fLSso /opt/jcustomer/jcustomer/datadog/dd-java-agent.jar https://dtdg.co/latest-java-tracer || exit 1
              chown karaf: -R /opt/jcustomer/jcustomer/datadog/
            fi
            if ! ${this.setenv_set}; then
              setenv=/opt/jcustomer/jcustomer/bin/setenv
              echo 'APM_OPTS="-javaagent:'${JCUSTOMER_HOME}'/jcustomer/datadog/dd-java-agent.jar -Ddd.logs.injection=true -Ddd.service=jcustomer -Ddd.env='${env.envName}' -Ddd.profiling.enabled=true"' >> $setenv
              # Because cloudscripting interprets the bash form ${<variable name>:<something>} as its own placeholder, we have to use a trick
              echo '${DATADOG_APM_ENABLED¤-true} && JAVA_OPTS+=" $APM_OPTS"' | sed 's/¤/:/' >> $setenv
            fi
          user: root
        - if(!${this.apm_envvar}):
            - env.control.AddContainerEnvVars[cp]:
                vars: {"DATADOG_APM_ENABLED": "true"}
        - setGlobals:
            - jCustomerRollingRestartNeeded: true

  upgradePython:
  - cmd [cp]: yum erase -y python3-3.6.8
    user: root
  - installPython:
      target: cp
      python_major_version: 3
      python_minor_version: 8
  - cmd [cp]: python3 -m pip install requests boto3 "azure==4.0.0" adal
    user: root
  - cmd [cp]: |-
      tmp_file=/tmp/papi.py
      final_file=/usr/local/bin/papi.py
      curl -fLSso $tmp_file ${globals.repoRootUrl}/assets/common/papi.py || exit 1
      rm -f $final_file && mv $tmp_file $final_file
      chmod 755 $final_file
    user: root
