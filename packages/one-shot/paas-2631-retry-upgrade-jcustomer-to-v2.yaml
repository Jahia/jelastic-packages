---
type: update
version: 1.5.2
name: Unomi - Retry upgrade
id: unomi-retry-upgrade-to-v2

mixins:
  - "../../mixins/common.yml"
  - "../../mixins/elasticsearch.yml"
  - "../../mixins/jcustomer.yml"

onInstall:
  - setGlobalRepoRootUrl
  - setGlobals:
      currentVersion: ${nodes.cp.first.customitem.nodeVersion}

  # Check if env version is  2.4.0
  - isVersionEqual:
      a: "${globals.currentVersion}"
      b: "2.4.0"
      res: is240
  - if (!${globals.is240}):
      return:
        type: error
        message: "Current version must be 2.4.0"

  - muteDatadogHost:
      target: "*"
      duration: 60
  - muteEnvWideMonitors

  - enablejCustomerKarafLogin: cp
  - cmd[cp]: |-
      ${globals.jCustomerKarafConsole} unomi:stop
      rm -rf /opt/jcustomer/jcustomer/data/migration
  - restoreElasticsearch
  - cmd[cp]: |-
      ${globals.jCustomerKarafConsole} restart
  - cmd[${nodes.cp.first.id}]: |-
      ${globals.jCustomerKarafConsole} "unomi:migrate 1.9.1 true"
  - cmd[cp]: |-
      ${globals.jCustomerKarafConsole} unomi:start

  - disablejCustomerKarafLogin: cp
  - unmuteDatadogHost:
      target: "*"
  - unmuteEnvWideMonitors

actions:
  restoreElasticsearch:
    - getEnvRegion
    - getEnvCloudProvider
    - getEnvRole
    - getBucketName:
        region: ${globals.region}
        uid: ${env.uid}
        clusterRole: ${globals.envRole}
        cloudProvider: ${globals.provider}

    - script: |-
        var account="${globals.bucketName}";
        account=account.split(" ")[0];
        return {'result': 0,'account': account}
    - setGlobals:
        account: ${response.account}
        region: ${globals.regionRealName_source}

    - getECAdminCredentials

    - if ("${globals.cloudProvider_source}" == "aws"):
        - set:
            region: ${globals.region}
    - else:
        - set:
            region: "eu-west-1"
    - getBackrestAwsAccessKey
    - setAwsSnapshotRepository:
        repositoryName: ${env.shortdomain}
        backupName: ${env.envName}-pre-upgrade-v2
        region: ${this.region}
        account: ${globals.account}
        logsPath: ${globals.logsPath}
        __secret__awsAccessKeyId: ${globals.__secret__backrestAwsAccessKeyId}
        __secret__awsSecretAccessKey: ${globals.__secret__backrestAwsSecretAccessKey}
        readonly: "true"

    - cmd[${nodes.cp.first.id}]: |-
        output_file=$(mktemp)
        __secret__ec_admin_credentials=${globals.__secret__ecAdminCredentials}
        backup_name=$(curl -sS -H 'Content-Type: application/json' -u $__secret__ec_admin_credentials "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_cat/snapshots/${env.shortdomain}/?format=json" |jq '.[0] |.id' -r)
        snapshot_state=$(curl -sS -u $__secret__ec_admin_credentials \
          "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_snapshot/${env.shortdomain}/${backup_name}" | jq -r ".snapshots[0].state")
        if [[ "$snapshot_state" != "SUCCESS" ]]; then
          echo "The Elasticsearch snapshot you are trying to restore is not complete, aborting" >&2
          exit 1
        fi

        curl -sSo /dev/null \
          -u $__secret__ec_admin_credentials \
          -X DELETE "https://$UNOMI_ELASTICSEARCH_ADDRESSES/${UNOMI_ELASTICSEARCH_INDEXPREFIX}-*"

        return_code=$(curl -sS -o $output_file -w '%{http_code}' \
          -H 'Content-Type: application/json' \
          -u $__secret__ec_admin_credentials \
          -XPOST "https://$UNOMI_ELASTICSEARCH_ADDRESSES/_snapshot/${env.shortdomain}/${backup_name}/_restore?wait_for_completion=true" \
          -d'{
            "indices": "-global-geonameentry*,-context-geonameentry*",
            "rename_pattern": "(.*)(__[a-z0-9]+|^context)-(.*)",
            "rename_replacement": "'${UNOMI_ELASTICSEARCH_INDEXPREFIX}'-$3"
          }')
        exit=0
        if [ $return_code -ne 200 ]; then
          cat $output_file | tee -a ${globals.logsPath}
          exit=1
        fi
        i=666;
        until (curl -u "${UNOMI_ELASTICSEARCH_USERNAME}:${UNOMI_ELASTICSEARCH_PASSWORD}" "https://${UNOMI_ELASTICSEARCH_ADDRESSES}"/_cluster/health?pretty -s | egrep -q '.status. : .green.'); do
          ((i--))
          if [ $i -eq 0 ]; then
            echo "Timeout reached, ES still not ready... Exiting"
            exit 66
          fi
          sleep 1
        done
        rm -f $output_file
        exit $exit
    - if ("${response.out}" != ""):
        - return:
            type: error
            message: "An error occurred during the backup restore process."
