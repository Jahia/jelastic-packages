---
type: update
version: 1.5.2
name: PAAS-1875 - Update Distributed Sessions module to 2.1.2/3.1.1/3.2.1
id: paas-1937-update-distributed-sessions-module-to-2.1.2-3.1.1-3.2.1

mixins:
  - "../../mixins/common.yml"
  - "../../mixins/jahia.yml"

globals:
  awkFS: "-F '[[:blank:]]*[â”‚|][[:blank:]]*'"  # yes, karaf may not use pipe char

onInstall:
  - forceCleanKarafLogin
  - setGlobalRepoRootUrl
  - updateDistSess

actions:
  forceCleanKarafLogin:
    - cmd[cp, proc]: |-
        files=("/opt/tomcat/temp/.ssh/known_hosts" "/root/.ssh/known_hosts" "/tmp/abricot" "/tmp/abricot.pub")
        for f in ${files[*]}; do
          [ -f $f  ] && rm -v $f
        done
        sed '/^abricot:/d' -i /data/digital-factory-data/karaf/etc/keys.properties
        sed 's,\(sshRealm\s*=\s*\)karaf,\1jahia,' -i /data/digital-factory-data/karaf/etc/org.apache.karaf.shell.cfg
      user: root

  getDistSessStatus:
    - enableKarafLogin: ${this}
    - cmd[${this}]: |-
        module="distributed-sessions"
        # following will output:
        #   - array like object with one element by module version found
        #   - each element is a object like '{"version": "x.y.z", "status": "<osgi status>"}'
        #   examples:
        #    - [{"version": "2.1.1", "status": "Installed"},{"version": "2.1.2", "status": "Installed"}]
        #    - [{"version": "2.1.2", "status": "Active"}]
        ${globals.karafConsole} cluster:bundle-list -s default \
          | awk ${globals.awkFS} -v module="$module" \
              '{ \
                if($NF==module){ \
                  count++; \
                  entry[count]="{\"version\": \""$6"\", \"status\": \""$2"\"}" \
                  } \
               } \
               END{ \
                 if(count){ \
                   for(e in entry){ \
                     c++; \
                     if(c==1){ \
                       beginwith="["; \
                       if(c==count){ \
                         endwith="]" \
                       }else{ \
                         endwith="," \
                       } \
                     }else{ \
                       beginwith=""; \
                       if(c==count){ \
                         endwith="]" \
                       }else{ \
                         endwith="," \
                       } \
                     }; \
                     printf("%s%s%s",beginwith,entry[e],endwith) \
                   } \
                 }else{ \
                   print("[]") \
                 } \
               }'
    - if ("${response.errOut}" != ""):
        - return:
            type: error
            message: "An error occurred while fetching Distributed Sessions information: ${response.errOut}"
    # the following script is only here to transform the response string to a real json object
    - script: |-
        const rep = ${response.out.toJSON()}
        return {"result": 0, "resp": rep}

  setTargetModuleVersion:
    - getJahiaVersion
    - isVersionStrictlyLower:
        a: ${globals.jahiaVersion}
        b: 8.0.0.0
        res: isLowerThan8000
    - isVersionHigherOrEqual:
        a: ${globals.jahiaVersion}
        b: 8.1.0.0
        res: isHigherOrEqualThan8100
    - if(${globals.isLowerThan8000}):
        - setGlobals:
            distSessVersion: 2.1.2
            dsMigrationVersion: 1.0.0-SNAPSHOT
    - elif(${globals.isHigherOrEqualThan8100}):
        - setGlobals:
            distSessVersion: 3.2.1
            dsMigrationVersion: 2.0.0-SNAPSHOT
    - else:
        - setGlobals:
            distSessVersion: 3.1.1
            dsMigrationVersion: 2.0.0-SNAPSHOT

  triggerDSmigration:
    cmd[${this}]: |-
      log=/tmp/distributedSession.installed
      [ -f $log ] && rm -f $log
      # before trigger DS migration, the new DS module have to be in Resolved state locally
      newDSid=$(${globals.karafConsole} bundle:list -s | awk ${globals.awkFS} \
              '$NF=="distributed-sessions" && $6=="${globals.distSessVersion}" {print $1}')
      ${globals.karafConsole} bundle:resolve $newDSid
      # trigger the DS migration
      timeout=120
      status=0
      until [ $status == 200 ]; do
        [ $timeout == 0 ] && exit 1
        status=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/cms/render/live/en/sites/systemsite.migrateDS.do)
        sleep 1
        ((timeout-=1))
      done
      # wait for log file to appears
      timeout=60
      until [ -f $log ]; do
        [ $timeout == 0 ] && exit 2
        sleep 1
        ((timeout-=1))
      done
      # wait for the migration to end
      timeout=360
      until (grep -q "^Started$" $log); do
        [ $timeout == 0 ] && exit 3
        sleep 1
        ((timeout-=1))
      done

  raiseError:
    - forceCleanKarafLogin
    - return: ${this}

  updateDistSess:
    - setTargetModuleVersion
    - getDistSessStatus: proc
    - setGlobals:
        DS_count: ${response.resp.length}
        stringList: "${response.resp}"
    - if(${response.resp.length} == 0):
        - raiseError: "No Distributed Sessions module here"
    - elif(${globals.DS_count} > 2):
        - raiseError: "More than 2 Distributed Sessions versions here, full status is: ${globals.stringList}"
    - forEach(response.resp):
        - if("${@i.version}" != "${globals.distSessVersion}"):
            - if("${@i.status}" == "Active"):
                - setGlobals:
                    DS_old_active: true
            - else:
                - raiseError: "Old Distributed Sessions ${@i.version} is present but not Active, full status is: ${globals.stringList}"
        - else:
            - if("${@i.status}" != "Active"):
                - raiseError: "New Distributed Sessions ${@i.version} is present but not Active, full status is: ${globals.stringList}"

    - if(globals.DS_old_active):
        - cmd[proc]: |-
            MODULES_BASE_URL=https://store.jahia.com/cms/mavenproxy/private-app-store/org/jahia/modules
            ds_mod_url=$MODULES_BASE_URL/distributed-sessions/${globals.distSessVersion}/distributed-sessions-${globals.distSessVersion}.jar
            ds_migration_url=https://jahia-fixes.s3.eu-west-1.amazonaws.com/distributed-sessions/ds-migration-${globals.dsMigrationVersion}.jar
            # install new DS module
            ${globals.karafConsole} cluster:bundle-install default $ds_mod_url
            # install and start the ds-migration module
            ${globals.karafConsole} cluster:bundle-install -s default $ds_migration_url
        - triggerDSmigration: proc
        - disableKarafLogin: proc
        - forEach(nodes.cp):
            - enableKarafLogin: ${@i.id}
            - triggerDSmigration: ${@i.id}
            - disableKarafLogin: ${@i.id}
        - enableKarafLogin: proc
        - cmd[proc]: |-
            # remove ds-migration module
            ${globals.karafConsole} cluster:bundle-uninstall default ds-migration
            # also uninstall old distributed session at cluster level
            old_version=$(${globals.karafConsole} cluster:bundle-list -s default | awk ${globals.awkFS} \
                        '$NF=="distributed-sessions" && $6!="${globals.distSessVersion}" {print $6}')
            ${globals.karafConsole} cluster:bundle-start default distributed-sessions/${globals.distSessVersion}
            ${globals.karafConsole} cluster:bundle-uninstall default distributed-sessions/$old_version
        - disableKarafLogin: proc
        - checkStat
    - else:
        - disableKarafLogin: proc
        - log: "Looks like all is already good here, full status: ${globals.stringList}"

  checkStat:
    - forEach(env.nodes):
        - if("${@i.nodeType}" == "jahia"):
            - enableKarafLogin: ${@i.id}
            - cmd[${@i.id}]: |-
                ## Local view
                # check we have only one DS module
                n=0
                t=30
                until [ $n -eq 1 ]; do
                  if [ $t -eq 0 ]; then
                    echo "Too many local Distributed Sessions version on ${@i.nodeGroup} ${@i.id}" >&2
                    exit 0
                  fi
                  n=$(${globals.karafConsole} bundle:list -s | awk ${globals.awkFS} \
                    '{if($NF=="distributed-sessions"){count++}} END{print count}')
                  ((t-=1))
                  sleep 1
                done
                # check if the new DS module is well started
                s="unknown"
                t=30
                until [ "$s" == "Active" ]; do
                  if [ $t -eq 0 ]; then
                    echo "Local Distributed Sessions v${globals.distSessVersion}'s status is $s instead of Active on ${@i.nodeGroup} ${@i.id}" >&2
                    exit 0
                  fi
                  s=$(${globals.karafConsole} bundle:list -s | awk ${globals.awkFS} \
                    '$NF=="distributed-sessions" && $4="${globals.distSessVersion}" {print $2}')
                  ((t-=1))
                  sleep 1
                done
                ## Cluster view
                # check we have only one DS module
                n=0
                t=30
                until [ $n -eq 1 ]; do
                  if [ $t -eq 0 ]; then
                    echo "Too many cluster Distributed Sessions version on ${@i.nodeGroup} ${@i.id}" >&2
                    exit 0
                  fi
                  n=$(${globals.karafConsole} cluster:bundle-list -s default | awk ${globals.awkFS} \
                    '{if($NF=="distributed-sessions"){count++}} END{print count}')
                  ((t-=1))
                  sleep 1
                done
                # check if the new DS module is well started
                s="unknown"
                t=30
                until [ "$s" == "Active" ]; do
                  if [ $t -eq 0 ]; then
                    echo "Cluster Distributed Sessions v${globals.distSessVersion}'s status is $s instead of Active on ${@i.nodeGroup} ${@i.id}" >&2
                    exit 0
                  fi
                  s=$(${globals.karafConsole} cluster:bundle-list -s default | awk ${globals.awkFS} \
                    '$NF=="distributed-sessions" && $6="${globals.distSessVersion}" {print $2}')
                  ((t-=1))
                  sleep 1
                done
            - disableKarafLogin: ${@i.id}
